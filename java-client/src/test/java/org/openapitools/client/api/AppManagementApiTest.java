/*
 * Apollo OpenAPI
 * Apollo配置中心OpenAPI接口文档  ## 认证方式  所有API接口都需要通过Authorization header进行身份验证。  ### 获取Token的方式：  1. **Portal管理界面获取**：    - 登录Apollo Portal管理界面    - 进入\"管理员工具\" -> \"开放平台授权管理\"    - 创建第三方应用，获取Token  2. **Token格式**：    ```    Authorization: token_value    ```  3. **Token权限**：    - Token具有对应应用的读写权限    - 不同Token可能有不同的环境和命名空间权限    - 建议为不同用途创建不同的Token  ### 使用示例： ```bash curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\      -H \"Authorization: your_token_here\" ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.EnvClusterInfo;
import org.openapitools.client.model.OpenAppDTO;
import org.openapitools.client.model.OpenEnvClusterDTO;
import org.openapitools.client.model.OpenapiV1AppsGet401Response;
import org.openapitools.client.model.OpenapiV1AppsPost400Response;
import org.openapitools.client.model.OpenapiV1AppsPostRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AppManagementApi
 */
@Disabled
public class AppManagementApiTest {

    private final AppManagementApi api = new AppManagementApi();

    /**
     * 删除AppNamespace
     *
     * DELETE /openapi/v1/apps/{appId}/appnamespaces/{namespaceName}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1AppsAppIdAppnamespacesNamespaceNameDeleteTest() throws ApiException {
        String appId = null;
        String namespaceName = null;
        Object response = api.openapiV1AppsAppIdAppnamespacesNamespaceNameDelete(appId, namespaceName);
        // TODO: test validations
    }

    /**
     * 删除应用
     *
     * DELETE /openapi/v1/apps/{appId}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1AppsAppIdDeleteTest() throws ApiException {
        String appId = null;
        OpenapiV1AppsGet401Response response = api.openapiV1AppsAppIdDelete(appId);
        // TODO: test validations
    }

    /**
     * 获取应用的环境集群信息
     *
     * GET /openapi/v1/apps/{appId}/env-clusters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1AppsAppIdEnvClustersGetTest() throws ApiException {
        String appId = null;
        List<OpenEnvClusterDTO> response = api.openapiV1AppsAppIdEnvClustersGet(appId);
        // TODO: test validations
    }

    /**
     * 删除关联的Namespace
     *
     * DELETE /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/links
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNameLinksDeleteTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        Object response = api.openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNameLinksDelete(appId, env, clusterName, namespaceName);
        // TODO: test validations
    }

    /**
     * 获取单个应用信息
     *
     * GET /openapi/v1/apps/{appId}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1AppsAppIdGetTest() throws ApiException {
        String appId = null;
        OpenAppDTO response = api.openapiV1AppsAppIdGet(appId);
        // TODO: test validations
    }

    /**
     * 查找缺失的环境
     *
     * GET /openapi/v1/apps/{appId}/miss_envs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1AppsAppIdMissEnvsGetTest() throws ApiException {
        String appId = null;
        List<String> response = api.openapiV1AppsAppIdMissEnvsGet(appId);
        // TODO: test validations
    }

    /**
     * 获取应用下所有Namespace的发布状态
     *
     * GET /openapi/v1/apps/{appId}/namespaces/releases/status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1AppsAppIdNamespacesReleasesStatusGetTest() throws ApiException {
        String appId = null;
        Map<String, Map<String, Boolean>> response = api.openapiV1AppsAppIdNamespacesReleasesStatusGet(appId);
        // TODO: test validations
    }

    /**
     * 获取应用导航树
     *
     * GET /openapi/v1/apps/{appId}/navtree
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1AppsAppIdNavtreeGetTest() throws ApiException {
        String appId = null;
        List<EnvClusterInfo> response = api.openapiV1AppsAppIdNavtreeGet(appId);
        // TODO: test validations
    }

    /**
     * 更新应用
     *
     * PUT /openapi/v1/apps/{appId}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1AppsAppIdPutTest() throws ApiException {
        String appId = null;
        OpenAppDTO openAppDTO = null;
        OpenAppDTO response = api.openapiV1AppsAppIdPut(appId, openAppDTO);
        // TODO: test validations
    }

    /**
     * 获取当前Consumer的应用列表（分页）
     *
     * GET /openapi/v1/apps/by-self
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1AppsBySelfGetTest() throws ApiException {
        List<OpenAppDTO> response = api.openapiV1AppsBySelfGet();
        // TODO: test validations
    }

    /**
     * 在指定环境创建应用
     *
     * POST /openapi/v1/apps/envs/{env}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1AppsEnvsEnvPostTest() throws ApiException {
        String env = null;
        OpenAppDTO openAppDTO = null;
        OpenapiV1AppsGet401Response response = api.openapiV1AppsEnvsEnvPost(env, openAppDTO);
        // TODO: test validations
    }

    /**
     * 获取当前Consumer授权的应用列表
     *
     * GET /openapi/v1/apps?authorized&#x3D;true
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1AppsGetTest() throws ApiException {
        String authorized = null;
        List<OpenAppDTO> response = api.openapiV1AppsGet(authorized);
        // TODO: test validations
    }

    /**
     * 创建应用
     *
     * POST /openapi/v1/apps
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1AppsPostTest() throws ApiException {
        OpenapiV1AppsPostRequest openapiV1AppsPostRequest = null;
        OpenAppDTO response = api.openapiV1AppsPost(openapiV1AppsPostRequest);
        // TODO: test validations
    }

}
