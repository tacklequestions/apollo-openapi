/*
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.15.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.apollo.openapi.server.api;

import com.apollo.openapi.server.model.EnvClusterInfo;
import java.util.Map;
import com.apollo.openapi.server.model.OpenAppDTO;
import com.apollo.openapi.server.model.OpenEnvClusterDTO;
import com.apollo.openapi.server.model.OpenapiV1AppsGet401Response;
import com.apollo.openapi.server.model.OpenapiV1AppsPost400Response;
import com.apollo.openapi.server.model.OpenapiV1AppsPostRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-09-14T15:38:43.825630+08:00[Asia/Shanghai]", comments = "Generator version: 7.15.0")
@Validated
@Tag(name = "App Management", description = "应用管理相关接口，包括应用的创建、查询、更新、删除等操作")
public interface AppManagementApi {

    default AppManagementApiDelegate getDelegate() {
        return new AppManagementApiDelegate() {};
    }

    public static final String PATH_OPENAPI_V1_APPS_APP_ID_APPNAMESPACES_NAMESPACE_NAME_DELETE = "/openapi/v1/apps/{appId}/appnamespaces/{namespaceName}";
    /**
     * DELETE /openapi/v1/apps/{appId}/appnamespaces/{namespaceName} : 删除AppNamespace
     * DELETE /openapi/v1/apps/{appId}/appnamespaces/{namespaceName}
     *
     * @param appId  (required)
     * @param namespaceName  (required)
     * @return  (status code 200)
     */
    @Operation(
        operationId = "openapiV1AppsAppIdAppnamespacesNamespaceNameDelete",
        summary = "删除AppNamespace",
        description = "DELETE /openapi/v1/apps/{appId}/appnamespaces/{namespaceName}",
        tags = { "App Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = AppManagementApi.PATH_OPENAPI_V1_APPS_APP_ID_APPNAMESPACES_NAMESPACE_NAME_DELETE,
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> openapiV1AppsAppIdAppnamespacesNamespaceNameDelete(
        @Parameter(name = "appId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId,
        @Parameter(name = "namespaceName", description = "", required = true, in = ParameterIn.PATH) @PathVariable("namespaceName") String namespaceName
    ) {
        return getDelegate().openapiV1AppsAppIdAppnamespacesNamespaceNameDelete(appId, namespaceName);
    }


    public static final String PATH_OPENAPI_V1_APPS_APP_ID_DELETE = "/openapi/v1/apps/{appId}";
    /**
     * DELETE /openapi/v1/apps/{appId} : 删除应用
     * DELETE /openapi/v1/apps/{appId}
     *
     * @param appId  (required)
     * @return 应用删除成功 (status code 200)
     *         or 权限不足，需要超级管理员权限 (status code 403)
     *         or 应用不存在 (status code 404)
     */
    @Operation(
        operationId = "openapiV1AppsAppIdDelete",
        summary = "删除应用",
        description = "DELETE /openapi/v1/apps/{appId}",
        tags = { "App Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "应用删除成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenapiV1AppsGet401Response.class))
            }),
            @ApiResponse(responseCode = "403", description = "权限不足，需要超级管理员权限", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenapiV1AppsGet401Response.class))
            }),
            @ApiResponse(responseCode = "404", description = "应用不存在", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenapiV1AppsGet401Response.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = AppManagementApi.PATH_OPENAPI_V1_APPS_APP_ID_DELETE,
        produces = { "application/json" }
    )
    
    default ResponseEntity<OpenapiV1AppsGet401Response> openapiV1AppsAppIdDelete(
        @Parameter(name = "appId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId
    ) {
        return getDelegate().openapiV1AppsAppIdDelete(appId);
    }


    public static final String PATH_OPENAPI_V1_APPS_APP_ID_ENV_CLUSTERS_GET = "/openapi/v1/apps/{appId}/env-clusters";
    /**
     * GET /openapi/v1/apps/{appId}/env-clusters : 获取应用的环境集群信息
     * GET /openapi/v1/apps/{appId}/env-clusters
     *
     * @param appId  (required)
     * @return 成功获取应用环境集群信息 (status code 200)
     *         or 应用不存在 (status code 404)
     */
    @Operation(
        operationId = "openapiV1AppsAppIdEnvClustersGet",
        summary = "获取应用的环境集群信息",
        description = "GET /openapi/v1/apps/{appId}/env-clusters",
        tags = { "App Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "成功获取应用环境集群信息", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OpenEnvClusterDTO.class)))
            }),
            @ApiResponse(responseCode = "404", description = "应用不存在", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenapiV1AppsGet401Response.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = AppManagementApi.PATH_OPENAPI_V1_APPS_APP_ID_ENV_CLUSTERS_GET,
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<OpenEnvClusterDTO>> openapiV1AppsAppIdEnvClustersGet(
        @Parameter(name = "appId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId
    ) {
        return getDelegate().openapiV1AppsAppIdEnvClustersGet(appId);
    }


    public static final String PATH_OPENAPI_V1_APPS_APP_ID_ENVS_ENV_CLUSTERS_CLUSTER_NAME_NAMESPACES_NAMESPACE_NAME_LINKS_DELETE = "/openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/links";
    /**
     * DELETE /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/links : 删除关联的Namespace
     * DELETE /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/links
     *
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @return  (status code 200)
     */
    @Operation(
        operationId = "openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNameLinksDelete",
        summary = "删除关联的Namespace",
        description = "DELETE /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/links",
        tags = { "App Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = AppManagementApi.PATH_OPENAPI_V1_APPS_APP_ID_ENVS_ENV_CLUSTERS_CLUSTER_NAME_NAMESPACES_NAMESPACE_NAME_LINKS_DELETE,
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNameLinksDelete(
        @Parameter(name = "appId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId,
        @Parameter(name = "env", description = "", required = true, in = ParameterIn.PATH) @PathVariable("env") String env,
        @Parameter(name = "clusterName", description = "", required = true, in = ParameterIn.PATH) @PathVariable("clusterName") String clusterName,
        @Parameter(name = "namespaceName", description = "", required = true, in = ParameterIn.PATH) @PathVariable("namespaceName") String namespaceName
    ) {
        return getDelegate().openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNameLinksDelete(appId, env, clusterName, namespaceName);
    }


    public static final String PATH_OPENAPI_V1_APPS_APP_ID_GET = "/openapi/v1/apps/{appId}";
    /**
     * GET /openapi/v1/apps/{appId} : 获取单个应用信息
     * GET /openapi/v1/apps/{appId}
     *
     * @param appId  (required)
     * @return 成功获取应用信息 (status code 200)
     *         or 应用不存在 (status code 404)
     */
    @Operation(
        operationId = "openapiV1AppsAppIdGet",
        summary = "获取单个应用信息",
        description = "GET /openapi/v1/apps/{appId}",
        tags = { "App Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "成功获取应用信息", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenAppDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "应用不存在", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenapiV1AppsGet401Response.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = AppManagementApi.PATH_OPENAPI_V1_APPS_APP_ID_GET,
        produces = { "application/json" }
    )
    
    default ResponseEntity<OpenAppDTO> openapiV1AppsAppIdGet(
        @Parameter(name = "appId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId
    ) {
        return getDelegate().openapiV1AppsAppIdGet(appId);
    }


    public static final String PATH_OPENAPI_V1_APPS_APP_ID_MISS_ENVS_GET = "/openapi/v1/apps/{appId}/miss_envs";
    /**
     * GET /openapi/v1/apps/{appId}/miss_envs : 查找缺失的环境
     * GET /openapi/v1/apps/{appId}/miss_envs
     *
     * @param appId  (required)
     * @return 成功获取应用缺失的环境列表 (status code 200)
     *         or 应用不存在 (status code 404)
     */
    @Operation(
        operationId = "openapiV1AppsAppIdMissEnvsGet",
        summary = "查找缺失的环境",
        description = "GET /openapi/v1/apps/{appId}/miss_envs",
        tags = { "App Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "成功获取应用缺失的环境列表", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            }),
            @ApiResponse(responseCode = "404", description = "应用不存在", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenapiV1AppsGet401Response.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = AppManagementApi.PATH_OPENAPI_V1_APPS_APP_ID_MISS_ENVS_GET,
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<String>> openapiV1AppsAppIdMissEnvsGet(
        @Parameter(name = "appId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId
    ) {
        return getDelegate().openapiV1AppsAppIdMissEnvsGet(appId);
    }


    public static final String PATH_OPENAPI_V1_APPS_APP_ID_NAMESPACES_RELEASES_STATUS_GET = "/openapi/v1/apps/{appId}/namespaces/releases/status";
    /**
     * GET /openapi/v1/apps/{appId}/namespaces/releases/status : 获取应用下所有Namespace的发布状态
     * GET /openapi/v1/apps/{appId}/namespaces/releases/status
     *
     * @param appId  (required)
     * @return  (status code 200)
     */
    @Operation(
        operationId = "openapiV1AppsAppIdNamespacesReleasesStatusGet",
        summary = "获取应用下所有Namespace的发布状态",
        description = "GET /openapi/v1/apps/{appId}/namespaces/releases/status",
        tags = { "App Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = AppManagementApi.PATH_OPENAPI_V1_APPS_APP_ID_NAMESPACES_RELEASES_STATUS_GET,
        produces = { "application/json" }
    )
    
    default ResponseEntity<Map<String, Map<String, Boolean>>> openapiV1AppsAppIdNamespacesReleasesStatusGet(
        @Parameter(name = "appId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId
    ) {
        return getDelegate().openapiV1AppsAppIdNamespacesReleasesStatusGet(appId);
    }


    public static final String PATH_OPENAPI_V1_APPS_APP_ID_NAVTREE_GET = "/openapi/v1/apps/{appId}/navtree";
    /**
     * GET /openapi/v1/apps/{appId}/navtree : 获取应用导航树
     * GET /openapi/v1/apps/{appId}/navtree
     *
     * @param appId  (required)
     * @return 成功获取应用导航树 (status code 200)
     */
    @Operation(
        operationId = "openapiV1AppsAppIdNavtreeGet",
        summary = "获取应用导航树",
        description = "GET /openapi/v1/apps/{appId}/navtree",
        tags = { "App Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "成功获取应用导航树", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = EnvClusterInfo.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = AppManagementApi.PATH_OPENAPI_V1_APPS_APP_ID_NAVTREE_GET,
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<EnvClusterInfo>> openapiV1AppsAppIdNavtreeGet(
        @Parameter(name = "appId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId
    ) {
        return getDelegate().openapiV1AppsAppIdNavtreeGet(appId);
    }


    public static final String PATH_OPENAPI_V1_APPS_APP_ID_PUT = "/openapi/v1/apps/{appId}";
    /**
     * PUT /openapi/v1/apps/{appId} : 更新应用
     * PUT /openapi/v1/apps/{appId}
     *
     * @param appId  (required)
     * @param openAppDTO  (required)
     * @return  (status code 200)
     *         or 请求参数错误 (status code 400)
     *         or 权限不足 (status code 403)
     */
    @Operation(
        operationId = "openapiV1AppsAppIdPut",
        summary = "更新应用",
        description = "PUT /openapi/v1/apps/{appId}",
        tags = { "App Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenAppDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "请求参数错误", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenapiV1AppsGet401Response.class))
            }),
            @ApiResponse(responseCode = "403", description = "权限不足", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenapiV1AppsGet401Response.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = AppManagementApi.PATH_OPENAPI_V1_APPS_APP_ID_PUT,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<OpenAppDTO> openapiV1AppsAppIdPut(
        @Parameter(name = "appId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId,
        @Parameter(name = "OpenAppDTO", description = "", required = true) @Valid @RequestBody OpenAppDTO openAppDTO
    ) {
        return getDelegate().openapiV1AppsAppIdPut(appId, openAppDTO);
    }


    public static final String PATH_OPENAPI_V1_APPS_BY_SELF_GET = "/openapi/v1/apps/by-self";
    /**
     * GET /openapi/v1/apps/by-self : 获取当前Consumer的应用列表（分页）
     * GET /openapi/v1/apps/by-self
     *
     * @return 成功获取Consumer的应用列表 (status code 200)
     *         or 未授权访问 (status code 401)
     */
    @Operation(
        operationId = "openapiV1AppsBySelfGet",
        summary = "获取当前Consumer的应用列表（分页）",
        description = "GET /openapi/v1/apps/by-self",
        tags = { "App Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "成功获取Consumer的应用列表", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OpenAppDTO.class)))
            }),
            @ApiResponse(responseCode = "401", description = "未授权访问", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenapiV1AppsGet401Response.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = AppManagementApi.PATH_OPENAPI_V1_APPS_BY_SELF_GET,
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<OpenAppDTO>> openapiV1AppsBySelfGet(
        
    ) {
        return getDelegate().openapiV1AppsBySelfGet();
    }


    public static final String PATH_OPENAPI_V1_APPS_ENVS_ENV_POST = "/openapi/v1/apps/envs/{env}";
    /**
     * POST /openapi/v1/apps/envs/{env} : 在指定环境创建应用
     * POST /openapi/v1/apps/envs/{env}
     *
     * @param env  (required)
     * @param openAppDTO  (required)
     * @return 应用在指定环境创建成功 (status code 200)
     *         or 请求参数错误 (status code 400)
     *         or 权限不足 (status code 403)
     */
    @Operation(
        operationId = "openapiV1AppsEnvsEnvPost",
        summary = "在指定环境创建应用",
        description = "POST /openapi/v1/apps/envs/{env}",
        tags = { "App Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "应用在指定环境创建成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenapiV1AppsGet401Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "请求参数错误", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenapiV1AppsGet401Response.class))
            }),
            @ApiResponse(responseCode = "403", description = "权限不足", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenapiV1AppsGet401Response.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = AppManagementApi.PATH_OPENAPI_V1_APPS_ENVS_ENV_POST,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<OpenapiV1AppsGet401Response> openapiV1AppsEnvsEnvPost(
        @Parameter(name = "env", description = "", required = true, in = ParameterIn.PATH) @PathVariable("env") String env,
        @Parameter(name = "OpenAppDTO", description = "", required = true) @Valid @RequestBody OpenAppDTO openAppDTO
    ) {
        return getDelegate().openapiV1AppsEnvsEnvPost(env, openAppDTO);
    }


    public static final String PATH_OPENAPI_V1_APPS_GET = "/openapi/v1/apps";
    /**
     * GET /openapi/v1/apps : 获取当前Consumer授权的应用列表
     * GET /openapi/v1/apps?authorized&#x3D;true
     *
     * @param authorized 是否只返回授权的应用 (optional)
     * @return 成功获取授权应用列表 (status code 200)
     *         or 未授权访问 (status code 401)
     */
    @Operation(
        operationId = "openapiV1AppsGet",
        summary = "获取当前Consumer授权的应用列表",
        description = "GET /openapi/v1/apps?authorized=true",
        tags = { "App Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "成功获取授权应用列表", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OpenAppDTO.class)))
            }),
            @ApiResponse(responseCode = "401", description = "未授权访问", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenapiV1AppsGet401Response.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = AppManagementApi.PATH_OPENAPI_V1_APPS_GET,
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<OpenAppDTO>> openapiV1AppsGet(
        @Parameter(name = "authorized", description = "是否只返回授权的应用", in = ParameterIn.QUERY) @Valid @RequestParam(value = "authorized", required = false) @Nullable String authorized
    ) {
        return getDelegate().openapiV1AppsGet(authorized);
    }


    public static final String PATH_OPENAPI_V1_APPS_POST = "/openapi/v1/apps";
    /**
     * POST /openapi/v1/apps : 创建应用
     * POST /openapi/v1/apps
     *
     * @param openapiV1AppsPostRequest  (required)
     * @return 应用创建成功 (status code 200)
     *         or 请求参数错误 (status code 400)
     *         or 权限不足 (status code 403)
     */
    @Operation(
        operationId = "openapiV1AppsPost",
        summary = "创建应用",
        description = "POST /openapi/v1/apps",
        tags = { "App Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "应用创建成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenAppDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "请求参数错误", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenapiV1AppsPost400Response.class))
            }),
            @ApiResponse(responseCode = "403", description = "权限不足", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenapiV1AppsGet401Response.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = AppManagementApi.PATH_OPENAPI_V1_APPS_POST,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<OpenAppDTO> openapiV1AppsPost(
        @Parameter(name = "OpenapiV1AppsPostRequest", description = "", required = true) @Valid @RequestBody OpenapiV1AppsPostRequest openapiV1AppsPostRequest
    ) {
        return getDelegate().openapiV1AppsPost(openapiV1AppsPostRequest);
    }

}
