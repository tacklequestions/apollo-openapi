/* tslint:disable */
/* eslint-disable */
/**
 * Apollo OpenAPI
 * Apollo配置中心OpenAPI接口文档  ## 认证方式  所有API接口都需要通过Authorization header进行身份验证。  ### 获取Token的方式：  1. **Portal管理界面获取**：    - 登录Apollo Portal管理界面    - 进入\"管理员工具\" -> \"开放平台授权管理\"    - 创建第三方应用，获取Token  2. **Token格式**：    ```    Authorization: token_value    ```  3. **Token权限**：    - Token具有对应应用的读写权限    - 不同Token可能有不同的环境和命名空间权限    - 建议为不同用途创建不同的Token  ### 使用示例： ```bash curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\      -H \"Authorization: your_token_here\" ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OpenAppNamespaceDTO,
  OpenNamespaceDTO,
  OpenNamespaceLockDTO,
  OpenapiV1AppsGet401Response,
} from '../models/index';
import {
    OpenAppNamespaceDTOFromJSON,
    OpenAppNamespaceDTOToJSON,
    OpenNamespaceDTOFromJSON,
    OpenNamespaceDTOToJSON,
    OpenNamespaceLockDTOFromJSON,
    OpenNamespaceLockDTOToJSON,
    OpenapiV1AppsGet401ResponseFromJSON,
    OpenapiV1AppsGet401ResponseToJSON,
} from '../models/index';

export interface OpenapiV1AppnamespacesGetRequest {
    publicOnly: boolean;
}

export interface OpenapiV1AppsAppIdAppnamespacesGetRequest {
    appId: string;
}

export interface OpenapiV1AppsAppIdAppnamespacesNamespaceNameGetRequest {
    appId: string;
    namespaceName: string;
}

export interface OpenapiV1AppsAppIdAppnamespacesPostRequest {
    appId: string;
    openAppNamespaceDTO: OpenAppNamespaceDTO;
}

export interface OpenapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesIntegrityCheckGetRequest {
    appId: string;
    env: string;
    clusterName: string;
}

export interface OpenapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNamePublicAssociationGetRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
}

export interface OpenapiV1EnvsEnvAppnamespacesPublicNamespaceNameInstancesGetRequest {
    env: string;
    publicNamespaceName: string;
    page: number;
    size: number;
}

export interface OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesGetRequest {
    appId: string;
    env: string;
    clusterName: string;
    fillItemDetail: boolean;
}

export interface OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameLockGetRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
}

/**
 * 
 */
export class NamespaceManagementApi extends runtime.BaseAPI {

    /**
     * GET /openapi/v1/appnamespaces?public=true
     * 获取所有公共AppNamespace
     */
    async openapiV1AppnamespacesGetRaw(requestParameters: OpenapiV1AppnamespacesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OpenAppNamespaceDTO>>> {
        if (requestParameters['publicOnly'] == null) {
            throw new runtime.RequiredError(
                'publicOnly',
                'Required parameter "publicOnly" was null or undefined when calling openapiV1AppnamespacesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['publicOnly'] != null) {
            queryParameters['publicOnly'] = requestParameters['publicOnly'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/appnamespaces`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OpenAppNamespaceDTOFromJSON));
    }

    /**
     * GET /openapi/v1/appnamespaces?public=true
     * 获取所有公共AppNamespace
     */
    async openapiV1AppnamespacesGet(requestParameters: OpenapiV1AppnamespacesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OpenAppNamespaceDTO>> {
        const response = await this.openapiV1AppnamespacesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/apps/{appId}/appnamespaces
     * 获取指定应用的AppNamespace
     */
    async openapiV1AppsAppIdAppnamespacesGetRaw(requestParameters: OpenapiV1AppsAppIdAppnamespacesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OpenAppNamespaceDTO>>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1AppsAppIdAppnamespacesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/apps/{appId}/appnamespaces`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OpenAppNamespaceDTOFromJSON));
    }

    /**
     * GET /openapi/v1/apps/{appId}/appnamespaces
     * 获取指定应用的AppNamespace
     */
    async openapiV1AppsAppIdAppnamespacesGet(requestParameters: OpenapiV1AppsAppIdAppnamespacesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OpenAppNamespaceDTO>> {
        const response = await this.openapiV1AppsAppIdAppnamespacesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/apps/{appId}/appnamespaces/{namespaceName}
     * 获取指定的AppNamespace
     */
    async openapiV1AppsAppIdAppnamespacesNamespaceNameGetRaw(requestParameters: OpenapiV1AppsAppIdAppnamespacesNamespaceNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenAppNamespaceDTO>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1AppsAppIdAppnamespacesNamespaceNameGet().'
            );
        }

        if (requestParameters['namespaceName'] == null) {
            throw new runtime.RequiredError(
                'namespaceName',
                'Required parameter "namespaceName" was null or undefined when calling openapiV1AppsAppIdAppnamespacesNamespaceNameGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/apps/{appId}/appnamespaces/{namespaceName}`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters['namespaceName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenAppNamespaceDTOFromJSON(jsonValue));
    }

    /**
     * GET /openapi/v1/apps/{appId}/appnamespaces/{namespaceName}
     * 获取指定的AppNamespace
     */
    async openapiV1AppsAppIdAppnamespacesNamespaceNameGet(requestParameters: OpenapiV1AppsAppIdAppnamespacesNamespaceNameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenAppNamespaceDTO> {
        const response = await this.openapiV1AppsAppIdAppnamespacesNamespaceNameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST /openapi/v1/apps/{appId}/appnamespaces
     * 创建AppNamespace
     */
    async openapiV1AppsAppIdAppnamespacesPostRaw(requestParameters: OpenapiV1AppsAppIdAppnamespacesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenAppNamespaceDTO>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1AppsAppIdAppnamespacesPost().'
            );
        }

        if (requestParameters['openAppNamespaceDTO'] == null) {
            throw new runtime.RequiredError(
                'openAppNamespaceDTO',
                'Required parameter "openAppNamespaceDTO" was null or undefined when calling openapiV1AppsAppIdAppnamespacesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/apps/{appId}/appnamespaces`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OpenAppNamespaceDTOToJSON(requestParameters['openAppNamespaceDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenAppNamespaceDTOFromJSON(jsonValue));
    }

    /**
     * POST /openapi/v1/apps/{appId}/appnamespaces
     * 创建AppNamespace
     */
    async openapiV1AppsAppIdAppnamespacesPost(requestParameters: OpenapiV1AppsAppIdAppnamespacesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenAppNamespaceDTO> {
        const response = await this.openapiV1AppsAppIdAppnamespacesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/integrity-check
     * 检查缺失的Namespace
     */
    async openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesIntegrityCheckGetRaw(requestParameters: OpenapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesIntegrityCheckGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesIntegrityCheckGet().'
            );
        }

        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesIntegrityCheckGet().'
            );
        }

        if (requestParameters['clusterName'] == null) {
            throw new runtime.RequiredError(
                'clusterName',
                'Required parameter "clusterName" was null or undefined when calling openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesIntegrityCheckGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/integrity-check`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters['clusterName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * GET /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/integrity-check
     * 检查缺失的Namespace
     */
    async openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesIntegrityCheckGet(requestParameters: OpenapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesIntegrityCheckGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesIntegrityCheckGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/public-association
     * 获取关联的公共Namespace
     */
    async openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNamePublicAssociationGetRaw(requestParameters: OpenapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNamePublicAssociationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenNamespaceDTO>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNamePublicAssociationGet().'
            );
        }

        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNamePublicAssociationGet().'
            );
        }

        if (requestParameters['clusterName'] == null) {
            throw new runtime.RequiredError(
                'clusterName',
                'Required parameter "clusterName" was null or undefined when calling openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNamePublicAssociationGet().'
            );
        }

        if (requestParameters['namespaceName'] == null) {
            throw new runtime.RequiredError(
                'namespaceName',
                'Required parameter "namespaceName" was null or undefined when calling openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNamePublicAssociationGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/public-association`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters['clusterName'])));
        urlPath = urlPath.replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters['namespaceName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenNamespaceDTOFromJSON(jsonValue));
    }

    /**
     * GET /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/public-association
     * 获取关联的公共Namespace
     */
    async openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNamePublicAssociationGet(requestParameters: OpenapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNamePublicAssociationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenNamespaceDTO> {
        const response = await this.openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNamePublicAssociationGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/envs/{env}/appnamespaces/{publicNamespaceName}/instances
     * 获取公共AppNamespace的所有实例
     */
    async openapiV1EnvsEnvAppnamespacesPublicNamespaceNameInstancesGetRaw(requestParameters: OpenapiV1EnvsEnvAppnamespacesPublicNamespaceNameInstancesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OpenNamespaceDTO>>> {
        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1EnvsEnvAppnamespacesPublicNamespaceNameInstancesGet().'
            );
        }

        if (requestParameters['publicNamespaceName'] == null) {
            throw new runtime.RequiredError(
                'publicNamespaceName',
                'Required parameter "publicNamespaceName" was null or undefined when calling openapiV1EnvsEnvAppnamespacesPublicNamespaceNameInstancesGet().'
            );
        }

        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling openapiV1EnvsEnvAppnamespacesPublicNamespaceNameInstancesGet().'
            );
        }

        if (requestParameters['size'] == null) {
            throw new runtime.RequiredError(
                'size',
                'Required parameter "size" was null or undefined when calling openapiV1EnvsEnvAppnamespacesPublicNamespaceNameInstancesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/envs/{env}/appnamespaces/{publicNamespaceName}/instances`;
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"publicNamespaceName"}}`, encodeURIComponent(String(requestParameters['publicNamespaceName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OpenNamespaceDTOFromJSON));
    }

    /**
     * GET /openapi/v1/envs/{env}/appnamespaces/{publicNamespaceName}/instances
     * 获取公共AppNamespace的所有实例
     */
    async openapiV1EnvsEnvAppnamespacesPublicNamespaceNameInstancesGet(requestParameters: OpenapiV1EnvsEnvAppnamespacesPublicNamespaceNameInstancesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OpenNamespaceDTO>> {
        const response = await this.openapiV1EnvsEnvAppnamespacesPublicNamespaceNameInstancesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces
     * 获取指定集群下的所有Namespace
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesGetRaw(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OpenNamespaceDTO>>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesGet().'
            );
        }

        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesGet().'
            );
        }

        if (requestParameters['clusterName'] == null) {
            throw new runtime.RequiredError(
                'clusterName',
                'Required parameter "clusterName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesGet().'
            );
        }

        if (requestParameters['fillItemDetail'] == null) {
            throw new runtime.RequiredError(
                'fillItemDetail',
                'Required parameter "fillItemDetail" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['fillItemDetail'] != null) {
            queryParameters['fillItemDetail'] = requestParameters['fillItemDetail'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters['clusterName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OpenNamespaceDTOFromJSON));
    }

    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces
     * 获取指定集群下的所有Namespace
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesGet(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OpenNamespaceDTO>> {
        const response = await this.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/lock
     * 获取Namespace的锁状态
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameLockGetRaw(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameLockGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenNamespaceLockDTO>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameLockGet().'
            );
        }

        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameLockGet().'
            );
        }

        if (requestParameters['clusterName'] == null) {
            throw new runtime.RequiredError(
                'clusterName',
                'Required parameter "clusterName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameLockGet().'
            );
        }

        if (requestParameters['namespaceName'] == null) {
            throw new runtime.RequiredError(
                'namespaceName',
                'Required parameter "namespaceName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameLockGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/lock`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters['clusterName'])));
        urlPath = urlPath.replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters['namespaceName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenNamespaceLockDTOFromJSON(jsonValue));
    }

    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/lock
     * 获取Namespace的锁状态
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameLockGet(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameLockGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenNamespaceLockDTO> {
        const response = await this.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameLockGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
