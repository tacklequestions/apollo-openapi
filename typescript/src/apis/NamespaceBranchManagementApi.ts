/* tslint:disable */
/* eslint-disable */
/**
 * Apollo OpenAPI
 * Apollo配置中心OpenAPI接口文档  ## 认证方式  所有API接口都需要通过Authorization header进行身份验证。  ### 获取Token的方式：  1. **Portal管理界面获取**：    - 登录Apollo Portal管理界面    - 进入\"管理员工具\" -> \"开放平台授权管理\"    - 创建第三方应用，获取Token  2. **Token格式**：    ```    Authorization: token_value    ```  3. **Token权限**：    - Token具有对应应用的读写权限    - 不同Token可能有不同的环境和命名空间权限    - 建议为不同用途创建不同的Token  ### 使用示例： ```bash curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\      -H \"Authorization: your_token_here\" ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  NamespaceGrayDelReleaseDTO,
  NamespaceReleaseDTO,
  OpenGrayReleaseRuleDTO,
  OpenItemDTO,
  OpenNamespaceDTO,
  OpenReleaseDTO,
  OpenapiV1AppsGet401Response,
} from '../models/index';
import {
    NamespaceGrayDelReleaseDTOFromJSON,
    NamespaceGrayDelReleaseDTOToJSON,
    NamespaceReleaseDTOFromJSON,
    NamespaceReleaseDTOToJSON,
    OpenGrayReleaseRuleDTOFromJSON,
    OpenGrayReleaseRuleDTOToJSON,
    OpenItemDTOFromJSON,
    OpenItemDTOToJSON,
    OpenNamespaceDTOFromJSON,
    OpenNamespaceDTOToJSON,
    OpenReleaseDTOFromJSON,
    OpenReleaseDTOToJSON,
    OpenapiV1AppsGet401ResponseFromJSON,
    OpenapiV1AppsGet401ResponseToJSON,
} from '../models/index';

export interface OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchPostRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    operator: string;
}

export interface OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameDeleteRequest {
    env: string;
    appId: string;
    clusterName: string;
    namespaceName: string;
    branchName: string;
    operator: string;
}

export interface OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayDelReleasesPostRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    branchName: string;
    namespaceGrayDelReleaseDTO: NamespaceGrayDelReleaseDTO;
}

export interface OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesGetRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    branchName: string;
}

export interface OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesPutRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    branchName: string;
    operator: string;
    openGrayReleaseRuleDTO: OpenGrayReleaseRuleDTO;
}

export interface OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameItemsGetRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    branchName: string;
}

export interface OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameMergePostRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    branchName: string;
    deleteBranch: boolean;
    namespaceReleaseDTO: NamespaceReleaseDTO;
}

export interface OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNamePatchRequest {
    env: string;
    appId: string;
    clusterName: string;
    namespaceName: string;
    branchName: string;
    deleteBranch: boolean;
    xApolloOperator: string;
    namespaceReleaseDTO: NamespaceReleaseDTO;
}

export interface OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameReleasesPostRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    branchName: string;
    namespaceReleaseDTO: NamespaceReleaseDTO;
}

/**
 * 
 */
export class NamespaceBranchManagementApi extends runtime.BaseAPI {

    /**
     * POST /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branch
     * 创建命名空间分支
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchPostRaw(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenNamespaceDTO>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchPost().'
            );
        }

        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchPost().'
            );
        }

        if (requestParameters['clusterName'] == null) {
            throw new runtime.RequiredError(
                'clusterName',
                'Required parameter "clusterName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchPost().'
            );
        }

        if (requestParameters['namespaceName'] == null) {
            throw new runtime.RequiredError(
                'namespaceName',
                'Required parameter "namespaceName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchPost().'
            );
        }

        if (requestParameters['operator'] == null) {
            throw new runtime.RequiredError(
                'operator',
                'Required parameter "operator" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['operator'] != null) {
            queryParameters['operator'] = requestParameters['operator'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branch`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters['clusterName'])));
        urlPath = urlPath.replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters['namespaceName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenNamespaceDTOFromJSON(jsonValue));
    }

    /**
     * POST /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branch
     * 创建命名空间分支
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchPost(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenNamespaceDTO> {
        const response = await this.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DELETE /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}
     * 删除命名空间分支
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameDeleteRaw(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameDelete().'
            );
        }

        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameDelete().'
            );
        }

        if (requestParameters['clusterName'] == null) {
            throw new runtime.RequiredError(
                'clusterName',
                'Required parameter "clusterName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameDelete().'
            );
        }

        if (requestParameters['namespaceName'] == null) {
            throw new runtime.RequiredError(
                'namespaceName',
                'Required parameter "namespaceName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameDelete().'
            );
        }

        if (requestParameters['branchName'] == null) {
            throw new runtime.RequiredError(
                'branchName',
                'Required parameter "branchName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameDelete().'
            );
        }

        if (requestParameters['operator'] == null) {
            throw new runtime.RequiredError(
                'operator',
                'Required parameter "operator" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['operator'] != null) {
            queryParameters['operator'] = requestParameters['operator'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}`;
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters['clusterName'])));
        urlPath = urlPath.replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters['namespaceName'])));
        urlPath = urlPath.replace(`{${"branchName"}}`, encodeURIComponent(String(requestParameters['branchName'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * DELETE /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}
     * 删除命名空间分支
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameDelete(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 创建灰度删除发布
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayDelReleasesPostRaw(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayDelReleasesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenReleaseDTO>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayDelReleasesPost().'
            );
        }

        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayDelReleasesPost().'
            );
        }

        if (requestParameters['clusterName'] == null) {
            throw new runtime.RequiredError(
                'clusterName',
                'Required parameter "clusterName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayDelReleasesPost().'
            );
        }

        if (requestParameters['namespaceName'] == null) {
            throw new runtime.RequiredError(
                'namespaceName',
                'Required parameter "namespaceName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayDelReleasesPost().'
            );
        }

        if (requestParameters['branchName'] == null) {
            throw new runtime.RequiredError(
                'branchName',
                'Required parameter "branchName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayDelReleasesPost().'
            );
        }

        if (requestParameters['namespaceGrayDelReleaseDTO'] == null) {
            throw new runtime.RequiredError(
                'namespaceGrayDelReleaseDTO',
                'Required parameter "namespaceGrayDelReleaseDTO" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayDelReleasesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/gray-del-releases`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters['clusterName'])));
        urlPath = urlPath.replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters['namespaceName'])));
        urlPath = urlPath.replace(`{${"branchName"}}`, encodeURIComponent(String(requestParameters['branchName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NamespaceGrayDelReleaseDTOToJSON(requestParameters['namespaceGrayDelReleaseDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenReleaseDTOFromJSON(jsonValue));
    }

    /**
     * 
     * 创建灰度删除发布
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayDelReleasesPost(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayDelReleasesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenReleaseDTO> {
        const response = await this.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayDelReleasesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/gray-rules
     * 获取分支灰度发布规则
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesGetRaw(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenGrayReleaseRuleDTO>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesGet().'
            );
        }

        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesGet().'
            );
        }

        if (requestParameters['clusterName'] == null) {
            throw new runtime.RequiredError(
                'clusterName',
                'Required parameter "clusterName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesGet().'
            );
        }

        if (requestParameters['namespaceName'] == null) {
            throw new runtime.RequiredError(
                'namespaceName',
                'Required parameter "namespaceName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesGet().'
            );
        }

        if (requestParameters['branchName'] == null) {
            throw new runtime.RequiredError(
                'branchName',
                'Required parameter "branchName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/gray-rules`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters['clusterName'])));
        urlPath = urlPath.replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters['namespaceName'])));
        urlPath = urlPath.replace(`{${"branchName"}}`, encodeURIComponent(String(requestParameters['branchName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenGrayReleaseRuleDTOFromJSON(jsonValue));
    }

    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/gray-rules
     * 获取分支灰度发布规则
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesGet(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenGrayReleaseRuleDTO> {
        const response = await this.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PUT /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/gray-rules
     * 更新分支灰度发布规则
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesPutRaw(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesPut().'
            );
        }

        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesPut().'
            );
        }

        if (requestParameters['clusterName'] == null) {
            throw new runtime.RequiredError(
                'clusterName',
                'Required parameter "clusterName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesPut().'
            );
        }

        if (requestParameters['namespaceName'] == null) {
            throw new runtime.RequiredError(
                'namespaceName',
                'Required parameter "namespaceName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesPut().'
            );
        }

        if (requestParameters['branchName'] == null) {
            throw new runtime.RequiredError(
                'branchName',
                'Required parameter "branchName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesPut().'
            );
        }

        if (requestParameters['operator'] == null) {
            throw new runtime.RequiredError(
                'operator',
                'Required parameter "operator" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesPut().'
            );
        }

        if (requestParameters['openGrayReleaseRuleDTO'] == null) {
            throw new runtime.RequiredError(
                'openGrayReleaseRuleDTO',
                'Required parameter "openGrayReleaseRuleDTO" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['operator'] != null) {
            headerParameters['operator'] = String(requestParameters['operator']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/gray-rules`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters['clusterName'])));
        urlPath = urlPath.replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters['namespaceName'])));
        urlPath = urlPath.replace(`{${"branchName"}}`, encodeURIComponent(String(requestParameters['branchName'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OpenGrayReleaseRuleDTOToJSON(requestParameters['openGrayReleaseRuleDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * PUT /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/gray-rules
     * 更新分支灰度发布规则
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesPut(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/items
     * 获取分支下的配置项
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameItemsGetRaw(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameItemsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OpenItemDTO>>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameItemsGet().'
            );
        }

        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameItemsGet().'
            );
        }

        if (requestParameters['clusterName'] == null) {
            throw new runtime.RequiredError(
                'clusterName',
                'Required parameter "clusterName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameItemsGet().'
            );
        }

        if (requestParameters['namespaceName'] == null) {
            throw new runtime.RequiredError(
                'namespaceName',
                'Required parameter "namespaceName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameItemsGet().'
            );
        }

        if (requestParameters['branchName'] == null) {
            throw new runtime.RequiredError(
                'branchName',
                'Required parameter "branchName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameItemsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/items`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters['clusterName'])));
        urlPath = urlPath.replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters['namespaceName'])));
        urlPath = urlPath.replace(`{${"branchName"}}`, encodeURIComponent(String(requestParameters['branchName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OpenItemDTOFromJSON));
    }

    /**
     * GET /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/items
     * 获取分支下的配置项
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameItemsGet(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameItemsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OpenItemDTO>> {
        const response = await this.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameItemsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 合并分支
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameMergePostRaw(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameMergePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenReleaseDTO>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameMergePost().'
            );
        }

        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameMergePost().'
            );
        }

        if (requestParameters['clusterName'] == null) {
            throw new runtime.RequiredError(
                'clusterName',
                'Required parameter "clusterName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameMergePost().'
            );
        }

        if (requestParameters['namespaceName'] == null) {
            throw new runtime.RequiredError(
                'namespaceName',
                'Required parameter "namespaceName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameMergePost().'
            );
        }

        if (requestParameters['branchName'] == null) {
            throw new runtime.RequiredError(
                'branchName',
                'Required parameter "branchName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameMergePost().'
            );
        }

        if (requestParameters['deleteBranch'] == null) {
            throw new runtime.RequiredError(
                'deleteBranch',
                'Required parameter "deleteBranch" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameMergePost().'
            );
        }

        if (requestParameters['namespaceReleaseDTO'] == null) {
            throw new runtime.RequiredError(
                'namespaceReleaseDTO',
                'Required parameter "namespaceReleaseDTO" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameMergePost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['deleteBranch'] != null) {
            queryParameters['deleteBranch'] = requestParameters['deleteBranch'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/merge`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters['clusterName'])));
        urlPath = urlPath.replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters['namespaceName'])));
        urlPath = urlPath.replace(`{${"branchName"}}`, encodeURIComponent(String(requestParameters['branchName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NamespaceReleaseDTOToJSON(requestParameters['namespaceReleaseDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenReleaseDTOFromJSON(jsonValue));
    }

    /**
     * 
     * 合并分支
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameMergePost(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameMergePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenReleaseDTO> {
        const response = await this.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameMergePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PATCH /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}  使用 PATCH 方法表示部分更新操作（将分支状态从\"独立\"更新为\"合并\"）
     * 合并分支到主分支
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNamePatchRaw(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNamePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenReleaseDTO>> {
        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNamePatch().'
            );
        }

        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNamePatch().'
            );
        }

        if (requestParameters['clusterName'] == null) {
            throw new runtime.RequiredError(
                'clusterName',
                'Required parameter "clusterName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNamePatch().'
            );
        }

        if (requestParameters['namespaceName'] == null) {
            throw new runtime.RequiredError(
                'namespaceName',
                'Required parameter "namespaceName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNamePatch().'
            );
        }

        if (requestParameters['branchName'] == null) {
            throw new runtime.RequiredError(
                'branchName',
                'Required parameter "branchName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNamePatch().'
            );
        }

        if (requestParameters['deleteBranch'] == null) {
            throw new runtime.RequiredError(
                'deleteBranch',
                'Required parameter "deleteBranch" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNamePatch().'
            );
        }

        if (requestParameters['xApolloOperator'] == null) {
            throw new runtime.RequiredError(
                'xApolloOperator',
                'Required parameter "xApolloOperator" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNamePatch().'
            );
        }

        if (requestParameters['namespaceReleaseDTO'] == null) {
            throw new runtime.RequiredError(
                'namespaceReleaseDTO',
                'Required parameter "namespaceReleaseDTO" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNamePatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['deleteBranch'] != null) {
            queryParameters['deleteBranch'] = requestParameters['deleteBranch'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xApolloOperator'] != null) {
            headerParameters['X-Apollo-Operator'] = String(requestParameters['xApolloOperator']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}`;
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters['clusterName'])));
        urlPath = urlPath.replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters['namespaceName'])));
        urlPath = urlPath.replace(`{${"branchName"}}`, encodeURIComponent(String(requestParameters['branchName'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: NamespaceReleaseDTOToJSON(requestParameters['namespaceReleaseDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenReleaseDTOFromJSON(jsonValue));
    }

    /**
     * PATCH /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}  使用 PATCH 方法表示部分更新操作（将分支状态从\"独立\"更新为\"合并\"）
     * 合并分支到主分支
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNamePatch(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNamePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenReleaseDTO> {
        const response = await this.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNamePatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 创建灰度发布
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameReleasesPostRaw(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameReleasesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenReleaseDTO>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameReleasesPost().'
            );
        }

        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameReleasesPost().'
            );
        }

        if (requestParameters['clusterName'] == null) {
            throw new runtime.RequiredError(
                'clusterName',
                'Required parameter "clusterName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameReleasesPost().'
            );
        }

        if (requestParameters['namespaceName'] == null) {
            throw new runtime.RequiredError(
                'namespaceName',
                'Required parameter "namespaceName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameReleasesPost().'
            );
        }

        if (requestParameters['branchName'] == null) {
            throw new runtime.RequiredError(
                'branchName',
                'Required parameter "branchName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameReleasesPost().'
            );
        }

        if (requestParameters['namespaceReleaseDTO'] == null) {
            throw new runtime.RequiredError(
                'namespaceReleaseDTO',
                'Required parameter "namespaceReleaseDTO" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameReleasesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/releases`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters['clusterName'])));
        urlPath = urlPath.replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters['namespaceName'])));
        urlPath = urlPath.replace(`{${"branchName"}}`, encodeURIComponent(String(requestParameters['branchName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NamespaceReleaseDTOToJSON(requestParameters['namespaceReleaseDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenReleaseDTOFromJSON(jsonValue));
    }

    /**
     * 
     * 创建灰度发布
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameReleasesPost(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameReleasesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenReleaseDTO> {
        const response = await this.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameReleasesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
