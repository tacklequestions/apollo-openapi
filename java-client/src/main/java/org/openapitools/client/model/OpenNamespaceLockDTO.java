/*
 * Apollo OpenAPI
 * Apollo配置中心OpenAPI接口文档  ## 认证方式  所有API接口都需要通过Authorization header进行身份验证。  ### 获取Token的方式：  1. **Portal管理界面获取**：    - 登录Apollo Portal管理界面    - 进入\"管理员工具\" -> \"开放平台授权管理\"    - 创建第三方应用，获取Token  2. **Token格式**：    ```    Authorization: token_value    ```  3. **Token权限**：    - Token具有对应应用的读写权限    - 不同Token可能有不同的环境和命名空间权限    - 建议为不同用途创建不同的Token  ### 使用示例： ```bash curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\      -H \"Authorization: your_token_here\" ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Apollo命名空间锁状态数据传输对象
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-14T16:24:26.137229+08:00[Asia/Shanghai]", comments = "Generator version: 7.15.0")
public class OpenNamespaceLockDTO {
  public static final String SERIALIZED_NAME_NAMESPACE_NAME = "namespaceName";
  @SerializedName(SERIALIZED_NAME_NAMESPACE_NAME)
  @javax.annotation.Nullable
  private String namespaceName;

  public static final String SERIALIZED_NAME_IS_LOCKED = "isLocked";
  @SerializedName(SERIALIZED_NAME_IS_LOCKED)
  @javax.annotation.Nullable
  private Boolean isLocked;

  public static final String SERIALIZED_NAME_LOCKED_BY = "lockedBy";
  @SerializedName(SERIALIZED_NAME_LOCKED_BY)
  @javax.annotation.Nullable
  private String lockedBy;

  public OpenNamespaceLockDTO() {
  }

  public OpenNamespaceLockDTO namespaceName(@javax.annotation.Nullable String namespaceName) {
    this.namespaceName = namespaceName;
    return this;
  }

  /**
   * 命名空间名称
   * @return namespaceName
   */
  @javax.annotation.Nullable
  public String getNamespaceName() {
    return namespaceName;
  }

  public void setNamespaceName(@javax.annotation.Nullable String namespaceName) {
    this.namespaceName = namespaceName;
  }


  public OpenNamespaceLockDTO isLocked(@javax.annotation.Nullable Boolean isLocked) {
    this.isLocked = isLocked;
    return this;
  }

  /**
   * 是否被锁定
   * @return isLocked
   */
  @javax.annotation.Nullable
  public Boolean getIsLocked() {
    return isLocked;
  }

  public void setIsLocked(@javax.annotation.Nullable Boolean isLocked) {
    this.isLocked = isLocked;
  }


  public OpenNamespaceLockDTO lockedBy(@javax.annotation.Nullable String lockedBy) {
    this.lockedBy = lockedBy;
    return this;
  }

  /**
   * 锁定者用户名
   * @return lockedBy
   */
  @javax.annotation.Nullable
  public String getLockedBy() {
    return lockedBy;
  }

  public void setLockedBy(@javax.annotation.Nullable String lockedBy) {
    this.lockedBy = lockedBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OpenNamespaceLockDTO openNamespaceLockDTO = (OpenNamespaceLockDTO) o;
    return Objects.equals(this.namespaceName, openNamespaceLockDTO.namespaceName) &&
        Objects.equals(this.isLocked, openNamespaceLockDTO.isLocked) &&
        Objects.equals(this.lockedBy, openNamespaceLockDTO.lockedBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(namespaceName, isLocked, lockedBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OpenNamespaceLockDTO {\n");
    sb.append("    namespaceName: ").append(toIndentedString(namespaceName)).append("\n");
    sb.append("    isLocked: ").append(toIndentedString(isLocked)).append("\n");
    sb.append("    lockedBy: ").append(toIndentedString(lockedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("namespaceName", "isLocked", "lockedBy"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OpenNamespaceLockDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OpenNamespaceLockDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OpenNamespaceLockDTO is not found in the empty JSON string", OpenNamespaceLockDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OpenNamespaceLockDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OpenNamespaceLockDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("namespaceName") != null && !jsonObj.get("namespaceName").isJsonNull()) && !jsonObj.get("namespaceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespaceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespaceName").toString()));
      }
      if ((jsonObj.get("lockedBy") != null && !jsonObj.get("lockedBy").isJsonNull()) && !jsonObj.get("lockedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lockedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lockedBy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OpenNamespaceLockDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OpenNamespaceLockDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OpenNamespaceLockDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OpenNamespaceLockDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<OpenNamespaceLockDTO>() {
           @Override
           public void write(JsonWriter out, OpenNamespaceLockDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OpenNamespaceLockDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OpenNamespaceLockDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OpenNamespaceLockDTO
   * @throws IOException if the JSON string is invalid with respect to OpenNamespaceLockDTO
   */
  public static OpenNamespaceLockDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OpenNamespaceLockDTO.class);
  }

  /**
   * Convert an instance of OpenNamespaceLockDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

