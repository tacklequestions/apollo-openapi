/*
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.15.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.apollo.openapi.server.api;

import com.apollo.openapi.server.model.OpenAppNamespaceDTO;
import com.apollo.openapi.server.model.OpenNamespaceDTO;
import com.apollo.openapi.server.model.OpenNamespaceLockDTO;
import com.apollo.openapi.server.model.OpenapiV1AppsGet401Response;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-09-14T15:38:43.825630+08:00[Asia/Shanghai]", comments = "Generator version: 7.15.0")
@Validated
@Tag(name = "Namespace Management", description = "命名空间管理相关接口，包括命名空间的创建、查询、配置等操作")
public interface NamespaceManagementApi {

    default NamespaceManagementApiDelegate getDelegate() {
        return new NamespaceManagementApiDelegate() {};
    }

    public static final String PATH_OPENAPI_V1_APPNAMESPACES_GET = "/openapi/v1/appnamespaces";
    /**
     * GET /openapi/v1/appnamespaces : 获取所有公共AppNamespace
     * GET /openapi/v1/appnamespaces?public&#x3D;true
     *
     * @param publicOnly  (required)
     * @return  (status code 200)
     */
    @Operation(
        operationId = "openapiV1AppnamespacesGet",
        summary = "获取所有公共AppNamespace",
        description = "GET /openapi/v1/appnamespaces?public=true",
        tags = { "Namespace Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OpenAppNamespaceDTO.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = NamespaceManagementApi.PATH_OPENAPI_V1_APPNAMESPACES_GET,
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<OpenAppNamespaceDTO>> openapiV1AppnamespacesGet(
        @NotNull @Parameter(name = "publicOnly", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "publicOnly", required = true) Boolean publicOnly
    ) {
        return getDelegate().openapiV1AppnamespacesGet(publicOnly);
    }


    public static final String PATH_OPENAPI_V1_APPS_APP_ID_APPNAMESPACES_GET = "/openapi/v1/apps/{appId}/appnamespaces";
    /**
     * GET /openapi/v1/apps/{appId}/appnamespaces : 获取指定应用的AppNamespace
     * GET /openapi/v1/apps/{appId}/appnamespaces
     *
     * @param appId  (required)
     * @return  (status code 200)
     */
    @Operation(
        operationId = "openapiV1AppsAppIdAppnamespacesGet",
        summary = "获取指定应用的AppNamespace",
        description = "GET /openapi/v1/apps/{appId}/appnamespaces",
        tags = { "Namespace Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OpenAppNamespaceDTO.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = NamespaceManagementApi.PATH_OPENAPI_V1_APPS_APP_ID_APPNAMESPACES_GET,
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<OpenAppNamespaceDTO>> openapiV1AppsAppIdAppnamespacesGet(
        @Parameter(name = "appId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId
    ) {
        return getDelegate().openapiV1AppsAppIdAppnamespacesGet(appId);
    }


    public static final String PATH_OPENAPI_V1_APPS_APP_ID_APPNAMESPACES_NAMESPACE_NAME_GET = "/openapi/v1/apps/{appId}/appnamespaces/{namespaceName}";
    /**
     * GET /openapi/v1/apps/{appId}/appnamespaces/{namespaceName} : 获取指定的AppNamespace
     * GET /openapi/v1/apps/{appId}/appnamespaces/{namespaceName}
     *
     * @param appId  (required)
     * @param namespaceName  (required)
     * @return  (status code 200)
     */
    @Operation(
        operationId = "openapiV1AppsAppIdAppnamespacesNamespaceNameGet",
        summary = "获取指定的AppNamespace",
        description = "GET /openapi/v1/apps/{appId}/appnamespaces/{namespaceName}",
        tags = { "Namespace Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenAppNamespaceDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = NamespaceManagementApi.PATH_OPENAPI_V1_APPS_APP_ID_APPNAMESPACES_NAMESPACE_NAME_GET,
        produces = { "application/json" }
    )
    
    default ResponseEntity<OpenAppNamespaceDTO> openapiV1AppsAppIdAppnamespacesNamespaceNameGet(
        @Parameter(name = "appId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId,
        @Parameter(name = "namespaceName", description = "", required = true, in = ParameterIn.PATH) @PathVariable("namespaceName") String namespaceName
    ) {
        return getDelegate().openapiV1AppsAppIdAppnamespacesNamespaceNameGet(appId, namespaceName);
    }


    public static final String PATH_OPENAPI_V1_APPS_APP_ID_APPNAMESPACES_POST = "/openapi/v1/apps/{appId}/appnamespaces";
    /**
     * POST /openapi/v1/apps/{appId}/appnamespaces : 创建AppNamespace
     * POST /openapi/v1/apps/{appId}/appnamespaces
     *
     * @param appId  (required)
     * @param openAppNamespaceDTO  (required)
     * @return AppNamespace创建成功 (status code 200)
     *         or 请求参数错误 (status code 400)
     *         or 权限不足 (status code 403)
     */
    @Operation(
        operationId = "openapiV1AppsAppIdAppnamespacesPost",
        summary = "创建AppNamespace",
        description = "POST /openapi/v1/apps/{appId}/appnamespaces",
        tags = { "Namespace Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "AppNamespace创建成功", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenAppNamespaceDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "请求参数错误", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenapiV1AppsGet401Response.class))
            }),
            @ApiResponse(responseCode = "403", description = "权限不足", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenapiV1AppsGet401Response.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = NamespaceManagementApi.PATH_OPENAPI_V1_APPS_APP_ID_APPNAMESPACES_POST,
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<OpenAppNamespaceDTO> openapiV1AppsAppIdAppnamespacesPost(
        @Parameter(name = "appId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId,
        @Parameter(name = "OpenAppNamespaceDTO", description = "", required = true) @Valid @RequestBody OpenAppNamespaceDTO openAppNamespaceDTO
    ) {
        return getDelegate().openapiV1AppsAppIdAppnamespacesPost(appId, openAppNamespaceDTO);
    }


    public static final String PATH_OPENAPI_V1_APPS_APP_ID_ENVS_ENV_CLUSTERS_CLUSTER_NAME_NAMESPACES_INTEGRITY_CHECK_GET = "/openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/integrity-check";
    /**
     * GET /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/integrity-check : 检查缺失的Namespace
     * GET /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/integrity-check
     *
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @return  (status code 200)
     */
    @Operation(
        operationId = "openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesIntegrityCheckGet",
        summary = "检查缺失的Namespace",
        description = "GET /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/integrity-check",
        tags = { "Namespace Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = NamespaceManagementApi.PATH_OPENAPI_V1_APPS_APP_ID_ENVS_ENV_CLUSTERS_CLUSTER_NAME_NAMESPACES_INTEGRITY_CHECK_GET,
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<String>> openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesIntegrityCheckGet(
        @Parameter(name = "appId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId,
        @Parameter(name = "env", description = "", required = true, in = ParameterIn.PATH) @PathVariable("env") String env,
        @Parameter(name = "clusterName", description = "", required = true, in = ParameterIn.PATH) @PathVariable("clusterName") String clusterName
    ) {
        return getDelegate().openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesIntegrityCheckGet(appId, env, clusterName);
    }


    public static final String PATH_OPENAPI_V1_APPS_APP_ID_ENVS_ENV_CLUSTERS_CLUSTER_NAME_NAMESPACES_NAMESPACE_NAME_PUBLIC_ASSOCIATION_GET = "/openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/public-association";
    /**
     * GET /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/public-association : 获取关联的公共Namespace
     * GET /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/public-association
     *
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @return  (status code 200)
     */
    @Operation(
        operationId = "openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNamePublicAssociationGet",
        summary = "获取关联的公共Namespace",
        description = "GET /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/public-association",
        tags = { "Namespace Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenNamespaceDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = NamespaceManagementApi.PATH_OPENAPI_V1_APPS_APP_ID_ENVS_ENV_CLUSTERS_CLUSTER_NAME_NAMESPACES_NAMESPACE_NAME_PUBLIC_ASSOCIATION_GET,
        produces = { "application/json" }
    )
    
    default ResponseEntity<OpenNamespaceDTO> openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNamePublicAssociationGet(
        @Parameter(name = "appId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId,
        @Parameter(name = "env", description = "", required = true, in = ParameterIn.PATH) @PathVariable("env") String env,
        @Parameter(name = "clusterName", description = "", required = true, in = ParameterIn.PATH) @PathVariable("clusterName") String clusterName,
        @Parameter(name = "namespaceName", description = "", required = true, in = ParameterIn.PATH) @PathVariable("namespaceName") String namespaceName
    ) {
        return getDelegate().openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNamePublicAssociationGet(appId, env, clusterName, namespaceName);
    }


    public static final String PATH_OPENAPI_V1_ENVS_ENV_APPNAMESPACES_PUBLIC_NAMESPACE_NAME_INSTANCES_GET = "/openapi/v1/envs/{env}/appnamespaces/{publicNamespaceName}/instances";
    /**
     * GET /openapi/v1/envs/{env}/appnamespaces/{publicNamespaceName}/instances : 获取公共AppNamespace的所有实例
     * GET /openapi/v1/envs/{env}/appnamespaces/{publicNamespaceName}/instances
     *
     * @param env  (required)
     * @param publicNamespaceName  (required)
     * @param page  (required)
     * @param size  (required)
     * @return  (status code 200)
     */
    @Operation(
        operationId = "openapiV1EnvsEnvAppnamespacesPublicNamespaceNameInstancesGet",
        summary = "获取公共AppNamespace的所有实例",
        description = "GET /openapi/v1/envs/{env}/appnamespaces/{publicNamespaceName}/instances",
        tags = { "Namespace Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OpenNamespaceDTO.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = NamespaceManagementApi.PATH_OPENAPI_V1_ENVS_ENV_APPNAMESPACES_PUBLIC_NAMESPACE_NAME_INSTANCES_GET,
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<OpenNamespaceDTO>> openapiV1EnvsEnvAppnamespacesPublicNamespaceNameInstancesGet(
        @Parameter(name = "env", description = "", required = true, in = ParameterIn.PATH) @PathVariable("env") String env,
        @Parameter(name = "publicNamespaceName", description = "", required = true, in = ParameterIn.PATH) @PathVariable("publicNamespaceName") String publicNamespaceName,
        @NotNull @Parameter(name = "page", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = true) Integer page,
        @NotNull @Parameter(name = "size", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = true) Integer size
    ) {
        return getDelegate().openapiV1EnvsEnvAppnamespacesPublicNamespaceNameInstancesGet(env, publicNamespaceName, page, size);
    }


    public static final String PATH_OPENAPI_V1_ENVS_ENV_APPS_APP_ID_CLUSTERS_CLUSTER_NAME_NAMESPACES_GET = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces";
    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces : 获取指定集群下的所有Namespace
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces
     *
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param fillItemDetail  (required)
     * @return  (status code 200)
     */
    @Operation(
        operationId = "openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesGet",
        summary = "获取指定集群下的所有Namespace",
        description = "GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces",
        tags = { "Namespace Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OpenNamespaceDTO.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = NamespaceManagementApi.PATH_OPENAPI_V1_ENVS_ENV_APPS_APP_ID_CLUSTERS_CLUSTER_NAME_NAMESPACES_GET,
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<OpenNamespaceDTO>> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesGet(
        @Parameter(name = "appId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId,
        @Parameter(name = "env", description = "", required = true, in = ParameterIn.PATH) @PathVariable("env") String env,
        @Parameter(name = "clusterName", description = "", required = true, in = ParameterIn.PATH) @PathVariable("clusterName") String clusterName,
        @NotNull @Parameter(name = "fillItemDetail", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "fillItemDetail", required = true) Boolean fillItemDetail
    ) {
        return getDelegate().openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesGet(appId, env, clusterName, fillItemDetail);
    }


    public static final String PATH_OPENAPI_V1_ENVS_ENV_APPS_APP_ID_CLUSTERS_CLUSTER_NAME_NAMESPACES_NAMESPACE_NAME_LOCK_GET = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/lock";
    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/lock : 获取Namespace的锁状态
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/lock
     *
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @return  (status code 200)
     */
    @Operation(
        operationId = "openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameLockGet",
        summary = "获取Namespace的锁状态",
        description = "GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/lock",
        tags = { "Namespace Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenNamespaceLockDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = NamespaceManagementApi.PATH_OPENAPI_V1_ENVS_ENV_APPS_APP_ID_CLUSTERS_CLUSTER_NAME_NAMESPACES_NAMESPACE_NAME_LOCK_GET,
        produces = { "application/json" }
    )
    
    default ResponseEntity<OpenNamespaceLockDTO> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameLockGet(
        @Parameter(name = "appId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId,
        @Parameter(name = "env", description = "", required = true, in = ParameterIn.PATH) @PathVariable("env") String env,
        @Parameter(name = "clusterName", description = "", required = true, in = ParameterIn.PATH) @PathVariable("clusterName") String clusterName,
        @Parameter(name = "namespaceName", description = "", required = true, in = ParameterIn.PATH) @PathVariable("namespaceName") String namespaceName
    ) {
        return getDelegate().openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameLockGet(appId, env, clusterName, namespaceName);
    }

}
