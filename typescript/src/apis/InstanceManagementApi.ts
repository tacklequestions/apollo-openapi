/* tslint:disable */
/* eslint-disable */
/**
 * Apollo OpenAPI
 * Apollo配置中心OpenAPI接口文档  ## 认证方式  所有API接口都需要通过Authorization header进行身份验证。  ### 获取Token的方式：  1. **Portal管理界面获取**：    - 登录Apollo Portal管理界面    - 进入\"管理员工具\" -> \"开放平台授权管理\"    - 创建第三方应用，获取Token  2. **Token格式**：    ```    Authorization: token_value    ```  3. **Token权限**：    - Token具有对应应用的读写权限    - 不同Token可能有不同的环境和命名空间权限    - 建议为不同用途创建不同的Token  ### 使用示例： ```bash curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\      -H \"Authorization: your_token_here\" ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OpenInstanceDTO,
  OpenPageDTOOpenInstanceDTO,
} from '../models/index';
import {
    OpenInstanceDTOFromJSON,
    OpenInstanceDTOToJSON,
    OpenPageDTOOpenInstanceDTOFromJSON,
    OpenPageDTOOpenInstanceDTOToJSON,
} from '../models/index';

export interface OpenapiV1AppsAppIdClustersClusterNameNamespacesNamespaceNameInstancesGetRequest {
    appId: string;
    clusterName: string;
    namespaceName: string;
}

export interface OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameInstancesGetRequest {
    env: string;
    appId: string;
    clusterName: string;
    namespaceName: string;
    excludeReleases?: string;
}

export interface OpenapiV1EnvsEnvReleasesReleaseIdInstancesGetRequest {
    env: string;
    releaseId: number;
    page: number;
    size: number;
}

/**
 * 
 */
export class InstanceManagementApi extends runtime.BaseAPI {

    /**
     * GET /openapi/v1/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/instances
     * 获取命名空间下的实例数量
     */
    async openapiV1AppsAppIdClustersClusterNameNamespacesNamespaceNameInstancesGetRaw(requestParameters: OpenapiV1AppsAppIdClustersClusterNameNamespacesNamespaceNameInstancesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1AppsAppIdClustersClusterNameNamespacesNamespaceNameInstancesGet().'
            );
        }

        if (requestParameters['clusterName'] == null) {
            throw new runtime.RequiredError(
                'clusterName',
                'Required parameter "clusterName" was null or undefined when calling openapiV1AppsAppIdClustersClusterNameNamespacesNamespaceNameInstancesGet().'
            );
        }

        if (requestParameters['namespaceName'] == null) {
            throw new runtime.RequiredError(
                'namespaceName',
                'Required parameter "namespaceName" was null or undefined when calling openapiV1AppsAppIdClustersClusterNameNamespacesNamespaceNameInstancesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/instances`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters['clusterName'])));
        urlPath = urlPath.replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters['namespaceName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * GET /openapi/v1/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/instances
     * 获取命名空间下的实例数量
     */
    async openapiV1AppsAppIdClustersClusterNameNamespacesNamespaceNameInstancesGet(requestParameters: OpenapiV1AppsAppIdClustersClusterNameNamespacesNamespaceNameInstancesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.openapiV1AppsAppIdClustersClusterNameNamespacesNamespaceNameInstancesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/instances?excludeReleases=1,2,3
     * 查询不在指定发布版本中的实例
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameInstancesGetRaw(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameInstancesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OpenInstanceDTO>>> {
        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameInstancesGet().'
            );
        }

        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameInstancesGet().'
            );
        }

        if (requestParameters['clusterName'] == null) {
            throw new runtime.RequiredError(
                'clusterName',
                'Required parameter "clusterName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameInstancesGet().'
            );
        }

        if (requestParameters['namespaceName'] == null) {
            throw new runtime.RequiredError(
                'namespaceName',
                'Required parameter "namespaceName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameInstancesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['excludeReleases'] != null) {
            queryParameters['excludeReleases'] = requestParameters['excludeReleases'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/instances`;
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters['clusterName'])));
        urlPath = urlPath.replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters['namespaceName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OpenInstanceDTOFromJSON));
    }

    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/instances?excludeReleases=1,2,3
     * 查询不在指定发布版本中的实例
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameInstancesGet(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameInstancesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OpenInstanceDTO>> {
        const response = await this.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameInstancesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/envs/{env}/releases/{releaseId}/instances
     * 根据发布版本查询实例（支持分页）
     */
    async openapiV1EnvsEnvReleasesReleaseIdInstancesGetRaw(requestParameters: OpenapiV1EnvsEnvReleasesReleaseIdInstancesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenPageDTOOpenInstanceDTO>> {
        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1EnvsEnvReleasesReleaseIdInstancesGet().'
            );
        }

        if (requestParameters['releaseId'] == null) {
            throw new runtime.RequiredError(
                'releaseId',
                'Required parameter "releaseId" was null or undefined when calling openapiV1EnvsEnvReleasesReleaseIdInstancesGet().'
            );
        }

        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling openapiV1EnvsEnvReleasesReleaseIdInstancesGet().'
            );
        }

        if (requestParameters['size'] == null) {
            throw new runtime.RequiredError(
                'size',
                'Required parameter "size" was null or undefined when calling openapiV1EnvsEnvReleasesReleaseIdInstancesGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/envs/{env}/releases/{releaseId}/instances`;
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"releaseId"}}`, encodeURIComponent(String(requestParameters['releaseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenPageDTOOpenInstanceDTOFromJSON(jsonValue));
    }

    /**
     * GET /openapi/v1/envs/{env}/releases/{releaseId}/instances
     * 根据发布版本查询实例（支持分页）
     */
    async openapiV1EnvsEnvReleasesReleaseIdInstancesGet(requestParameters: OpenapiV1EnvsEnvReleasesReleaseIdInstancesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenPageDTOOpenInstanceDTO> {
        const response = await this.openapiV1EnvsEnvReleasesReleaseIdInstancesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
