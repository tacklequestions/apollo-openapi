/*
 * Apollo OpenAPI
 * Apollo配置中心OpenAPI接口文档  ## 认证方式  所有API接口都需要通过Authorization header进行身份验证。  ### 获取Token的方式：  1. **Portal管理界面获取**：    - 登录Apollo Portal管理界面    - 进入\"管理员工具\" -> \"开放平台授权管理\"    - 创建第三方应用，获取Token  2. **Token格式**：    ```    Authorization: token_value    ```  3. **Token权限**：    - Token具有对应应用的读写权限    - 不同Token可能有不同的环境和命名空间权限    - 建议为不同用途创建不同的Token  ### 使用示例： ```bash curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\      -H \"Authorization: your_token_here\" ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.EnvClusterInfo;
import org.openapitools.client.model.OpenAppDTO;
import org.openapitools.client.model.OpenEnvClusterDTO;
import org.openapitools.client.model.OpenapiV1AppsGet401Response;
import org.openapitools.client.model.OpenapiV1AppsPost400Response;
import org.openapitools.client.model.OpenapiV1AppsPostRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AppManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AppManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AppManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for openapiV1AppsAppIdAppnamespacesNamespaceNameDelete
     * @param appId  (required)
     * @param namespaceName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsAppIdAppnamespacesNamespaceNameDeleteCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String namespaceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/apps/{appId}/appnamespaces/{namespaceName}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1AppsAppIdAppnamespacesNamespaceNameDeleteValidateBeforeCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String namespaceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1AppsAppIdAppnamespacesNamespaceNameDelete(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling openapiV1AppsAppIdAppnamespacesNamespaceNameDelete(Async)");
        }

        return openapiV1AppsAppIdAppnamespacesNamespaceNameDeleteCall(appId, namespaceName, _callback);

    }

    /**
     * 删除AppNamespace
     * DELETE /openapi/v1/apps/{appId}/appnamespaces/{namespaceName}
     * @param appId  (required)
     * @param namespaceName  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object openapiV1AppsAppIdAppnamespacesNamespaceNameDelete(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String namespaceName) throws ApiException {
        ApiResponse<Object> localVarResp = openapiV1AppsAppIdAppnamespacesNamespaceNameDeleteWithHttpInfo(appId, namespaceName);
        return localVarResp.getData();
    }

    /**
     * 删除AppNamespace
     * DELETE /openapi/v1/apps/{appId}/appnamespaces/{namespaceName}
     * @param appId  (required)
     * @param namespaceName  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> openapiV1AppsAppIdAppnamespacesNamespaceNameDeleteWithHttpInfo(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String namespaceName) throws ApiException {
        okhttp3.Call localVarCall = openapiV1AppsAppIdAppnamespacesNamespaceNameDeleteValidateBeforeCall(appId, namespaceName, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 删除AppNamespace (asynchronously)
     * DELETE /openapi/v1/apps/{appId}/appnamespaces/{namespaceName}
     * @param appId  (required)
     * @param namespaceName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsAppIdAppnamespacesNamespaceNameDeleteAsync(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String namespaceName, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1AppsAppIdAppnamespacesNamespaceNameDeleteValidateBeforeCall(appId, namespaceName, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1AppsAppIdDelete
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 应用删除成功 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足，需要超级管理员权限 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 应用不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsAppIdDeleteCall(@javax.annotation.Nonnull String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/apps/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1AppsAppIdDeleteValidateBeforeCall(@javax.annotation.Nonnull String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1AppsAppIdDelete(Async)");
        }

        return openapiV1AppsAppIdDeleteCall(appId, _callback);

    }

    /**
     * 删除应用
     * DELETE /openapi/v1/apps/{appId}
     * @param appId  (required)
     * @return OpenapiV1AppsGet401Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 应用删除成功 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足，需要超级管理员权限 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 应用不存在 </td><td>  -  </td></tr>
     </table>
     */
    public OpenapiV1AppsGet401Response openapiV1AppsAppIdDelete(@javax.annotation.Nonnull String appId) throws ApiException {
        ApiResponse<OpenapiV1AppsGet401Response> localVarResp = openapiV1AppsAppIdDeleteWithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 删除应用
     * DELETE /openapi/v1/apps/{appId}
     * @param appId  (required)
     * @return ApiResponse&lt;OpenapiV1AppsGet401Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 应用删除成功 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足，需要超级管理员权限 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 应用不存在 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenapiV1AppsGet401Response> openapiV1AppsAppIdDeleteWithHttpInfo(@javax.annotation.Nonnull String appId) throws ApiException {
        okhttp3.Call localVarCall = openapiV1AppsAppIdDeleteValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<OpenapiV1AppsGet401Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 删除应用 (asynchronously)
     * DELETE /openapi/v1/apps/{appId}
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 应用删除成功 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足，需要超级管理员权限 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 应用不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsAppIdDeleteAsync(@javax.annotation.Nonnull String appId, final ApiCallback<OpenapiV1AppsGet401Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1AppsAppIdDeleteValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<OpenapiV1AppsGet401Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1AppsAppIdEnvClustersGet
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用环境集群信息 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 应用不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsAppIdEnvClustersGetCall(@javax.annotation.Nonnull String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/apps/{appId}/env-clusters"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1AppsAppIdEnvClustersGetValidateBeforeCall(@javax.annotation.Nonnull String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1AppsAppIdEnvClustersGet(Async)");
        }

        return openapiV1AppsAppIdEnvClustersGetCall(appId, _callback);

    }

    /**
     * 获取应用的环境集群信息
     * GET /openapi/v1/apps/{appId}/env-clusters
     * @param appId  (required)
     * @return List&lt;OpenEnvClusterDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用环境集群信息 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 应用不存在 </td><td>  -  </td></tr>
     </table>
     */
    public List<OpenEnvClusterDTO> openapiV1AppsAppIdEnvClustersGet(@javax.annotation.Nonnull String appId) throws ApiException {
        ApiResponse<List<OpenEnvClusterDTO>> localVarResp = openapiV1AppsAppIdEnvClustersGetWithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 获取应用的环境集群信息
     * GET /openapi/v1/apps/{appId}/env-clusters
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;OpenEnvClusterDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用环境集群信息 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 应用不存在 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OpenEnvClusterDTO>> openapiV1AppsAppIdEnvClustersGetWithHttpInfo(@javax.annotation.Nonnull String appId) throws ApiException {
        okhttp3.Call localVarCall = openapiV1AppsAppIdEnvClustersGetValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<List<OpenEnvClusterDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取应用的环境集群信息 (asynchronously)
     * GET /openapi/v1/apps/{appId}/env-clusters
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用环境集群信息 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 应用不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsAppIdEnvClustersGetAsync(@javax.annotation.Nonnull String appId, final ApiCallback<List<OpenEnvClusterDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1AppsAppIdEnvClustersGetValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<List<OpenEnvClusterDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNameLinksDelete
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNameLinksDeleteCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/links"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNameLinksDeleteValidateBeforeCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNameLinksDelete(Async)");
        }

        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNameLinksDelete(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNameLinksDelete(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNameLinksDelete(Async)");
        }

        return openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNameLinksDeleteCall(appId, env, clusterName, namespaceName, _callback);

    }

    /**
     * 删除关联的Namespace
     * DELETE /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/links
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNameLinksDelete(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName) throws ApiException {
        ApiResponse<Object> localVarResp = openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNameLinksDeleteWithHttpInfo(appId, env, clusterName, namespaceName);
        return localVarResp.getData();
    }

    /**
     * 删除关联的Namespace
     * DELETE /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/links
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNameLinksDeleteWithHttpInfo(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName) throws ApiException {
        okhttp3.Call localVarCall = openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNameLinksDeleteValidateBeforeCall(appId, env, clusterName, namespaceName, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 删除关联的Namespace (asynchronously)
     * DELETE /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/links
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNameLinksDeleteAsync(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNameLinksDeleteValidateBeforeCall(appId, env, clusterName, namespaceName, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1AppsAppIdGet
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用信息 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 应用不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsAppIdGetCall(@javax.annotation.Nonnull String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/apps/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1AppsAppIdGetValidateBeforeCall(@javax.annotation.Nonnull String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1AppsAppIdGet(Async)");
        }

        return openapiV1AppsAppIdGetCall(appId, _callback);

    }

    /**
     * 获取单个应用信息
     * GET /openapi/v1/apps/{appId}
     * @param appId  (required)
     * @return OpenAppDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用信息 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 应用不存在 </td><td>  -  </td></tr>
     </table>
     */
    public OpenAppDTO openapiV1AppsAppIdGet(@javax.annotation.Nonnull String appId) throws ApiException {
        ApiResponse<OpenAppDTO> localVarResp = openapiV1AppsAppIdGetWithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 获取单个应用信息
     * GET /openapi/v1/apps/{appId}
     * @param appId  (required)
     * @return ApiResponse&lt;OpenAppDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用信息 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 应用不存在 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenAppDTO> openapiV1AppsAppIdGetWithHttpInfo(@javax.annotation.Nonnull String appId) throws ApiException {
        okhttp3.Call localVarCall = openapiV1AppsAppIdGetValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<OpenAppDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取单个应用信息 (asynchronously)
     * GET /openapi/v1/apps/{appId}
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用信息 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 应用不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsAppIdGetAsync(@javax.annotation.Nonnull String appId, final ApiCallback<OpenAppDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1AppsAppIdGetValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<OpenAppDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1AppsAppIdMissEnvsGet
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用缺失的环境列表 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 应用不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsAppIdMissEnvsGetCall(@javax.annotation.Nonnull String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/apps/{appId}/miss_envs"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1AppsAppIdMissEnvsGetValidateBeforeCall(@javax.annotation.Nonnull String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1AppsAppIdMissEnvsGet(Async)");
        }

        return openapiV1AppsAppIdMissEnvsGetCall(appId, _callback);

    }

    /**
     * 查找缺失的环境
     * GET /openapi/v1/apps/{appId}/miss_envs
     * @param appId  (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用缺失的环境列表 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 应用不存在 </td><td>  -  </td></tr>
     </table>
     */
    public List<String> openapiV1AppsAppIdMissEnvsGet(@javax.annotation.Nonnull String appId) throws ApiException {
        ApiResponse<List<String>> localVarResp = openapiV1AppsAppIdMissEnvsGetWithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 查找缺失的环境
     * GET /openapi/v1/apps/{appId}/miss_envs
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用缺失的环境列表 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 应用不存在 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> openapiV1AppsAppIdMissEnvsGetWithHttpInfo(@javax.annotation.Nonnull String appId) throws ApiException {
        okhttp3.Call localVarCall = openapiV1AppsAppIdMissEnvsGetValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 查找缺失的环境 (asynchronously)
     * GET /openapi/v1/apps/{appId}/miss_envs
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用缺失的环境列表 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 应用不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsAppIdMissEnvsGetAsync(@javax.annotation.Nonnull String appId, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1AppsAppIdMissEnvsGetValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1AppsAppIdNamespacesReleasesStatusGet
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsAppIdNamespacesReleasesStatusGetCall(@javax.annotation.Nonnull String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/apps/{appId}/namespaces/releases/status"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1AppsAppIdNamespacesReleasesStatusGetValidateBeforeCall(@javax.annotation.Nonnull String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1AppsAppIdNamespacesReleasesStatusGet(Async)");
        }

        return openapiV1AppsAppIdNamespacesReleasesStatusGetCall(appId, _callback);

    }

    /**
     * 获取应用下所有Namespace的发布状态
     * GET /openapi/v1/apps/{appId}/namespaces/releases/status
     * @param appId  (required)
     * @return Map&lt;String, Map&lt;String, Boolean&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Map<String, Boolean>> openapiV1AppsAppIdNamespacesReleasesStatusGet(@javax.annotation.Nonnull String appId) throws ApiException {
        ApiResponse<Map<String, Map<String, Boolean>>> localVarResp = openapiV1AppsAppIdNamespacesReleasesStatusGetWithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 获取应用下所有Namespace的发布状态
     * GET /openapi/v1/apps/{appId}/namespaces/releases/status
     * @param appId  (required)
     * @return ApiResponse&lt;Map&lt;String, Map&lt;String, Boolean&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Map<String, Boolean>>> openapiV1AppsAppIdNamespacesReleasesStatusGetWithHttpInfo(@javax.annotation.Nonnull String appId) throws ApiException {
        okhttp3.Call localVarCall = openapiV1AppsAppIdNamespacesReleasesStatusGetValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<Map<String, Map<String, Boolean>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取应用下所有Namespace的发布状态 (asynchronously)
     * GET /openapi/v1/apps/{appId}/namespaces/releases/status
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsAppIdNamespacesReleasesStatusGetAsync(@javax.annotation.Nonnull String appId, final ApiCallback<Map<String, Map<String, Boolean>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1AppsAppIdNamespacesReleasesStatusGetValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Map<String, Boolean>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1AppsAppIdNavtreeGet
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用导航树 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsAppIdNavtreeGetCall(@javax.annotation.Nonnull String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/apps/{appId}/navtree"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1AppsAppIdNavtreeGetValidateBeforeCall(@javax.annotation.Nonnull String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1AppsAppIdNavtreeGet(Async)");
        }

        return openapiV1AppsAppIdNavtreeGetCall(appId, _callback);

    }

    /**
     * 获取应用导航树
     * GET /openapi/v1/apps/{appId}/navtree
     * @param appId  (required)
     * @return List&lt;EnvClusterInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用导航树 </td><td>  -  </td></tr>
     </table>
     */
    public List<EnvClusterInfo> openapiV1AppsAppIdNavtreeGet(@javax.annotation.Nonnull String appId) throws ApiException {
        ApiResponse<List<EnvClusterInfo>> localVarResp = openapiV1AppsAppIdNavtreeGetWithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 获取应用导航树
     * GET /openapi/v1/apps/{appId}/navtree
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;EnvClusterInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用导航树 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EnvClusterInfo>> openapiV1AppsAppIdNavtreeGetWithHttpInfo(@javax.annotation.Nonnull String appId) throws ApiException {
        okhttp3.Call localVarCall = openapiV1AppsAppIdNavtreeGetValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<List<EnvClusterInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取应用导航树 (asynchronously)
     * GET /openapi/v1/apps/{appId}/navtree
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取应用导航树 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsAppIdNavtreeGetAsync(@javax.annotation.Nonnull String appId, final ApiCallback<List<EnvClusterInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1AppsAppIdNavtreeGetValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<List<EnvClusterInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1AppsAppIdPut
     * @param appId  (required)
     * @param openAppDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsAppIdPutCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull OpenAppDTO openAppDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = openAppDTO;

        // create path and map variables
        String localVarPath = "/openapi/v1/apps/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1AppsAppIdPutValidateBeforeCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull OpenAppDTO openAppDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1AppsAppIdPut(Async)");
        }

        // verify the required parameter 'openAppDTO' is set
        if (openAppDTO == null) {
            throw new ApiException("Missing the required parameter 'openAppDTO' when calling openapiV1AppsAppIdPut(Async)");
        }

        return openapiV1AppsAppIdPutCall(appId, openAppDTO, _callback);

    }

    /**
     * 更新应用
     * PUT /openapi/v1/apps/{appId}
     * @param appId  (required)
     * @param openAppDTO  (required)
     * @return OpenAppDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public OpenAppDTO openapiV1AppsAppIdPut(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull OpenAppDTO openAppDTO) throws ApiException {
        ApiResponse<OpenAppDTO> localVarResp = openapiV1AppsAppIdPutWithHttpInfo(appId, openAppDTO);
        return localVarResp.getData();
    }

    /**
     * 更新应用
     * PUT /openapi/v1/apps/{appId}
     * @param appId  (required)
     * @param openAppDTO  (required)
     * @return ApiResponse&lt;OpenAppDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenAppDTO> openapiV1AppsAppIdPutWithHttpInfo(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull OpenAppDTO openAppDTO) throws ApiException {
        okhttp3.Call localVarCall = openapiV1AppsAppIdPutValidateBeforeCall(appId, openAppDTO, null);
        Type localVarReturnType = new TypeToken<OpenAppDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 更新应用 (asynchronously)
     * PUT /openapi/v1/apps/{appId}
     * @param appId  (required)
     * @param openAppDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsAppIdPutAsync(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull OpenAppDTO openAppDTO, final ApiCallback<OpenAppDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1AppsAppIdPutValidateBeforeCall(appId, openAppDTO, _callback);
        Type localVarReturnType = new TypeToken<OpenAppDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1AppsBySelfGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取Consumer的应用列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权访问 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsBySelfGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/apps/by-self";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1AppsBySelfGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return openapiV1AppsBySelfGetCall(_callback);

    }

    /**
     * 获取当前Consumer的应用列表（分页）
     * GET /openapi/v1/apps/by-self
     * @return List&lt;OpenAppDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取Consumer的应用列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权访问 </td><td>  -  </td></tr>
     </table>
     */
    public List<OpenAppDTO> openapiV1AppsBySelfGet() throws ApiException {
        ApiResponse<List<OpenAppDTO>> localVarResp = openapiV1AppsBySelfGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 获取当前Consumer的应用列表（分页）
     * GET /openapi/v1/apps/by-self
     * @return ApiResponse&lt;List&lt;OpenAppDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取Consumer的应用列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权访问 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OpenAppDTO>> openapiV1AppsBySelfGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = openapiV1AppsBySelfGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<OpenAppDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取当前Consumer的应用列表（分页） (asynchronously)
     * GET /openapi/v1/apps/by-self
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取Consumer的应用列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权访问 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsBySelfGetAsync(final ApiCallback<List<OpenAppDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1AppsBySelfGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<OpenAppDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1AppsEnvsEnvPost
     * @param env  (required)
     * @param openAppDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 应用在指定环境创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsEnvsEnvPostCall(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull OpenAppDTO openAppDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = openAppDTO;

        // create path and map variables
        String localVarPath = "/openapi/v1/apps/envs/{env}"
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1AppsEnvsEnvPostValidateBeforeCall(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull OpenAppDTO openAppDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1AppsEnvsEnvPost(Async)");
        }

        // verify the required parameter 'openAppDTO' is set
        if (openAppDTO == null) {
            throw new ApiException("Missing the required parameter 'openAppDTO' when calling openapiV1AppsEnvsEnvPost(Async)");
        }

        return openapiV1AppsEnvsEnvPostCall(env, openAppDTO, _callback);

    }

    /**
     * 在指定环境创建应用
     * POST /openapi/v1/apps/envs/{env}
     * @param env  (required)
     * @param openAppDTO  (required)
     * @return OpenapiV1AppsGet401Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 应用在指定环境创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public OpenapiV1AppsGet401Response openapiV1AppsEnvsEnvPost(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull OpenAppDTO openAppDTO) throws ApiException {
        ApiResponse<OpenapiV1AppsGet401Response> localVarResp = openapiV1AppsEnvsEnvPostWithHttpInfo(env, openAppDTO);
        return localVarResp.getData();
    }

    /**
     * 在指定环境创建应用
     * POST /openapi/v1/apps/envs/{env}
     * @param env  (required)
     * @param openAppDTO  (required)
     * @return ApiResponse&lt;OpenapiV1AppsGet401Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 应用在指定环境创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenapiV1AppsGet401Response> openapiV1AppsEnvsEnvPostWithHttpInfo(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull OpenAppDTO openAppDTO) throws ApiException {
        okhttp3.Call localVarCall = openapiV1AppsEnvsEnvPostValidateBeforeCall(env, openAppDTO, null);
        Type localVarReturnType = new TypeToken<OpenapiV1AppsGet401Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 在指定环境创建应用 (asynchronously)
     * POST /openapi/v1/apps/envs/{env}
     * @param env  (required)
     * @param openAppDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 应用在指定环境创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsEnvsEnvPostAsync(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull OpenAppDTO openAppDTO, final ApiCallback<OpenapiV1AppsGet401Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1AppsEnvsEnvPostValidateBeforeCall(env, openAppDTO, _callback);
        Type localVarReturnType = new TypeToken<OpenapiV1AppsGet401Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1AppsGet
     * @param authorized 是否只返回授权的应用 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取授权应用列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权访问 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsGetCall(@javax.annotation.Nullable String authorized, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/apps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorized != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("authorized", authorized));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1AppsGetValidateBeforeCall(@javax.annotation.Nullable String authorized, final ApiCallback _callback) throws ApiException {
        return openapiV1AppsGetCall(authorized, _callback);

    }

    /**
     * 获取当前Consumer授权的应用列表
     * GET /openapi/v1/apps?authorized&#x3D;true
     * @param authorized 是否只返回授权的应用 (optional)
     * @return List&lt;OpenAppDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取授权应用列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权访问 </td><td>  -  </td></tr>
     </table>
     */
    public List<OpenAppDTO> openapiV1AppsGet(@javax.annotation.Nullable String authorized) throws ApiException {
        ApiResponse<List<OpenAppDTO>> localVarResp = openapiV1AppsGetWithHttpInfo(authorized);
        return localVarResp.getData();
    }

    /**
     * 获取当前Consumer授权的应用列表
     * GET /openapi/v1/apps?authorized&#x3D;true
     * @param authorized 是否只返回授权的应用 (optional)
     * @return ApiResponse&lt;List&lt;OpenAppDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取授权应用列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权访问 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OpenAppDTO>> openapiV1AppsGetWithHttpInfo(@javax.annotation.Nullable String authorized) throws ApiException {
        okhttp3.Call localVarCall = openapiV1AppsGetValidateBeforeCall(authorized, null);
        Type localVarReturnType = new TypeToken<List<OpenAppDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取当前Consumer授权的应用列表 (asynchronously)
     * GET /openapi/v1/apps?authorized&#x3D;true
     * @param authorized 是否只返回授权的应用 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取授权应用列表 </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 未授权访问 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsGetAsync(@javax.annotation.Nullable String authorized, final ApiCallback<List<OpenAppDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1AppsGetValidateBeforeCall(authorized, _callback);
        Type localVarReturnType = new TypeToken<List<OpenAppDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1AppsPost
     * @param openapiV1AppsPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 应用创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsPostCall(@javax.annotation.Nonnull OpenapiV1AppsPostRequest openapiV1AppsPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = openapiV1AppsPostRequest;

        // create path and map variables
        String localVarPath = "/openapi/v1/apps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1AppsPostValidateBeforeCall(@javax.annotation.Nonnull OpenapiV1AppsPostRequest openapiV1AppsPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'openapiV1AppsPostRequest' is set
        if (openapiV1AppsPostRequest == null) {
            throw new ApiException("Missing the required parameter 'openapiV1AppsPostRequest' when calling openapiV1AppsPost(Async)");
        }

        return openapiV1AppsPostCall(openapiV1AppsPostRequest, _callback);

    }

    /**
     * 创建应用
     * POST /openapi/v1/apps
     * @param openapiV1AppsPostRequest  (required)
     * @return OpenAppDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 应用创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public OpenAppDTO openapiV1AppsPost(@javax.annotation.Nonnull OpenapiV1AppsPostRequest openapiV1AppsPostRequest) throws ApiException {
        ApiResponse<OpenAppDTO> localVarResp = openapiV1AppsPostWithHttpInfo(openapiV1AppsPostRequest);
        return localVarResp.getData();
    }

    /**
     * 创建应用
     * POST /openapi/v1/apps
     * @param openapiV1AppsPostRequest  (required)
     * @return ApiResponse&lt;OpenAppDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 应用创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenAppDTO> openapiV1AppsPostWithHttpInfo(@javax.annotation.Nonnull OpenapiV1AppsPostRequest openapiV1AppsPostRequest) throws ApiException {
        okhttp3.Call localVarCall = openapiV1AppsPostValidateBeforeCall(openapiV1AppsPostRequest, null);
        Type localVarReturnType = new TypeToken<OpenAppDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 创建应用 (asynchronously)
     * POST /openapi/v1/apps
     * @param openapiV1AppsPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 应用创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsPostAsync(@javax.annotation.Nonnull OpenapiV1AppsPostRequest openapiV1AppsPostRequest, final ApiCallback<OpenAppDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1AppsPostValidateBeforeCall(openapiV1AppsPostRequest, _callback);
        Type localVarReturnType = new TypeToken<OpenAppDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
