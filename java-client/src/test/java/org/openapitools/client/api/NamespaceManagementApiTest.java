/*
 * Apollo OpenAPI
 * Apollo配置中心OpenAPI接口文档  ## 认证方式  所有API接口都需要通过Authorization header进行身份验证。  ### 获取Token的方式：  1. **Portal管理界面获取**：    - 登录Apollo Portal管理界面    - 进入\"管理员工具\" -> \"开放平台授权管理\"    - 创建第三方应用，获取Token  2. **Token格式**：    ```    Authorization: token_value    ```  3. **Token权限**：    - Token具有对应应用的读写权限    - 不同Token可能有不同的环境和命名空间权限    - 建议为不同用途创建不同的Token  ### 使用示例： ```bash curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\      -H \"Authorization: your_token_here\" ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.OpenAppNamespaceDTO;
import org.openapitools.client.model.OpenNamespaceDTO;
import org.openapitools.client.model.OpenNamespaceLockDTO;
import org.openapitools.client.model.OpenapiV1AppsGet401Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NamespaceManagementApi
 */
@Disabled
public class NamespaceManagementApiTest {

    private final NamespaceManagementApi api = new NamespaceManagementApi();

    /**
     * 获取所有公共AppNamespace
     *
     * GET /openapi/v1/appnamespaces?public&#x3D;true
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1AppnamespacesGetTest() throws ApiException {
        Boolean publicOnly = null;
        List<OpenAppNamespaceDTO> response = api.openapiV1AppnamespacesGet(publicOnly);
        // TODO: test validations
    }

    /**
     * 获取指定应用的AppNamespace
     *
     * GET /openapi/v1/apps/{appId}/appnamespaces
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1AppsAppIdAppnamespacesGetTest() throws ApiException {
        String appId = null;
        List<OpenAppNamespaceDTO> response = api.openapiV1AppsAppIdAppnamespacesGet(appId);
        // TODO: test validations
    }

    /**
     * 获取指定的AppNamespace
     *
     * GET /openapi/v1/apps/{appId}/appnamespaces/{namespaceName}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1AppsAppIdAppnamespacesNamespaceNameGetTest() throws ApiException {
        String appId = null;
        String namespaceName = null;
        OpenAppNamespaceDTO response = api.openapiV1AppsAppIdAppnamespacesNamespaceNameGet(appId, namespaceName);
        // TODO: test validations
    }

    /**
     * 创建AppNamespace
     *
     * POST /openapi/v1/apps/{appId}/appnamespaces
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1AppsAppIdAppnamespacesPostTest() throws ApiException {
        String appId = null;
        OpenAppNamespaceDTO openAppNamespaceDTO = null;
        OpenAppNamespaceDTO response = api.openapiV1AppsAppIdAppnamespacesPost(appId, openAppNamespaceDTO);
        // TODO: test validations
    }

    /**
     * 检查缺失的Namespace
     *
     * GET /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/integrity-check
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesIntegrityCheckGetTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        List<String> response = api.openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesIntegrityCheckGet(appId, env, clusterName);
        // TODO: test validations
    }

    /**
     * 获取关联的公共Namespace
     *
     * GET /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/public-association
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNamePublicAssociationGetTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        OpenNamespaceDTO response = api.openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNamePublicAssociationGet(appId, env, clusterName, namespaceName);
        // TODO: test validations
    }

    /**
     * 获取公共AppNamespace的所有实例
     *
     * GET /openapi/v1/envs/{env}/appnamespaces/{publicNamespaceName}/instances
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1EnvsEnvAppnamespacesPublicNamespaceNameInstancesGetTest() throws ApiException {
        String env = null;
        String publicNamespaceName = null;
        Integer page = null;
        Integer size = null;
        List<OpenNamespaceDTO> response = api.openapiV1EnvsEnvAppnamespacesPublicNamespaceNameInstancesGet(env, publicNamespaceName, page, size);
        // TODO: test validations
    }

    /**
     * 获取指定集群下的所有Namespace
     *
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesGetTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        Boolean fillItemDetail = null;
        List<OpenNamespaceDTO> response = api.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesGet(appId, env, clusterName, fillItemDetail);
        // TODO: test validations
    }

    /**
     * 获取Namespace的锁状态
     *
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/lock
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameLockGetTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        OpenNamespaceLockDTO response = api.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameLockGet(appId, env, clusterName, namespaceName);
        // TODO: test validations
    }

}
