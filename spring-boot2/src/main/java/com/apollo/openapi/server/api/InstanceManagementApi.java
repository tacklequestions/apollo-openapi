/*
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.15.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.apollo.openapi.server.api;

import com.apollo.openapi.server.model.OpenInstanceDTO;
import com.apollo.openapi.server.model.OpenPageDTOOpenInstanceDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-09-14T15:38:43.825630+08:00[Asia/Shanghai]", comments = "Generator version: 7.15.0")
@Validated
@Tag(name = "Instance Management", description = "实例管理相关接口，包括实例查询、配置生效状态等功能")
public interface InstanceManagementApi {

    default InstanceManagementApiDelegate getDelegate() {
        return new InstanceManagementApiDelegate() {};
    }

    public static final String PATH_OPENAPI_V1_APPS_APP_ID_CLUSTERS_CLUSTER_NAME_NAMESPACES_NAMESPACE_NAME_INSTANCES_GET = "/openapi/v1/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/instances";
    /**
     * GET /openapi/v1/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/instances : 获取命名空间下的实例数量
     * GET /openapi/v1/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/instances
     *
     * @param appId  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @return  (status code 200)
     */
    @Operation(
        operationId = "openapiV1AppsAppIdClustersClusterNameNamespacesNamespaceNameInstancesGet",
        summary = "获取命名空间下的实例数量",
        description = "GET /openapi/v1/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/instances",
        tags = { "Instance Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Integer.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = InstanceManagementApi.PATH_OPENAPI_V1_APPS_APP_ID_CLUSTERS_CLUSTER_NAME_NAMESPACES_NAMESPACE_NAME_INSTANCES_GET,
        produces = { "application/json" }
    )
    
    default ResponseEntity<Integer> openapiV1AppsAppIdClustersClusterNameNamespacesNamespaceNameInstancesGet(
        @Parameter(name = "appId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId,
        @Parameter(name = "clusterName", description = "", required = true, in = ParameterIn.PATH) @PathVariable("clusterName") String clusterName,
        @Parameter(name = "namespaceName", description = "", required = true, in = ParameterIn.PATH) @PathVariable("namespaceName") String namespaceName
    ) {
        return getDelegate().openapiV1AppsAppIdClustersClusterNameNamespacesNamespaceNameInstancesGet(appId, clusterName, namespaceName);
    }


    public static final String PATH_OPENAPI_V1_ENVS_ENV_APPS_APP_ID_CLUSTERS_CLUSTER_NAME_NAMESPACES_NAMESPACE_NAME_INSTANCES_GET = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/instances";
    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/instances : 查询不在指定发布版本中的实例
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/instances?excludeReleases&#x3D;1,2,3
     *
     * @param env  (required)
     * @param appId  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param excludeReleases 排除的发布ID列表，用逗号分隔 (optional)
     * @return  (status code 200)
     */
    @Operation(
        operationId = "openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameInstancesGet",
        summary = "查询不在指定发布版本中的实例",
        description = "GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/instances?excludeReleases=1,2,3",
        tags = { "Instance Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OpenInstanceDTO.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = InstanceManagementApi.PATH_OPENAPI_V1_ENVS_ENV_APPS_APP_ID_CLUSTERS_CLUSTER_NAME_NAMESPACES_NAMESPACE_NAME_INSTANCES_GET,
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<OpenInstanceDTO>> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameInstancesGet(
        @Parameter(name = "env", description = "", required = true, in = ParameterIn.PATH) @PathVariable("env") String env,
        @Parameter(name = "appId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("appId") String appId,
        @Parameter(name = "clusterName", description = "", required = true, in = ParameterIn.PATH) @PathVariable("clusterName") String clusterName,
        @Parameter(name = "namespaceName", description = "", required = true, in = ParameterIn.PATH) @PathVariable("namespaceName") String namespaceName,
        @Parameter(name = "excludeReleases", description = "排除的发布ID列表，用逗号分隔", in = ParameterIn.QUERY) @Valid @RequestParam(value = "excludeReleases", required = false) @Nullable String excludeReleases
    ) {
        return getDelegate().openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameInstancesGet(env, appId, clusterName, namespaceName, excludeReleases);
    }


    public static final String PATH_OPENAPI_V1_ENVS_ENV_RELEASES_RELEASE_ID_INSTANCES_GET = "/openapi/v1/envs/{env}/releases/{releaseId}/instances";
    /**
     * GET /openapi/v1/envs/{env}/releases/{releaseId}/instances : 根据发布版本查询实例（支持分页）
     * GET /openapi/v1/envs/{env}/releases/{releaseId}/instances
     *
     * @param env  (required)
     * @param releaseId  (required)
     * @param page  (required)
     * @param size  (required)
     * @return  (status code 200)
     */
    @Operation(
        operationId = "openapiV1EnvsEnvReleasesReleaseIdInstancesGet",
        summary = "根据发布版本查询实例（支持分页）",
        description = "GET /openapi/v1/envs/{env}/releases/{releaseId}/instances",
        tags = { "Instance Management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OpenPageDTOOpenInstanceDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = InstanceManagementApi.PATH_OPENAPI_V1_ENVS_ENV_RELEASES_RELEASE_ID_INSTANCES_GET,
        produces = { "application/json" }
    )
    
    default ResponseEntity<OpenPageDTOOpenInstanceDTO> openapiV1EnvsEnvReleasesReleaseIdInstancesGet(
        @Parameter(name = "env", description = "", required = true, in = ParameterIn.PATH) @PathVariable("env") String env,
        @Parameter(name = "releaseId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("releaseId") Integer releaseId,
        @NotNull @Parameter(name = "page", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = true) Integer page,
        @NotNull @Parameter(name = "size", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = true) Integer size
    ) {
        return getDelegate().openapiV1EnvsEnvReleasesReleaseIdInstancesGet(env, releaseId, page, size);
    }

}
