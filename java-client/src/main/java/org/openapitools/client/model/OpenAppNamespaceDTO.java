/*
 * Apollo OpenAPI
 * Apollo配置中心OpenAPI接口文档  ## 认证方式  所有API接口都需要通过Authorization header进行身份验证。  ### 获取Token的方式：  1. **Portal管理界面获取**：    - 登录Apollo Portal管理界面    - 进入\"管理员工具\" -> \"开放平台授权管理\"    - 创建第三方应用，获取Token  2. **Token格式**：    ```    Authorization: token_value    ```  3. **Token权限**：    - Token具有对应应用的读写权限    - 不同Token可能有不同的环境和命名空间权限    - 建议为不同用途创建不同的Token  ### 使用示例： ```bash curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\      -H \"Authorization: your_token_here\" ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Apollo应用命名空间数据传输对象，表示应用级别的命名空间配置信息
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-14T16:50:03.362525+08:00[Asia/Shanghai]", comments = "Generator version: 7.15.0")
public class OpenAppNamespaceDTO {
  public static final String SERIALIZED_NAME_DATA_CHANGE_CREATED_BY = "dataChangeCreatedBy";
  @SerializedName(SERIALIZED_NAME_DATA_CHANGE_CREATED_BY)
  @javax.annotation.Nullable
  private String dataChangeCreatedBy;

  public static final String SERIALIZED_NAME_DATA_CHANGE_LAST_MODIFIED_BY = "dataChangeLastModifiedBy";
  @SerializedName(SERIALIZED_NAME_DATA_CHANGE_LAST_MODIFIED_BY)
  @javax.annotation.Nullable
  private String dataChangeLastModifiedBy;

  public static final String SERIALIZED_NAME_DATA_CHANGE_CREATED_TIME = "dataChangeCreatedTime";
  @SerializedName(SERIALIZED_NAME_DATA_CHANGE_CREATED_TIME)
  @javax.annotation.Nullable
  private String dataChangeCreatedTime;

  public static final String SERIALIZED_NAME_DATA_CHANGE_LAST_MODIFIED_TIME = "dataChangeLastModifiedTime";
  @SerializedName(SERIALIZED_NAME_DATA_CHANGE_LAST_MODIFIED_TIME)
  @javax.annotation.Nullable
  private String dataChangeLastModifiedTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_APP_ID = "appId";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  @javax.annotation.Nullable
  private String appId;

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  @javax.annotation.Nullable
  private String format;

  public static final String SERIALIZED_NAME_IS_PUBLIC = "isPublic";
  @SerializedName(SERIALIZED_NAME_IS_PUBLIC)
  @javax.annotation.Nullable
  private Boolean isPublic;

  public static final String SERIALIZED_NAME_APPEND_NAMESPACE_PREFIX = "appendNamespacePrefix";
  @SerializedName(SERIALIZED_NAME_APPEND_NAMESPACE_PREFIX)
  @javax.annotation.Nullable
  private Boolean appendNamespacePrefix = true;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public OpenAppNamespaceDTO() {
  }

  public OpenAppNamespaceDTO dataChangeCreatedBy(@javax.annotation.Nullable String dataChangeCreatedBy) {
    this.dataChangeCreatedBy = dataChangeCreatedBy;
    return this;
  }

  /**
   * 命名空间创建者用户名，记录是谁创建了这个应用命名空间
   * @return dataChangeCreatedBy
   */
  @javax.annotation.Nullable
  public String getDataChangeCreatedBy() {
    return dataChangeCreatedBy;
  }

  public void setDataChangeCreatedBy(@javax.annotation.Nullable String dataChangeCreatedBy) {
    this.dataChangeCreatedBy = dataChangeCreatedBy;
  }


  public OpenAppNamespaceDTO dataChangeLastModifiedBy(@javax.annotation.Nullable String dataChangeLastModifiedBy) {
    this.dataChangeLastModifiedBy = dataChangeLastModifiedBy;
    return this;
  }

  /**
   * 命名空间最后修改者用户名，记录最后一次修改命名空间信息的用户
   * @return dataChangeLastModifiedBy
   */
  @javax.annotation.Nullable
  public String getDataChangeLastModifiedBy() {
    return dataChangeLastModifiedBy;
  }

  public void setDataChangeLastModifiedBy(@javax.annotation.Nullable String dataChangeLastModifiedBy) {
    this.dataChangeLastModifiedBy = dataChangeLastModifiedBy;
  }


  public OpenAppNamespaceDTO dataChangeCreatedTime(@javax.annotation.Nullable String dataChangeCreatedTime) {
    this.dataChangeCreatedTime = dataChangeCreatedTime;
    return this;
  }

  /**
   * 命名空间创建时间，ISO 8601格式的时间戳
   * @return dataChangeCreatedTime
   */
  @javax.annotation.Nullable
  public String getDataChangeCreatedTime() {
    return dataChangeCreatedTime;
  }

  public void setDataChangeCreatedTime(@javax.annotation.Nullable String dataChangeCreatedTime) {
    this.dataChangeCreatedTime = dataChangeCreatedTime;
  }


  public OpenAppNamespaceDTO dataChangeLastModifiedTime(@javax.annotation.Nullable String dataChangeLastModifiedTime) {
    this.dataChangeLastModifiedTime = dataChangeLastModifiedTime;
    return this;
  }

  /**
   * 命名空间最后修改时间，ISO 8601格式的时间戳
   * @return dataChangeLastModifiedTime
   */
  @javax.annotation.Nullable
  public String getDataChangeLastModifiedTime() {
    return dataChangeLastModifiedTime;
  }

  public void setDataChangeLastModifiedTime(@javax.annotation.Nullable String dataChangeLastModifiedTime) {
    this.dataChangeLastModifiedTime = dataChangeLastModifiedTime;
  }


  public OpenAppNamespaceDTO name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * 命名空间名称，在同一应用内唯一标识一个命名空间
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public OpenAppNamespaceDTO appId(@javax.annotation.Nullable String appId) {
    this.appId = appId;
    return this;
  }

  /**
   * 所属应用的唯一标识符
   * @return appId
   */
  @javax.annotation.Nullable
  public String getAppId() {
    return appId;
  }

  public void setAppId(@javax.annotation.Nullable String appId) {
    this.appId = appId;
  }


  public OpenAppNamespaceDTO format(@javax.annotation.Nullable String format) {
    this.format = format;
    return this;
  }

  /**
   * 命名空间格式类型，如properties、xml、json、yml等
   * @return format
   */
  @javax.annotation.Nullable
  public String getFormat() {
    return format;
  }

  public void setFormat(@javax.annotation.Nullable String format) {
    this.format = format;
  }


  public OpenAppNamespaceDTO isPublic(@javax.annotation.Nullable Boolean isPublic) {
    this.isPublic = isPublic;
    return this;
  }

  /**
   * 是否为公共命名空间，公共命名空间可以被其他应用关联使用
   * @return isPublic
   */
  @javax.annotation.Nullable
  public Boolean getIsPublic() {
    return isPublic;
  }

  public void setIsPublic(@javax.annotation.Nullable Boolean isPublic) {
    this.isPublic = isPublic;
  }


  public OpenAppNamespaceDTO appendNamespacePrefix(@javax.annotation.Nullable Boolean appendNamespacePrefix) {
    this.appendNamespacePrefix = appendNamespacePrefix;
    return this;
  }

  /**
   * 对于公共命名空间，是否在命名空间名称前添加前缀
   * @return appendNamespacePrefix
   */
  @javax.annotation.Nullable
  public Boolean getAppendNamespacePrefix() {
    return appendNamespacePrefix;
  }

  public void setAppendNamespacePrefix(@javax.annotation.Nullable Boolean appendNamespacePrefix) {
    this.appendNamespacePrefix = appendNamespacePrefix;
  }


  public OpenAppNamespaceDTO comment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * 命名空间备注说明，描述命名空间的用途和包含的配置类型
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OpenAppNamespaceDTO openAppNamespaceDTO = (OpenAppNamespaceDTO) o;
    return Objects.equals(this.dataChangeCreatedBy, openAppNamespaceDTO.dataChangeCreatedBy) &&
        Objects.equals(this.dataChangeLastModifiedBy, openAppNamespaceDTO.dataChangeLastModifiedBy) &&
        Objects.equals(this.dataChangeCreatedTime, openAppNamespaceDTO.dataChangeCreatedTime) &&
        Objects.equals(this.dataChangeLastModifiedTime, openAppNamespaceDTO.dataChangeLastModifiedTime) &&
        Objects.equals(this.name, openAppNamespaceDTO.name) &&
        Objects.equals(this.appId, openAppNamespaceDTO.appId) &&
        Objects.equals(this.format, openAppNamespaceDTO.format) &&
        Objects.equals(this.isPublic, openAppNamespaceDTO.isPublic) &&
        Objects.equals(this.appendNamespacePrefix, openAppNamespaceDTO.appendNamespacePrefix) &&
        Objects.equals(this.comment, openAppNamespaceDTO.comment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataChangeCreatedBy, dataChangeLastModifiedBy, dataChangeCreatedTime, dataChangeLastModifiedTime, name, appId, format, isPublic, appendNamespacePrefix, comment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OpenAppNamespaceDTO {\n");
    sb.append("    dataChangeCreatedBy: ").append(toIndentedString(dataChangeCreatedBy)).append("\n");
    sb.append("    dataChangeLastModifiedBy: ").append(toIndentedString(dataChangeLastModifiedBy)).append("\n");
    sb.append("    dataChangeCreatedTime: ").append(toIndentedString(dataChangeCreatedTime)).append("\n");
    sb.append("    dataChangeLastModifiedTime: ").append(toIndentedString(dataChangeLastModifiedTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    isPublic: ").append(toIndentedString(isPublic)).append("\n");
    sb.append("    appendNamespacePrefix: ").append(toIndentedString(appendNamespacePrefix)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("dataChangeCreatedBy", "dataChangeLastModifiedBy", "dataChangeCreatedTime", "dataChangeLastModifiedTime", "name", "appId", "format", "isPublic", "appendNamespacePrefix", "comment"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OpenAppNamespaceDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OpenAppNamespaceDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OpenAppNamespaceDTO is not found in the empty JSON string", OpenAppNamespaceDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OpenAppNamespaceDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OpenAppNamespaceDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataChangeCreatedBy") != null && !jsonObj.get("dataChangeCreatedBy").isJsonNull()) && !jsonObj.get("dataChangeCreatedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataChangeCreatedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataChangeCreatedBy").toString()));
      }
      if ((jsonObj.get("dataChangeLastModifiedBy") != null && !jsonObj.get("dataChangeLastModifiedBy").isJsonNull()) && !jsonObj.get("dataChangeLastModifiedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataChangeLastModifiedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataChangeLastModifiedBy").toString()));
      }
      if ((jsonObj.get("dataChangeCreatedTime") != null && !jsonObj.get("dataChangeCreatedTime").isJsonNull()) && !jsonObj.get("dataChangeCreatedTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataChangeCreatedTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataChangeCreatedTime").toString()));
      }
      if ((jsonObj.get("dataChangeLastModifiedTime") != null && !jsonObj.get("dataChangeLastModifiedTime").isJsonNull()) && !jsonObj.get("dataChangeLastModifiedTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataChangeLastModifiedTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataChangeLastModifiedTime").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("appId") != null && !jsonObj.get("appId").isJsonNull()) && !jsonObj.get("appId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appId").toString()));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OpenAppNamespaceDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OpenAppNamespaceDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OpenAppNamespaceDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OpenAppNamespaceDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<OpenAppNamespaceDTO>() {
           @Override
           public void write(JsonWriter out, OpenAppNamespaceDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OpenAppNamespaceDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OpenAppNamespaceDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OpenAppNamespaceDTO
   * @throws IOException if the JSON string is invalid with respect to OpenAppNamespaceDTO
   */
  public static OpenAppNamespaceDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OpenAppNamespaceDTO.class);
  }

  /**
   * Convert an instance of OpenAppNamespaceDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

