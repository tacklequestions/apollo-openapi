/* tslint:disable */
/* eslint-disable */
/**
 * Apollo OpenAPI
 * Apollo配置中心OpenAPI接口文档  ## 认证方式  所有API接口都需要通过Authorization header进行身份验证。  ### 获取Token的方式：  1. **Portal管理界面获取**：    - 登录Apollo Portal管理界面    - 进入\"管理员工具\" -> \"开放平台授权管理\"    - 创建第三方应用，获取Token  2. **Token格式**：    ```    Authorization: token_value    ```  3. **Token权限**：    - Token具有对应应用的读写权限    - 不同Token可能有不同的环境和命名空间权限    - 建议为不同用途创建不同的Token  ### 使用示例： ```bash curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\      -H \"Authorization: your_token_here\" ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ListReleaseBO,
  NamespaceReleaseDTO,
  OpenReleaseDTO,
  OpenapiV1AppsGet401Response,
  OpenapiV1EnvsEnvReleasesCompareGet200Response,
} from '../models/index';
import {
    ListReleaseBOFromJSON,
    ListReleaseBOToJSON,
    NamespaceReleaseDTOFromJSON,
    NamespaceReleaseDTOToJSON,
    OpenReleaseDTOFromJSON,
    OpenReleaseDTOToJSON,
    OpenapiV1AppsGet401ResponseFromJSON,
    OpenapiV1AppsGet401ResponseToJSON,
    OpenapiV1EnvsEnvReleasesCompareGet200ResponseFromJSON,
    OpenapiV1EnvsEnvReleasesCompareGet200ResponseToJSON,
} from '../models/index';

export interface OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesActiveGetRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    page: number;
    size: number;
}

export interface OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesAllGetRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    page: number;
    size: number;
}

export interface OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesLatestGetRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
}

export interface OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesPostRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    namespaceReleaseDTO: NamespaceReleaseDTO;
}

export interface OpenapiV1EnvsEnvReleasesCompareGetRequest {
    env: string;
    baseReleaseId: number;
    toCompareReleaseId: number;
}

export interface OpenapiV1EnvsEnvReleasesReleaseIdGetRequest {
    env: string;
    releaseId: number;
}

export interface OpenapiV1EnvsEnvReleasesReleaseIdRollbackPutRequest {
    env: string;
    releaseId: number;
    operator: string;
}

/**
 * 
 */
export class ReleaseManagementApi extends runtime.BaseAPI {

    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases/active
     * 获取活跃发布（分页）
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesActiveGetRaw(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesActiveGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OpenReleaseDTO>>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesActiveGet().'
            );
        }

        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesActiveGet().'
            );
        }

        if (requestParameters['clusterName'] == null) {
            throw new runtime.RequiredError(
                'clusterName',
                'Required parameter "clusterName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesActiveGet().'
            );
        }

        if (requestParameters['namespaceName'] == null) {
            throw new runtime.RequiredError(
                'namespaceName',
                'Required parameter "namespaceName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesActiveGet().'
            );
        }

        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesActiveGet().'
            );
        }

        if (requestParameters['size'] == null) {
            throw new runtime.RequiredError(
                'size',
                'Required parameter "size" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesActiveGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases/active`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters['clusterName'])));
        urlPath = urlPath.replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters['namespaceName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OpenReleaseDTOFromJSON));
    }

    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases/active
     * 获取活跃发布（分页）
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesActiveGet(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesActiveGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OpenReleaseDTO>> {
        const response = await this.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesActiveGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases/all
     * 获取所有发布（分页）
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesAllGetRaw(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesAllGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ListReleaseBO>>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesAllGet().'
            );
        }

        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesAllGet().'
            );
        }

        if (requestParameters['clusterName'] == null) {
            throw new runtime.RequiredError(
                'clusterName',
                'Required parameter "clusterName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesAllGet().'
            );
        }

        if (requestParameters['namespaceName'] == null) {
            throw new runtime.RequiredError(
                'namespaceName',
                'Required parameter "namespaceName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesAllGet().'
            );
        }

        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesAllGet().'
            );
        }

        if (requestParameters['size'] == null) {
            throw new runtime.RequiredError(
                'size',
                'Required parameter "size" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesAllGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases/all`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters['clusterName'])));
        urlPath = urlPath.replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters['namespaceName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ListReleaseBOFromJSON));
    }

    /**
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases/all
     * 获取所有发布（分页）
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesAllGet(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesAllGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ListReleaseBO>> {
        const response = await this.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesAllGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 获取最新活跃发布
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesLatestGetRaw(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesLatestGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenReleaseDTO>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesLatestGet().'
            );
        }

        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesLatestGet().'
            );
        }

        if (requestParameters['clusterName'] == null) {
            throw new runtime.RequiredError(
                'clusterName',
                'Required parameter "clusterName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesLatestGet().'
            );
        }

        if (requestParameters['namespaceName'] == null) {
            throw new runtime.RequiredError(
                'namespaceName',
                'Required parameter "namespaceName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesLatestGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases/latest`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters['clusterName'])));
        urlPath = urlPath.replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters['namespaceName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenReleaseDTOFromJSON(jsonValue));
    }

    /**
     * 
     * 获取最新活跃发布
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesLatestGet(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesLatestGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenReleaseDTO> {
        const response = await this.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesLatestGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 创建发布
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesPostRaw(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenReleaseDTO>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesPost().'
            );
        }

        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesPost().'
            );
        }

        if (requestParameters['clusterName'] == null) {
            throw new runtime.RequiredError(
                'clusterName',
                'Required parameter "clusterName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesPost().'
            );
        }

        if (requestParameters['namespaceName'] == null) {
            throw new runtime.RequiredError(
                'namespaceName',
                'Required parameter "namespaceName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesPost().'
            );
        }

        if (requestParameters['namespaceReleaseDTO'] == null) {
            throw new runtime.RequiredError(
                'namespaceReleaseDTO',
                'Required parameter "namespaceReleaseDTO" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters['clusterName'])));
        urlPath = urlPath.replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters['namespaceName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NamespaceReleaseDTOToJSON(requestParameters['namespaceReleaseDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenReleaseDTOFromJSON(jsonValue));
    }

    /**
     * 
     * 创建发布
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesPost(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenReleaseDTO> {
        const response = await this.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/envs/{env}/releases/compare
     * 对比发布
     */
    async openapiV1EnvsEnvReleasesCompareGetRaw(requestParameters: OpenapiV1EnvsEnvReleasesCompareGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenapiV1EnvsEnvReleasesCompareGet200Response>> {
        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1EnvsEnvReleasesCompareGet().'
            );
        }

        if (requestParameters['baseReleaseId'] == null) {
            throw new runtime.RequiredError(
                'baseReleaseId',
                'Required parameter "baseReleaseId" was null or undefined when calling openapiV1EnvsEnvReleasesCompareGet().'
            );
        }

        if (requestParameters['toCompareReleaseId'] == null) {
            throw new runtime.RequiredError(
                'toCompareReleaseId',
                'Required parameter "toCompareReleaseId" was null or undefined when calling openapiV1EnvsEnvReleasesCompareGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['baseReleaseId'] != null) {
            queryParameters['baseReleaseId'] = requestParameters['baseReleaseId'];
        }

        if (requestParameters['toCompareReleaseId'] != null) {
            queryParameters['toCompareReleaseId'] = requestParameters['toCompareReleaseId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/envs/{env}/releases/compare`;
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenapiV1EnvsEnvReleasesCompareGet200ResponseFromJSON(jsonValue));
    }

    /**
     * GET /openapi/v1/envs/{env}/releases/compare
     * 对比发布
     */
    async openapiV1EnvsEnvReleasesCompareGet(requestParameters: OpenapiV1EnvsEnvReleasesCompareGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenapiV1EnvsEnvReleasesCompareGet200Response> {
        const response = await this.openapiV1EnvsEnvReleasesCompareGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/envs/{env}/releases/{releaseId}
     * 获取发布详情
     */
    async openapiV1EnvsEnvReleasesReleaseIdGetRaw(requestParameters: OpenapiV1EnvsEnvReleasesReleaseIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenReleaseDTO>> {
        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1EnvsEnvReleasesReleaseIdGet().'
            );
        }

        if (requestParameters['releaseId'] == null) {
            throw new runtime.RequiredError(
                'releaseId',
                'Required parameter "releaseId" was null or undefined when calling openapiV1EnvsEnvReleasesReleaseIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/envs/{env}/releases/{releaseId}`;
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"releaseId"}}`, encodeURIComponent(String(requestParameters['releaseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenReleaseDTOFromJSON(jsonValue));
    }

    /**
     * GET /openapi/v1/envs/{env}/releases/{releaseId}
     * 获取发布详情
     */
    async openapiV1EnvsEnvReleasesReleaseIdGet(requestParameters: OpenapiV1EnvsEnvReleasesReleaseIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenReleaseDTO> {
        const response = await this.openapiV1EnvsEnvReleasesReleaseIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 回滚发布
     */
    async openapiV1EnvsEnvReleasesReleaseIdRollbackPutRaw(requestParameters: OpenapiV1EnvsEnvReleasesReleaseIdRollbackPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1EnvsEnvReleasesReleaseIdRollbackPut().'
            );
        }

        if (requestParameters['releaseId'] == null) {
            throw new runtime.RequiredError(
                'releaseId',
                'Required parameter "releaseId" was null or undefined when calling openapiV1EnvsEnvReleasesReleaseIdRollbackPut().'
            );
        }

        if (requestParameters['operator'] == null) {
            throw new runtime.RequiredError(
                'operator',
                'Required parameter "operator" was null or undefined when calling openapiV1EnvsEnvReleasesReleaseIdRollbackPut().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['operator'] != null) {
            queryParameters['operator'] = requestParameters['operator'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/envs/{env}/releases/{releaseId}/rollback`;
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"releaseId"}}`, encodeURIComponent(String(requestParameters['releaseId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 
     * 回滚发布
     */
    async openapiV1EnvsEnvReleasesReleaseIdRollbackPut(requestParameters: OpenapiV1EnvsEnvReleasesReleaseIdRollbackPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.openapiV1EnvsEnvReleasesReleaseIdRollbackPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
