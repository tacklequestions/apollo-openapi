/*
 * Apollo OpenAPI
 * Apollo配置中心OpenAPI接口文档  ## 认证方式  所有API接口都需要通过Authorization header进行身份验证。  ### 获取Token的方式：  1. **Portal管理界面获取**：    - 登录Apollo Portal管理界面    - 进入\"管理员工具\" -> \"开放平台授权管理\"    - 创建第三方应用，获取Token  2. **Token格式**：    ```    Authorization: token_value    ```  3. **Token权限**：    - Token具有对应应用的读写权限    - 不同Token可能有不同的环境和命名空间权限    - 建议为不同用途创建不同的Token  ### 使用示例： ```bash curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\      -H \"Authorization: your_token_here\" ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.NamespaceGrayDelReleaseDTO;
import org.openapitools.client.model.NamespaceReleaseDTO;
import org.openapitools.client.model.OpenGrayReleaseRuleDTO;
import org.openapitools.client.model.OpenItemDTO;
import org.openapitools.client.model.OpenNamespaceDTO;
import org.openapitools.client.model.OpenReleaseDTO;
import org.openapitools.client.model.OpenapiV1AppsGet401Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NamespaceBranchManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NamespaceBranchManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NamespaceBranchManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchPost
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param operator  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchPostCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String operator, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branch"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operator", operator));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchPostValidateBeforeCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String operator, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchPost(Async)");
        }

        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchPost(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchPost(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchPost(Async)");
        }

        // verify the required parameter 'operator' is set
        if (operator == null) {
            throw new ApiException("Missing the required parameter 'operator' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchPost(Async)");
        }

        return openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchPostCall(appId, env, clusterName, namespaceName, operator, _callback);

    }

    /**
     * 创建命名空间分支
     * POST /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branch
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param operator  (required)
     * @return OpenNamespaceDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public OpenNamespaceDTO openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchPost(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String operator) throws ApiException {
        ApiResponse<OpenNamespaceDTO> localVarResp = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchPostWithHttpInfo(appId, env, clusterName, namespaceName, operator);
        return localVarResp.getData();
    }

    /**
     * 创建命名空间分支
     * POST /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branch
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param operator  (required)
     * @return ApiResponse&lt;OpenNamespaceDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenNamespaceDTO> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchPostWithHttpInfo(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String operator) throws ApiException {
        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchPostValidateBeforeCall(appId, env, clusterName, namespaceName, operator, null);
        Type localVarReturnType = new TypeToken<OpenNamespaceDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 创建命名空间分支 (asynchronously)
     * POST /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branch
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param operator  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchPostAsync(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String operator, final ApiCallback<OpenNamespaceDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchPostValidateBeforeCall(appId, env, clusterName, namespaceName, operator, _callback);
        Type localVarReturnType = new TypeToken<OpenNamespaceDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameDelete
     * @param env  (required)
     * @param appId  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param branchName  (required)
     * @param operator  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameDeleteCall(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, @javax.annotation.Nonnull String operator, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}"
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "branchName" + "}", localVarApiClient.escapeString(branchName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operator", operator));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameDeleteValidateBeforeCall(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, @javax.annotation.Nonnull String operator, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameDelete(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameDelete(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameDelete(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameDelete(Async)");
        }

        // verify the required parameter 'branchName' is set
        if (branchName == null) {
            throw new ApiException("Missing the required parameter 'branchName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameDelete(Async)");
        }

        // verify the required parameter 'operator' is set
        if (operator == null) {
            throw new ApiException("Missing the required parameter 'operator' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameDelete(Async)");
        }

        return openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameDeleteCall(env, appId, clusterName, namespaceName, branchName, operator, _callback);

    }

    /**
     * 删除命名空间分支
     * DELETE /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}
     * @param env  (required)
     * @param appId  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param branchName  (required)
     * @param operator  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameDelete(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, @javax.annotation.Nonnull String operator) throws ApiException {
        ApiResponse<Object> localVarResp = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameDeleteWithHttpInfo(env, appId, clusterName, namespaceName, branchName, operator);
        return localVarResp.getData();
    }

    /**
     * 删除命名空间分支
     * DELETE /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}
     * @param env  (required)
     * @param appId  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param branchName  (required)
     * @param operator  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameDeleteWithHttpInfo(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, @javax.annotation.Nonnull String operator) throws ApiException {
        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameDeleteValidateBeforeCall(env, appId, clusterName, namespaceName, branchName, operator, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 删除命名空间分支 (asynchronously)
     * DELETE /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}
     * @param env  (required)
     * @param appId  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param branchName  (required)
     * @param operator  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameDeleteAsync(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, @javax.annotation.Nonnull String operator, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameDeleteValidateBeforeCall(env, appId, clusterName, namespaceName, branchName, operator, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayDelReleasesPost
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param branchName  (required)
     * @param namespaceGrayDelReleaseDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayDelReleasesPostCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, @javax.annotation.Nonnull NamespaceGrayDelReleaseDTO namespaceGrayDelReleaseDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = namespaceGrayDelReleaseDTO;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/gray-del-releases"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "branchName" + "}", localVarApiClient.escapeString(branchName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayDelReleasesPostValidateBeforeCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, @javax.annotation.Nonnull NamespaceGrayDelReleaseDTO namespaceGrayDelReleaseDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayDelReleasesPost(Async)");
        }

        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayDelReleasesPost(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayDelReleasesPost(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayDelReleasesPost(Async)");
        }

        // verify the required parameter 'branchName' is set
        if (branchName == null) {
            throw new ApiException("Missing the required parameter 'branchName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayDelReleasesPost(Async)");
        }

        // verify the required parameter 'namespaceGrayDelReleaseDTO' is set
        if (namespaceGrayDelReleaseDTO == null) {
            throw new ApiException("Missing the required parameter 'namespaceGrayDelReleaseDTO' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayDelReleasesPost(Async)");
        }

        return openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayDelReleasesPostCall(appId, env, clusterName, namespaceName, branchName, namespaceGrayDelReleaseDTO, _callback);

    }

    /**
     * 创建灰度删除发布
     * 
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param branchName  (required)
     * @param namespaceGrayDelReleaseDTO  (required)
     * @return OpenReleaseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public OpenReleaseDTO openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayDelReleasesPost(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, @javax.annotation.Nonnull NamespaceGrayDelReleaseDTO namespaceGrayDelReleaseDTO) throws ApiException {
        ApiResponse<OpenReleaseDTO> localVarResp = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayDelReleasesPostWithHttpInfo(appId, env, clusterName, namespaceName, branchName, namespaceGrayDelReleaseDTO);
        return localVarResp.getData();
    }

    /**
     * 创建灰度删除发布
     * 
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param branchName  (required)
     * @param namespaceGrayDelReleaseDTO  (required)
     * @return ApiResponse&lt;OpenReleaseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenReleaseDTO> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayDelReleasesPostWithHttpInfo(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, @javax.annotation.Nonnull NamespaceGrayDelReleaseDTO namespaceGrayDelReleaseDTO) throws ApiException {
        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayDelReleasesPostValidateBeforeCall(appId, env, clusterName, namespaceName, branchName, namespaceGrayDelReleaseDTO, null);
        Type localVarReturnType = new TypeToken<OpenReleaseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 创建灰度删除发布 (asynchronously)
     * 
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param branchName  (required)
     * @param namespaceGrayDelReleaseDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayDelReleasesPostAsync(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, @javax.annotation.Nonnull NamespaceGrayDelReleaseDTO namespaceGrayDelReleaseDTO, final ApiCallback<OpenReleaseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayDelReleasesPostValidateBeforeCall(appId, env, clusterName, namespaceName, branchName, namespaceGrayDelReleaseDTO, _callback);
        Type localVarReturnType = new TypeToken<OpenReleaseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesGet
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param branchName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesGetCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/gray-rules"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "branchName" + "}", localVarApiClient.escapeString(branchName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesGetValidateBeforeCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesGet(Async)");
        }

        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesGet(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesGet(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesGet(Async)");
        }

        // verify the required parameter 'branchName' is set
        if (branchName == null) {
            throw new ApiException("Missing the required parameter 'branchName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesGet(Async)");
        }

        return openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesGetCall(appId, env, clusterName, namespaceName, branchName, _callback);

    }

    /**
     * 获取分支灰度发布规则
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/gray-rules
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param branchName  (required)
     * @return OpenGrayReleaseRuleDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public OpenGrayReleaseRuleDTO openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesGet(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName) throws ApiException {
        ApiResponse<OpenGrayReleaseRuleDTO> localVarResp = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesGetWithHttpInfo(appId, env, clusterName, namespaceName, branchName);
        return localVarResp.getData();
    }

    /**
     * 获取分支灰度发布规则
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/gray-rules
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param branchName  (required)
     * @return ApiResponse&lt;OpenGrayReleaseRuleDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenGrayReleaseRuleDTO> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesGetWithHttpInfo(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName) throws ApiException {
        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesGetValidateBeforeCall(appId, env, clusterName, namespaceName, branchName, null);
        Type localVarReturnType = new TypeToken<OpenGrayReleaseRuleDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取分支灰度发布规则 (asynchronously)
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/gray-rules
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param branchName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesGetAsync(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, final ApiCallback<OpenGrayReleaseRuleDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesGetValidateBeforeCall(appId, env, clusterName, namespaceName, branchName, _callback);
        Type localVarReturnType = new TypeToken<OpenGrayReleaseRuleDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesPut
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param branchName  (required)
     * @param operator  (required)
     * @param openGrayReleaseRuleDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesPutCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, @javax.annotation.Nonnull String operator, @javax.annotation.Nonnull OpenGrayReleaseRuleDTO openGrayReleaseRuleDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = openGrayReleaseRuleDTO;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/gray-rules"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "branchName" + "}", localVarApiClient.escapeString(branchName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (operator != null) {
            localVarHeaderParams.put("operator", localVarApiClient.parameterToString(operator));
        }


        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesPutValidateBeforeCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, @javax.annotation.Nonnull String operator, @javax.annotation.Nonnull OpenGrayReleaseRuleDTO openGrayReleaseRuleDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesPut(Async)");
        }

        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesPut(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesPut(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesPut(Async)");
        }

        // verify the required parameter 'branchName' is set
        if (branchName == null) {
            throw new ApiException("Missing the required parameter 'branchName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesPut(Async)");
        }

        // verify the required parameter 'operator' is set
        if (operator == null) {
            throw new ApiException("Missing the required parameter 'operator' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesPut(Async)");
        }

        // verify the required parameter 'openGrayReleaseRuleDTO' is set
        if (openGrayReleaseRuleDTO == null) {
            throw new ApiException("Missing the required parameter 'openGrayReleaseRuleDTO' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesPut(Async)");
        }

        return openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesPutCall(appId, env, clusterName, namespaceName, branchName, operator, openGrayReleaseRuleDTO, _callback);

    }

    /**
     * 更新分支灰度发布规则
     * PUT /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/gray-rules
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param branchName  (required)
     * @param operator  (required)
     * @param openGrayReleaseRuleDTO  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesPut(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, @javax.annotation.Nonnull String operator, @javax.annotation.Nonnull OpenGrayReleaseRuleDTO openGrayReleaseRuleDTO) throws ApiException {
        ApiResponse<Object> localVarResp = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesPutWithHttpInfo(appId, env, clusterName, namespaceName, branchName, operator, openGrayReleaseRuleDTO);
        return localVarResp.getData();
    }

    /**
     * 更新分支灰度发布规则
     * PUT /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/gray-rules
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param branchName  (required)
     * @param operator  (required)
     * @param openGrayReleaseRuleDTO  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesPutWithHttpInfo(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, @javax.annotation.Nonnull String operator, @javax.annotation.Nonnull OpenGrayReleaseRuleDTO openGrayReleaseRuleDTO) throws ApiException {
        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesPutValidateBeforeCall(appId, env, clusterName, namespaceName, branchName, operator, openGrayReleaseRuleDTO, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 更新分支灰度发布规则 (asynchronously)
     * PUT /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/gray-rules
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param branchName  (required)
     * @param operator  (required)
     * @param openGrayReleaseRuleDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesPutAsync(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, @javax.annotation.Nonnull String operator, @javax.annotation.Nonnull OpenGrayReleaseRuleDTO openGrayReleaseRuleDTO, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameGrayRulesPutValidateBeforeCall(appId, env, clusterName, namespaceName, branchName, operator, openGrayReleaseRuleDTO, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameItemsGet
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param branchName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取分支下的配置项列表 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 分支不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameItemsGetCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/items"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "branchName" + "}", localVarApiClient.escapeString(branchName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameItemsGetValidateBeforeCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameItemsGet(Async)");
        }

        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameItemsGet(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameItemsGet(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameItemsGet(Async)");
        }

        // verify the required parameter 'branchName' is set
        if (branchName == null) {
            throw new ApiException("Missing the required parameter 'branchName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameItemsGet(Async)");
        }

        return openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameItemsGetCall(appId, env, clusterName, namespaceName, branchName, _callback);

    }

    /**
     * 获取分支下的配置项
     * GET /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/items
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param branchName  (required)
     * @return List&lt;OpenItemDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取分支下的配置项列表 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 分支不存在 </td><td>  -  </td></tr>
     </table>
     */
    public List<OpenItemDTO> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameItemsGet(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName) throws ApiException {
        ApiResponse<List<OpenItemDTO>> localVarResp = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameItemsGetWithHttpInfo(appId, env, clusterName, namespaceName, branchName);
        return localVarResp.getData();
    }

    /**
     * 获取分支下的配置项
     * GET /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/items
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param branchName  (required)
     * @return ApiResponse&lt;List&lt;OpenItemDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取分支下的配置项列表 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 分支不存在 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OpenItemDTO>> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameItemsGetWithHttpInfo(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName) throws ApiException {
        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameItemsGetValidateBeforeCall(appId, env, clusterName, namespaceName, branchName, null);
        Type localVarReturnType = new TypeToken<List<OpenItemDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取分支下的配置项 (asynchronously)
     * GET /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/items
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param branchName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取分支下的配置项列表 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 分支不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameItemsGetAsync(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, final ApiCallback<List<OpenItemDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameItemsGetValidateBeforeCall(appId, env, clusterName, namespaceName, branchName, _callback);
        Type localVarReturnType = new TypeToken<List<OpenItemDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameMergePost
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param branchName  (required)
     * @param deleteBranch  (required)
     * @param namespaceReleaseDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 分支合并成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 合并参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameMergePostCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, @javax.annotation.Nonnull Boolean deleteBranch, @javax.annotation.Nonnull NamespaceReleaseDTO namespaceReleaseDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = namespaceReleaseDTO;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/merge"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "branchName" + "}", localVarApiClient.escapeString(branchName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deleteBranch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleteBranch", deleteBranch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameMergePostValidateBeforeCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, @javax.annotation.Nonnull Boolean deleteBranch, @javax.annotation.Nonnull NamespaceReleaseDTO namespaceReleaseDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameMergePost(Async)");
        }

        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameMergePost(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameMergePost(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameMergePost(Async)");
        }

        // verify the required parameter 'branchName' is set
        if (branchName == null) {
            throw new ApiException("Missing the required parameter 'branchName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameMergePost(Async)");
        }

        // verify the required parameter 'deleteBranch' is set
        if (deleteBranch == null) {
            throw new ApiException("Missing the required parameter 'deleteBranch' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameMergePost(Async)");
        }

        // verify the required parameter 'namespaceReleaseDTO' is set
        if (namespaceReleaseDTO == null) {
            throw new ApiException("Missing the required parameter 'namespaceReleaseDTO' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameMergePost(Async)");
        }

        return openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameMergePostCall(appId, env, clusterName, namespaceName, branchName, deleteBranch, namespaceReleaseDTO, _callback);

    }

    /**
     * 合并分支
     * 
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param branchName  (required)
     * @param deleteBranch  (required)
     * @param namespaceReleaseDTO  (required)
     * @return OpenReleaseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 分支合并成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 合并参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public OpenReleaseDTO openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameMergePost(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, @javax.annotation.Nonnull Boolean deleteBranch, @javax.annotation.Nonnull NamespaceReleaseDTO namespaceReleaseDTO) throws ApiException {
        ApiResponse<OpenReleaseDTO> localVarResp = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameMergePostWithHttpInfo(appId, env, clusterName, namespaceName, branchName, deleteBranch, namespaceReleaseDTO);
        return localVarResp.getData();
    }

    /**
     * 合并分支
     * 
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param branchName  (required)
     * @param deleteBranch  (required)
     * @param namespaceReleaseDTO  (required)
     * @return ApiResponse&lt;OpenReleaseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 分支合并成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 合并参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenReleaseDTO> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameMergePostWithHttpInfo(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, @javax.annotation.Nonnull Boolean deleteBranch, @javax.annotation.Nonnull NamespaceReleaseDTO namespaceReleaseDTO) throws ApiException {
        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameMergePostValidateBeforeCall(appId, env, clusterName, namespaceName, branchName, deleteBranch, namespaceReleaseDTO, null);
        Type localVarReturnType = new TypeToken<OpenReleaseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 合并分支 (asynchronously)
     * 
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param branchName  (required)
     * @param deleteBranch  (required)
     * @param namespaceReleaseDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 分支合并成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 合并参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameMergePostAsync(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, @javax.annotation.Nonnull Boolean deleteBranch, @javax.annotation.Nonnull NamespaceReleaseDTO namespaceReleaseDTO, final ApiCallback<OpenReleaseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameMergePostValidateBeforeCall(appId, env, clusterName, namespaceName, branchName, deleteBranch, namespaceReleaseDTO, _callback);
        Type localVarReturnType = new TypeToken<OpenReleaseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNamePatch
     * @param env  (required)
     * @param appId  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param branchName  (required)
     * @param deleteBranch  (required)
     * @param xApolloOperator  (required)
     * @param namespaceReleaseDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNamePatchCall(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, @javax.annotation.Nonnull Boolean deleteBranch, @javax.annotation.Nonnull String xApolloOperator, @javax.annotation.Nonnull NamespaceReleaseDTO namespaceReleaseDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = namespaceReleaseDTO;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}"
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "branchName" + "}", localVarApiClient.escapeString(branchName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deleteBranch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleteBranch", deleteBranch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xApolloOperator != null) {
            localVarHeaderParams.put("X-Apollo-Operator", localVarApiClient.parameterToString(xApolloOperator));
        }


        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNamePatchValidateBeforeCall(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, @javax.annotation.Nonnull Boolean deleteBranch, @javax.annotation.Nonnull String xApolloOperator, @javax.annotation.Nonnull NamespaceReleaseDTO namespaceReleaseDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNamePatch(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNamePatch(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNamePatch(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNamePatch(Async)");
        }

        // verify the required parameter 'branchName' is set
        if (branchName == null) {
            throw new ApiException("Missing the required parameter 'branchName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNamePatch(Async)");
        }

        // verify the required parameter 'deleteBranch' is set
        if (deleteBranch == null) {
            throw new ApiException("Missing the required parameter 'deleteBranch' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNamePatch(Async)");
        }

        // verify the required parameter 'xApolloOperator' is set
        if (xApolloOperator == null) {
            throw new ApiException("Missing the required parameter 'xApolloOperator' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNamePatch(Async)");
        }

        // verify the required parameter 'namespaceReleaseDTO' is set
        if (namespaceReleaseDTO == null) {
            throw new ApiException("Missing the required parameter 'namespaceReleaseDTO' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNamePatch(Async)");
        }

        return openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNamePatchCall(env, appId, clusterName, namespaceName, branchName, deleteBranch, xApolloOperator, namespaceReleaseDTO, _callback);

    }

    /**
     * 合并分支到主分支
     * PATCH /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}  使用 PATCH 方法表示部分更新操作（将分支状态从\&quot;独立\&quot;更新为\&quot;合并\&quot;）
     * @param env  (required)
     * @param appId  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param branchName  (required)
     * @param deleteBranch  (required)
     * @param xApolloOperator  (required)
     * @param namespaceReleaseDTO  (required)
     * @return OpenReleaseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public OpenReleaseDTO openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNamePatch(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, @javax.annotation.Nonnull Boolean deleteBranch, @javax.annotation.Nonnull String xApolloOperator, @javax.annotation.Nonnull NamespaceReleaseDTO namespaceReleaseDTO) throws ApiException {
        ApiResponse<OpenReleaseDTO> localVarResp = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNamePatchWithHttpInfo(env, appId, clusterName, namespaceName, branchName, deleteBranch, xApolloOperator, namespaceReleaseDTO);
        return localVarResp.getData();
    }

    /**
     * 合并分支到主分支
     * PATCH /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}  使用 PATCH 方法表示部分更新操作（将分支状态从\&quot;独立\&quot;更新为\&quot;合并\&quot;）
     * @param env  (required)
     * @param appId  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param branchName  (required)
     * @param deleteBranch  (required)
     * @param xApolloOperator  (required)
     * @param namespaceReleaseDTO  (required)
     * @return ApiResponse&lt;OpenReleaseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenReleaseDTO> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNamePatchWithHttpInfo(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, @javax.annotation.Nonnull Boolean deleteBranch, @javax.annotation.Nonnull String xApolloOperator, @javax.annotation.Nonnull NamespaceReleaseDTO namespaceReleaseDTO) throws ApiException {
        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNamePatchValidateBeforeCall(env, appId, clusterName, namespaceName, branchName, deleteBranch, xApolloOperator, namespaceReleaseDTO, null);
        Type localVarReturnType = new TypeToken<OpenReleaseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 合并分支到主分支 (asynchronously)
     * PATCH /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}  使用 PATCH 方法表示部分更新操作（将分支状态从\&quot;独立\&quot;更新为\&quot;合并\&quot;）
     * @param env  (required)
     * @param appId  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param branchName  (required)
     * @param deleteBranch  (required)
     * @param xApolloOperator  (required)
     * @param namespaceReleaseDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNamePatchAsync(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, @javax.annotation.Nonnull Boolean deleteBranch, @javax.annotation.Nonnull String xApolloOperator, @javax.annotation.Nonnull NamespaceReleaseDTO namespaceReleaseDTO, final ApiCallback<OpenReleaseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNamePatchValidateBeforeCall(env, appId, clusterName, namespaceName, branchName, deleteBranch, xApolloOperator, namespaceReleaseDTO, _callback);
        Type localVarReturnType = new TypeToken<OpenReleaseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameReleasesPost
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param branchName  (required)
     * @param namespaceReleaseDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameReleasesPostCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, @javax.annotation.Nonnull NamespaceReleaseDTO namespaceReleaseDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = namespaceReleaseDTO;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches/{branchName}/releases"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "branchName" + "}", localVarApiClient.escapeString(branchName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameReleasesPostValidateBeforeCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, @javax.annotation.Nonnull NamespaceReleaseDTO namespaceReleaseDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameReleasesPost(Async)");
        }

        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameReleasesPost(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameReleasesPost(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameReleasesPost(Async)");
        }

        // verify the required parameter 'branchName' is set
        if (branchName == null) {
            throw new ApiException("Missing the required parameter 'branchName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameReleasesPost(Async)");
        }

        // verify the required parameter 'namespaceReleaseDTO' is set
        if (namespaceReleaseDTO == null) {
            throw new ApiException("Missing the required parameter 'namespaceReleaseDTO' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameReleasesPost(Async)");
        }

        return openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameReleasesPostCall(appId, env, clusterName, namespaceName, branchName, namespaceReleaseDTO, _callback);

    }

    /**
     * 创建灰度发布
     * 
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param branchName  (required)
     * @param namespaceReleaseDTO  (required)
     * @return OpenReleaseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public OpenReleaseDTO openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameReleasesPost(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, @javax.annotation.Nonnull NamespaceReleaseDTO namespaceReleaseDTO) throws ApiException {
        ApiResponse<OpenReleaseDTO> localVarResp = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameReleasesPostWithHttpInfo(appId, env, clusterName, namespaceName, branchName, namespaceReleaseDTO);
        return localVarResp.getData();
    }

    /**
     * 创建灰度发布
     * 
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param branchName  (required)
     * @param namespaceReleaseDTO  (required)
     * @return ApiResponse&lt;OpenReleaseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenReleaseDTO> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameReleasesPostWithHttpInfo(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, @javax.annotation.Nonnull NamespaceReleaseDTO namespaceReleaseDTO) throws ApiException {
        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameReleasesPostValidateBeforeCall(appId, env, clusterName, namespaceName, branchName, namespaceReleaseDTO, null);
        Type localVarReturnType = new TypeToken<OpenReleaseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 创建灰度发布 (asynchronously)
     * 
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param branchName  (required)
     * @param namespaceReleaseDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameReleasesPostAsync(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String branchName, @javax.annotation.Nonnull NamespaceReleaseDTO namespaceReleaseDTO, final ApiCallback<OpenReleaseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesBranchNameReleasesPostValidateBeforeCall(appId, env, clusterName, namespaceName, branchName, namespaceReleaseDTO, _callback);
        Type localVarReturnType = new TypeToken<OpenReleaseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
