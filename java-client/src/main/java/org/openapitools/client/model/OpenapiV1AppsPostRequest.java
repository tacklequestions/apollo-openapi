/*
 * Apollo OpenAPI
 * Apollo配置中心OpenAPI接口文档  ## 认证方式  所有API接口都需要通过Authorization header进行身份验证。  ### 获取Token的方式：  1. **Portal管理界面获取**：    - 登录Apollo Portal管理界面    - 进入\"管理员工具\" -> \"开放平台授权管理\"    - 创建第三方应用，获取Token  2. **Token格式**：    ```    Authorization: token_value    ```  3. **Token权限**：    - Token具有对应应用的读写权限    - 不同Token可能有不同的环境和命名空间权限    - 建议为不同用途创建不同的Token  ### 使用示例： ```bash curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\      -H \"Authorization: your_token_here\" ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OpenAppDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-14T16:50:03.362525+08:00[Asia/Shanghai]", comments = "Generator version: 7.15.0")
public class OpenapiV1AppsPostRequest {
  public static final String SERIALIZED_NAME_APP = "app";
  @SerializedName(SERIALIZED_NAME_APP)
  @javax.annotation.Nonnull
  private OpenAppDTO app;

  public static final String SERIALIZED_NAME_ASSIGN_APP_ROLE_TO_SELF = "assignAppRoleToSelf";
  @SerializedName(SERIALIZED_NAME_ASSIGN_APP_ROLE_TO_SELF)
  @javax.annotation.Nonnull
  private Boolean assignAppRoleToSelf;

  public static final String SERIALIZED_NAME_ADMINS = "admins";
  @SerializedName(SERIALIZED_NAME_ADMINS)
  @javax.annotation.Nonnull
  private List<String> admins = new ArrayList<>();

  public OpenapiV1AppsPostRequest() {
  }

  public OpenapiV1AppsPostRequest app(@javax.annotation.Nonnull OpenAppDTO app) {
    this.app = app;
    return this;
  }

  /**
   * Get app
   * @return app
   */
  @javax.annotation.Nonnull
  public OpenAppDTO getApp() {
    return app;
  }

  public void setApp(@javax.annotation.Nonnull OpenAppDTO app) {
    this.app = app;
  }


  public OpenapiV1AppsPostRequest assignAppRoleToSelf(@javax.annotation.Nonnull Boolean assignAppRoleToSelf) {
    this.assignAppRoleToSelf = assignAppRoleToSelf;
    return this;
  }

  /**
   * 是否将应用角色分配给当前用户。当设置为true时，当前token用户将获得该应用的完全操作权限
   * @return assignAppRoleToSelf
   */
  @javax.annotation.Nonnull
  public Boolean getAssignAppRoleToSelf() {
    return assignAppRoleToSelf;
  }

  public void setAssignAppRoleToSelf(@javax.annotation.Nonnull Boolean assignAppRoleToSelf) {
    this.assignAppRoleToSelf = assignAppRoleToSelf;
  }


  public OpenapiV1AppsPostRequest admins(@javax.annotation.Nonnull List<String> admins) {
    this.admins = admins;
    return this;
  }

  public OpenapiV1AppsPostRequest addAdminsItem(String adminsItem) {
    if (this.admins == null) {
      this.admins = new ArrayList<>();
    }
    this.admins.add(adminsItem);
    return this;
  }

  /**
   * 应用管理员用户名列表。应用负责人默认具有项目管理员权限。管理员可以创建命名空间、集群并分配用户权限
   * @return admins
   */
  @javax.annotation.Nonnull
  public List<String> getAdmins() {
    return admins;
  }

  public void setAdmins(@javax.annotation.Nonnull List<String> admins) {
    this.admins = admins;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OpenapiV1AppsPostRequest openapiV1AppsPostRequest = (OpenapiV1AppsPostRequest) o;
    return Objects.equals(this.app, openapiV1AppsPostRequest.app) &&
        Objects.equals(this.assignAppRoleToSelf, openapiV1AppsPostRequest.assignAppRoleToSelf) &&
        Objects.equals(this.admins, openapiV1AppsPostRequest.admins);
  }

  @Override
  public int hashCode() {
    return Objects.hash(app, assignAppRoleToSelf, admins);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OpenapiV1AppsPostRequest {\n");
    sb.append("    app: ").append(toIndentedString(app)).append("\n");
    sb.append("    assignAppRoleToSelf: ").append(toIndentedString(assignAppRoleToSelf)).append("\n");
    sb.append("    admins: ").append(toIndentedString(admins)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("assignAppRoleToSelf", "admins", "app"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("app", "assignAppRoleToSelf", "admins"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OpenapiV1AppsPostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OpenapiV1AppsPostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OpenapiV1AppsPostRequest is not found in the empty JSON string", OpenapiV1AppsPostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OpenapiV1AppsPostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OpenapiV1AppsPostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OpenapiV1AppsPostRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `app`
      OpenAppDTO.validateJsonElement(jsonObj.get("app"));
      // ensure the required json array is present
      if (jsonObj.get("admins") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("admins").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `admins` to be an array in the JSON string but got `%s`", jsonObj.get("admins").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OpenapiV1AppsPostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OpenapiV1AppsPostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OpenapiV1AppsPostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OpenapiV1AppsPostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<OpenapiV1AppsPostRequest>() {
           @Override
           public void write(JsonWriter out, OpenapiV1AppsPostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OpenapiV1AppsPostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OpenapiV1AppsPostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OpenapiV1AppsPostRequest
   * @throws IOException if the JSON string is invalid with respect to OpenapiV1AppsPostRequest
   */
  public static OpenapiV1AppsPostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OpenapiV1AppsPostRequest.class);
  }

  /**
   * Convert an instance of OpenapiV1AppsPostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

