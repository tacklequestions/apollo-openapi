/* tslint:disable */
/* eslint-disable */
/**
 * Apollo OpenAPI
 * Apollo配置中心OpenAPI接口文档  ## 认证方式  所有API接口都需要通过Authorization header进行身份验证。  ### 获取Token的方式：  1. **Portal管理界面获取**：    - 登录Apollo Portal管理界面    - 进入\"管理员工具\" -> \"开放平台授权管理\"    - 创建第三方应用，获取Token  2. **Token格式**：    ```    Authorization: token_value    ```  3. **Token权限**：    - Token具有对应应用的读写权限    - 不同Token可能有不同的环境和命名空间权限    - 建议为不同用途创建不同的Token  ### 使用示例： ```bash curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\      -H \"Authorization: your_token_here\" ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EnvClusterInfo,
  OpenAppDTO,
  OpenEnvClusterDTO,
  OpenapiV1AppsGet401Response,
  OpenapiV1AppsPost400Response,
  OpenapiV1AppsPostRequest,
} from '../models/index';
import {
    EnvClusterInfoFromJSON,
    EnvClusterInfoToJSON,
    OpenAppDTOFromJSON,
    OpenAppDTOToJSON,
    OpenEnvClusterDTOFromJSON,
    OpenEnvClusterDTOToJSON,
    OpenapiV1AppsGet401ResponseFromJSON,
    OpenapiV1AppsGet401ResponseToJSON,
    OpenapiV1AppsPost400ResponseFromJSON,
    OpenapiV1AppsPost400ResponseToJSON,
    OpenapiV1AppsPostRequestFromJSON,
    OpenapiV1AppsPostRequestToJSON,
} from '../models/index';

export interface OpenapiV1AppsAppIdAppnamespacesNamespaceNameDeleteRequest {
    appId: string;
    namespaceName: string;
}

export interface OpenapiV1AppsAppIdDeleteRequest {
    appId: string;
}

export interface OpenapiV1AppsAppIdEnvClustersGetRequest {
    appId: string;
}

export interface OpenapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNameLinksDeleteRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
}

export interface OpenapiV1AppsAppIdGetRequest {
    appId: string;
}

export interface OpenapiV1AppsAppIdMissEnvsGetRequest {
    appId: string;
}

export interface OpenapiV1AppsAppIdNamespacesReleasesStatusGetRequest {
    appId: string;
}

export interface OpenapiV1AppsAppIdNavtreeGetRequest {
    appId: string;
}

export interface OpenapiV1AppsAppIdPutRequest {
    appId: string;
    openAppDTO: OpenAppDTO;
}

export interface OpenapiV1AppsEnvsEnvPostRequest {
    env: string;
    openAppDTO: OpenAppDTO;
}

export interface OpenapiV1AppsGetRequest {
    authorized?: string;
}

export interface OpenapiV1AppsPostOperationRequest {
    openapiV1AppsPostRequest: OpenapiV1AppsPostRequest;
}

/**
 * 
 */
export class AppManagementApi extends runtime.BaseAPI {

    /**
     * DELETE /openapi/v1/apps/{appId}/appnamespaces/{namespaceName}
     * 删除AppNamespace
     */
    async openapiV1AppsAppIdAppnamespacesNamespaceNameDeleteRaw(requestParameters: OpenapiV1AppsAppIdAppnamespacesNamespaceNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1AppsAppIdAppnamespacesNamespaceNameDelete().'
            );
        }

        if (requestParameters['namespaceName'] == null) {
            throw new runtime.RequiredError(
                'namespaceName',
                'Required parameter "namespaceName" was null or undefined when calling openapiV1AppsAppIdAppnamespacesNamespaceNameDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/apps/{appId}/appnamespaces/{namespaceName}`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters['namespaceName'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * DELETE /openapi/v1/apps/{appId}/appnamespaces/{namespaceName}
     * 删除AppNamespace
     */
    async openapiV1AppsAppIdAppnamespacesNamespaceNameDelete(requestParameters: OpenapiV1AppsAppIdAppnamespacesNamespaceNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.openapiV1AppsAppIdAppnamespacesNamespaceNameDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DELETE /openapi/v1/apps/{appId}
     * 删除应用
     */
    async openapiV1AppsAppIdDeleteRaw(requestParameters: OpenapiV1AppsAppIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenapiV1AppsGet401Response>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1AppsAppIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/apps/{appId}`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenapiV1AppsGet401ResponseFromJSON(jsonValue));
    }

    /**
     * DELETE /openapi/v1/apps/{appId}
     * 删除应用
     */
    async openapiV1AppsAppIdDelete(requestParameters: OpenapiV1AppsAppIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenapiV1AppsGet401Response> {
        const response = await this.openapiV1AppsAppIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/apps/{appId}/env-clusters
     * 获取应用的环境集群信息
     */
    async openapiV1AppsAppIdEnvClustersGetRaw(requestParameters: OpenapiV1AppsAppIdEnvClustersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OpenEnvClusterDTO>>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1AppsAppIdEnvClustersGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/apps/{appId}/env-clusters`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OpenEnvClusterDTOFromJSON));
    }

    /**
     * GET /openapi/v1/apps/{appId}/env-clusters
     * 获取应用的环境集群信息
     */
    async openapiV1AppsAppIdEnvClustersGet(requestParameters: OpenapiV1AppsAppIdEnvClustersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OpenEnvClusterDTO>> {
        const response = await this.openapiV1AppsAppIdEnvClustersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DELETE /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/links
     * 删除关联的Namespace
     */
    async openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNameLinksDeleteRaw(requestParameters: OpenapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNameLinksDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNameLinksDelete().'
            );
        }

        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNameLinksDelete().'
            );
        }

        if (requestParameters['clusterName'] == null) {
            throw new runtime.RequiredError(
                'clusterName',
                'Required parameter "clusterName" was null or undefined when calling openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNameLinksDelete().'
            );
        }

        if (requestParameters['namespaceName'] == null) {
            throw new runtime.RequiredError(
                'namespaceName',
                'Required parameter "namespaceName" was null or undefined when calling openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNameLinksDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/links`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters['clusterName'])));
        urlPath = urlPath.replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters['namespaceName'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * DELETE /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/links
     * 删除关联的Namespace
     */
    async openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNameLinksDelete(requestParameters: OpenapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNameLinksDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNameLinksDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/apps/{appId}
     * 获取单个应用信息
     */
    async openapiV1AppsAppIdGetRaw(requestParameters: OpenapiV1AppsAppIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenAppDTO>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1AppsAppIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/apps/{appId}`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenAppDTOFromJSON(jsonValue));
    }

    /**
     * GET /openapi/v1/apps/{appId}
     * 获取单个应用信息
     */
    async openapiV1AppsAppIdGet(requestParameters: OpenapiV1AppsAppIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenAppDTO> {
        const response = await this.openapiV1AppsAppIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/apps/{appId}/miss_envs
     * 查找缺失的环境
     */
    async openapiV1AppsAppIdMissEnvsGetRaw(requestParameters: OpenapiV1AppsAppIdMissEnvsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1AppsAppIdMissEnvsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/apps/{appId}/miss_envs`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * GET /openapi/v1/apps/{appId}/miss_envs
     * 查找缺失的环境
     */
    async openapiV1AppsAppIdMissEnvsGet(requestParameters: OpenapiV1AppsAppIdMissEnvsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.openapiV1AppsAppIdMissEnvsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/apps/{appId}/namespaces/releases/status
     * 获取应用下所有Namespace的发布状态
     */
    async openapiV1AppsAppIdNamespacesReleasesStatusGetRaw(requestParameters: OpenapiV1AppsAppIdNamespacesReleasesStatusGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: { [key: string]: boolean; }; }>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1AppsAppIdNamespacesReleasesStatusGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/apps/{appId}/namespaces/releases/status`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * GET /openapi/v1/apps/{appId}/namespaces/releases/status
     * 获取应用下所有Namespace的发布状态
     */
    async openapiV1AppsAppIdNamespacesReleasesStatusGet(requestParameters: OpenapiV1AppsAppIdNamespacesReleasesStatusGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: { [key: string]: boolean; }; }> {
        const response = await this.openapiV1AppsAppIdNamespacesReleasesStatusGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/apps/{appId}/navtree
     * 获取应用导航树
     */
    async openapiV1AppsAppIdNavtreeGetRaw(requestParameters: OpenapiV1AppsAppIdNavtreeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EnvClusterInfo>>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1AppsAppIdNavtreeGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/apps/{appId}/navtree`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EnvClusterInfoFromJSON));
    }

    /**
     * GET /openapi/v1/apps/{appId}/navtree
     * 获取应用导航树
     */
    async openapiV1AppsAppIdNavtreeGet(requestParameters: OpenapiV1AppsAppIdNavtreeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EnvClusterInfo>> {
        const response = await this.openapiV1AppsAppIdNavtreeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PUT /openapi/v1/apps/{appId}
     * 更新应用
     */
    async openapiV1AppsAppIdPutRaw(requestParameters: OpenapiV1AppsAppIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenAppDTO>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1AppsAppIdPut().'
            );
        }

        if (requestParameters['openAppDTO'] == null) {
            throw new runtime.RequiredError(
                'openAppDTO',
                'Required parameter "openAppDTO" was null or undefined when calling openapiV1AppsAppIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/apps/{appId}`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OpenAppDTOToJSON(requestParameters['openAppDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenAppDTOFromJSON(jsonValue));
    }

    /**
     * PUT /openapi/v1/apps/{appId}
     * 更新应用
     */
    async openapiV1AppsAppIdPut(requestParameters: OpenapiV1AppsAppIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenAppDTO> {
        const response = await this.openapiV1AppsAppIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/apps/by-self
     * 获取当前Consumer的应用列表（分页）
     */
    async openapiV1AppsBySelfGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OpenAppDTO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/apps/by-self`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OpenAppDTOFromJSON));
    }

    /**
     * GET /openapi/v1/apps/by-self
     * 获取当前Consumer的应用列表（分页）
     */
    async openapiV1AppsBySelfGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OpenAppDTO>> {
        const response = await this.openapiV1AppsBySelfGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * POST /openapi/v1/apps/envs/{env}
     * 在指定环境创建应用
     */
    async openapiV1AppsEnvsEnvPostRaw(requestParameters: OpenapiV1AppsEnvsEnvPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenapiV1AppsGet401Response>> {
        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1AppsEnvsEnvPost().'
            );
        }

        if (requestParameters['openAppDTO'] == null) {
            throw new runtime.RequiredError(
                'openAppDTO',
                'Required parameter "openAppDTO" was null or undefined when calling openapiV1AppsEnvsEnvPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/apps/envs/{env}`;
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OpenAppDTOToJSON(requestParameters['openAppDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenapiV1AppsGet401ResponseFromJSON(jsonValue));
    }

    /**
     * POST /openapi/v1/apps/envs/{env}
     * 在指定环境创建应用
     */
    async openapiV1AppsEnvsEnvPost(requestParameters: OpenapiV1AppsEnvsEnvPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenapiV1AppsGet401Response> {
        const response = await this.openapiV1AppsEnvsEnvPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /openapi/v1/apps?authorized=true
     * 获取当前Consumer授权的应用列表
     */
    async openapiV1AppsGetRaw(requestParameters: OpenapiV1AppsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OpenAppDTO>>> {
        const queryParameters: any = {};

        if (requestParameters['authorized'] != null) {
            queryParameters['authorized'] = requestParameters['authorized'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/apps`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OpenAppDTOFromJSON));
    }

    /**
     * GET /openapi/v1/apps?authorized=true
     * 获取当前Consumer授权的应用列表
     */
    async openapiV1AppsGet(requestParameters: OpenapiV1AppsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OpenAppDTO>> {
        const response = await this.openapiV1AppsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST /openapi/v1/apps
     * 创建应用
     */
    async openapiV1AppsPostRaw(requestParameters: OpenapiV1AppsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenAppDTO>> {
        if (requestParameters['openapiV1AppsPostRequest'] == null) {
            throw new runtime.RequiredError(
                'openapiV1AppsPostRequest',
                'Required parameter "openapiV1AppsPostRequest" was null or undefined when calling openapiV1AppsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/apps`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OpenapiV1AppsPostRequestToJSON(requestParameters['openapiV1AppsPostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenAppDTOFromJSON(jsonValue));
    }

    /**
     * POST /openapi/v1/apps
     * 创建应用
     */
    async openapiV1AppsPost(requestParameters: OpenapiV1AppsPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenAppDTO> {
        const response = await this.openapiV1AppsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
