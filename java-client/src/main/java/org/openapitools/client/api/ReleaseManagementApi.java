/*
 * Apollo OpenAPI
 * Apollo配置中心OpenAPI接口文档  ## 认证方式  所有API接口都需要通过Authorization header进行身份验证。  ### 获取Token的方式：  1. **Portal管理界面获取**：    - 登录Apollo Portal管理界面    - 进入\"管理员工具\" -> \"开放平台授权管理\"    - 创建第三方应用，获取Token  2. **Token格式**：    ```    Authorization: token_value    ```  3. **Token权限**：    - Token具有对应应用的读写权限    - 不同Token可能有不同的环境和命名空间权限    - 建议为不同用途创建不同的Token  ### 使用示例： ```bash curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\      -H \"Authorization: your_token_here\" ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListReleaseBO;
import org.openapitools.client.model.NamespaceReleaseDTO;
import org.openapitools.client.model.OpenReleaseDTO;
import org.openapitools.client.model.OpenapiV1AppsGet401Response;
import org.openapitools.client.model.OpenapiV1EnvsEnvReleasesCompareGet200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReleaseManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReleaseManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReleaseManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesActiveGet
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param page  (required)
     * @param size  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesActiveGetCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases/active"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesActiveGetValidateBeforeCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesActiveGet(Async)");
        }

        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesActiveGet(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesActiveGet(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesActiveGet(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesActiveGet(Async)");
        }

        // verify the required parameter 'size' is set
        if (size == null) {
            throw new ApiException("Missing the required parameter 'size' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesActiveGet(Async)");
        }

        return openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesActiveGetCall(appId, env, clusterName, namespaceName, page, size, _callback);

    }

    /**
     * 获取活跃发布（分页）
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases/active
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param page  (required)
     * @param size  (required)
     * @return List&lt;OpenReleaseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<OpenReleaseDTO> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesActiveGet(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size) throws ApiException {
        ApiResponse<List<OpenReleaseDTO>> localVarResp = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesActiveGetWithHttpInfo(appId, env, clusterName, namespaceName, page, size);
        return localVarResp.getData();
    }

    /**
     * 获取活跃发布（分页）
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases/active
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param page  (required)
     * @param size  (required)
     * @return ApiResponse&lt;List&lt;OpenReleaseDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OpenReleaseDTO>> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesActiveGetWithHttpInfo(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size) throws ApiException {
        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesActiveGetValidateBeforeCall(appId, env, clusterName, namespaceName, page, size, null);
        Type localVarReturnType = new TypeToken<List<OpenReleaseDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取活跃发布（分页） (asynchronously)
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases/active
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param page  (required)
     * @param size  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesActiveGetAsync(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, final ApiCallback<List<OpenReleaseDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesActiveGetValidateBeforeCall(appId, env, clusterName, namespaceName, page, size, _callback);
        Type localVarReturnType = new TypeToken<List<OpenReleaseDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesAllGet
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param page  (required)
     * @param size  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesAllGetCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases/all"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesAllGetValidateBeforeCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesAllGet(Async)");
        }

        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesAllGet(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesAllGet(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesAllGet(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesAllGet(Async)");
        }

        // verify the required parameter 'size' is set
        if (size == null) {
            throw new ApiException("Missing the required parameter 'size' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesAllGet(Async)");
        }

        return openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesAllGetCall(appId, env, clusterName, namespaceName, page, size, _callback);

    }

    /**
     * 获取所有发布（分页）
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases/all
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param page  (required)
     * @param size  (required)
     * @return List&lt;ListReleaseBO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<ListReleaseBO> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesAllGet(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size) throws ApiException {
        ApiResponse<List<ListReleaseBO>> localVarResp = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesAllGetWithHttpInfo(appId, env, clusterName, namespaceName, page, size);
        return localVarResp.getData();
    }

    /**
     * 获取所有发布（分页）
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases/all
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param page  (required)
     * @param size  (required)
     * @return ApiResponse&lt;List&lt;ListReleaseBO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListReleaseBO>> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesAllGetWithHttpInfo(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size) throws ApiException {
        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesAllGetValidateBeforeCall(appId, env, clusterName, namespaceName, page, size, null);
        Type localVarReturnType = new TypeToken<List<ListReleaseBO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取所有发布（分页） (asynchronously)
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases/all
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param page  (required)
     * @param size  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesAllGetAsync(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, final ApiCallback<List<ListReleaseBO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesAllGetValidateBeforeCall(appId, env, clusterName, namespaceName, page, size, _callback);
        Type localVarReturnType = new TypeToken<List<ListReleaseBO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesLatestGet
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取最新活跃发布 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 未找到活跃发布 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesLatestGetCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases/latest"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesLatestGetValidateBeforeCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesLatestGet(Async)");
        }

        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesLatestGet(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesLatestGet(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesLatestGet(Async)");
        }

        return openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesLatestGetCall(appId, env, clusterName, namespaceName, _callback);

    }

    /**
     * 获取最新活跃发布
     * 
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @return OpenReleaseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取最新活跃发布 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 未找到活跃发布 </td><td>  -  </td></tr>
     </table>
     */
    public OpenReleaseDTO openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesLatestGet(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName) throws ApiException {
        ApiResponse<OpenReleaseDTO> localVarResp = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesLatestGetWithHttpInfo(appId, env, clusterName, namespaceName);
        return localVarResp.getData();
    }

    /**
     * 获取最新活跃发布
     * 
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @return ApiResponse&lt;OpenReleaseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取最新活跃发布 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 未找到活跃发布 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenReleaseDTO> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesLatestGetWithHttpInfo(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName) throws ApiException {
        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesLatestGetValidateBeforeCall(appId, env, clusterName, namespaceName, null);
        Type localVarReturnType = new TypeToken<OpenReleaseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取最新活跃发布 (asynchronously)
     * 
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取最新活跃发布 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 未找到活跃发布 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesLatestGetAsync(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, final ApiCallback<OpenReleaseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesLatestGetValidateBeforeCall(appId, env, clusterName, namespaceName, _callback);
        Type localVarReturnType = new TypeToken<OpenReleaseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesPost
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param namespaceReleaseDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 发布创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 发布参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesPostCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull NamespaceReleaseDTO namespaceReleaseDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = namespaceReleaseDTO;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesPostValidateBeforeCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull NamespaceReleaseDTO namespaceReleaseDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesPost(Async)");
        }

        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesPost(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesPost(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesPost(Async)");
        }

        // verify the required parameter 'namespaceReleaseDTO' is set
        if (namespaceReleaseDTO == null) {
            throw new ApiException("Missing the required parameter 'namespaceReleaseDTO' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesPost(Async)");
        }

        return openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesPostCall(appId, env, clusterName, namespaceName, namespaceReleaseDTO, _callback);

    }

    /**
     * 创建发布
     * 
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param namespaceReleaseDTO  (required)
     * @return OpenReleaseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 发布创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 发布参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public OpenReleaseDTO openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesPost(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull NamespaceReleaseDTO namespaceReleaseDTO) throws ApiException {
        ApiResponse<OpenReleaseDTO> localVarResp = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesPostWithHttpInfo(appId, env, clusterName, namespaceName, namespaceReleaseDTO);
        return localVarResp.getData();
    }

    /**
     * 创建发布
     * 
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param namespaceReleaseDTO  (required)
     * @return ApiResponse&lt;OpenReleaseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 发布创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 发布参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenReleaseDTO> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesPostWithHttpInfo(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull NamespaceReleaseDTO namespaceReleaseDTO) throws ApiException {
        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesPostValidateBeforeCall(appId, env, clusterName, namespaceName, namespaceReleaseDTO, null);
        Type localVarReturnType = new TypeToken<OpenReleaseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 创建发布 (asynchronously)
     * 
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param namespaceReleaseDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 发布创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 发布参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesPostAsync(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull NamespaceReleaseDTO namespaceReleaseDTO, final ApiCallback<OpenReleaseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesPostValidateBeforeCall(appId, env, clusterName, namespaceName, namespaceReleaseDTO, _callback);
        Type localVarReturnType = new TypeToken<OpenReleaseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1EnvsEnvReleasesCompareGet
     * @param env  (required)
     * @param baseReleaseId  (required)
     * @param toCompareReleaseId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvReleasesCompareGetCall(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull Integer baseReleaseId, @javax.annotation.Nonnull Integer toCompareReleaseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/releases/compare"
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (baseReleaseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("baseReleaseId", baseReleaseId));
        }

        if (toCompareReleaseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toCompareReleaseId", toCompareReleaseId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1EnvsEnvReleasesCompareGetValidateBeforeCall(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull Integer baseReleaseId, @javax.annotation.Nonnull Integer toCompareReleaseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1EnvsEnvReleasesCompareGet(Async)");
        }

        // verify the required parameter 'baseReleaseId' is set
        if (baseReleaseId == null) {
            throw new ApiException("Missing the required parameter 'baseReleaseId' when calling openapiV1EnvsEnvReleasesCompareGet(Async)");
        }

        // verify the required parameter 'toCompareReleaseId' is set
        if (toCompareReleaseId == null) {
            throw new ApiException("Missing the required parameter 'toCompareReleaseId' when calling openapiV1EnvsEnvReleasesCompareGet(Async)");
        }

        return openapiV1EnvsEnvReleasesCompareGetCall(env, baseReleaseId, toCompareReleaseId, _callback);

    }

    /**
     * 对比发布
     * GET /openapi/v1/envs/{env}/releases/compare
     * @param env  (required)
     * @param baseReleaseId  (required)
     * @param toCompareReleaseId  (required)
     * @return OpenapiV1EnvsEnvReleasesCompareGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public OpenapiV1EnvsEnvReleasesCompareGet200Response openapiV1EnvsEnvReleasesCompareGet(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull Integer baseReleaseId, @javax.annotation.Nonnull Integer toCompareReleaseId) throws ApiException {
        ApiResponse<OpenapiV1EnvsEnvReleasesCompareGet200Response> localVarResp = openapiV1EnvsEnvReleasesCompareGetWithHttpInfo(env, baseReleaseId, toCompareReleaseId);
        return localVarResp.getData();
    }

    /**
     * 对比发布
     * GET /openapi/v1/envs/{env}/releases/compare
     * @param env  (required)
     * @param baseReleaseId  (required)
     * @param toCompareReleaseId  (required)
     * @return ApiResponse&lt;OpenapiV1EnvsEnvReleasesCompareGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenapiV1EnvsEnvReleasesCompareGet200Response> openapiV1EnvsEnvReleasesCompareGetWithHttpInfo(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull Integer baseReleaseId, @javax.annotation.Nonnull Integer toCompareReleaseId) throws ApiException {
        okhttp3.Call localVarCall = openapiV1EnvsEnvReleasesCompareGetValidateBeforeCall(env, baseReleaseId, toCompareReleaseId, null);
        Type localVarReturnType = new TypeToken<OpenapiV1EnvsEnvReleasesCompareGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 对比发布 (asynchronously)
     * GET /openapi/v1/envs/{env}/releases/compare
     * @param env  (required)
     * @param baseReleaseId  (required)
     * @param toCompareReleaseId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvReleasesCompareGetAsync(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull Integer baseReleaseId, @javax.annotation.Nonnull Integer toCompareReleaseId, final ApiCallback<OpenapiV1EnvsEnvReleasesCompareGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1EnvsEnvReleasesCompareGetValidateBeforeCall(env, baseReleaseId, toCompareReleaseId, _callback);
        Type localVarReturnType = new TypeToken<OpenapiV1EnvsEnvReleasesCompareGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1EnvsEnvReleasesReleaseIdGet
     * @param env  (required)
     * @param releaseId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvReleasesReleaseIdGetCall(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull Integer releaseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/releases/{releaseId}"
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "releaseId" + "}", localVarApiClient.escapeString(releaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1EnvsEnvReleasesReleaseIdGetValidateBeforeCall(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull Integer releaseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1EnvsEnvReleasesReleaseIdGet(Async)");
        }

        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling openapiV1EnvsEnvReleasesReleaseIdGet(Async)");
        }

        return openapiV1EnvsEnvReleasesReleaseIdGetCall(env, releaseId, _callback);

    }

    /**
     * 获取发布详情
     * GET /openapi/v1/envs/{env}/releases/{releaseId}
     * @param env  (required)
     * @param releaseId  (required)
     * @return OpenReleaseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public OpenReleaseDTO openapiV1EnvsEnvReleasesReleaseIdGet(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull Integer releaseId) throws ApiException {
        ApiResponse<OpenReleaseDTO> localVarResp = openapiV1EnvsEnvReleasesReleaseIdGetWithHttpInfo(env, releaseId);
        return localVarResp.getData();
    }

    /**
     * 获取发布详情
     * GET /openapi/v1/envs/{env}/releases/{releaseId}
     * @param env  (required)
     * @param releaseId  (required)
     * @return ApiResponse&lt;OpenReleaseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenReleaseDTO> openapiV1EnvsEnvReleasesReleaseIdGetWithHttpInfo(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull Integer releaseId) throws ApiException {
        okhttp3.Call localVarCall = openapiV1EnvsEnvReleasesReleaseIdGetValidateBeforeCall(env, releaseId, null);
        Type localVarReturnType = new TypeToken<OpenReleaseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取发布详情 (asynchronously)
     * GET /openapi/v1/envs/{env}/releases/{releaseId}
     * @param env  (required)
     * @param releaseId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvReleasesReleaseIdGetAsync(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull Integer releaseId, final ApiCallback<OpenReleaseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1EnvsEnvReleasesReleaseIdGetValidateBeforeCall(env, releaseId, _callback);
        Type localVarReturnType = new TypeToken<OpenReleaseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1EnvsEnvReleasesReleaseIdRollbackPut
     * @param env  (required)
     * @param releaseId  (required)
     * @param operator  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvReleasesReleaseIdRollbackPutCall(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull Integer releaseId, @javax.annotation.Nonnull String operator, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/releases/{releaseId}/rollback"
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "releaseId" + "}", localVarApiClient.escapeString(releaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operator", operator));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1EnvsEnvReleasesReleaseIdRollbackPutValidateBeforeCall(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull Integer releaseId, @javax.annotation.Nonnull String operator, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1EnvsEnvReleasesReleaseIdRollbackPut(Async)");
        }

        // verify the required parameter 'releaseId' is set
        if (releaseId == null) {
            throw new ApiException("Missing the required parameter 'releaseId' when calling openapiV1EnvsEnvReleasesReleaseIdRollbackPut(Async)");
        }

        // verify the required parameter 'operator' is set
        if (operator == null) {
            throw new ApiException("Missing the required parameter 'operator' when calling openapiV1EnvsEnvReleasesReleaseIdRollbackPut(Async)");
        }

        return openapiV1EnvsEnvReleasesReleaseIdRollbackPutCall(env, releaseId, operator, _callback);

    }

    /**
     * 回滚发布
     * 
     * @param env  (required)
     * @param releaseId  (required)
     * @param operator  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object openapiV1EnvsEnvReleasesReleaseIdRollbackPut(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull Integer releaseId, @javax.annotation.Nonnull String operator) throws ApiException {
        ApiResponse<Object> localVarResp = openapiV1EnvsEnvReleasesReleaseIdRollbackPutWithHttpInfo(env, releaseId, operator);
        return localVarResp.getData();
    }

    /**
     * 回滚发布
     * 
     * @param env  (required)
     * @param releaseId  (required)
     * @param operator  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> openapiV1EnvsEnvReleasesReleaseIdRollbackPutWithHttpInfo(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull Integer releaseId, @javax.annotation.Nonnull String operator) throws ApiException {
        okhttp3.Call localVarCall = openapiV1EnvsEnvReleasesReleaseIdRollbackPutValidateBeforeCall(env, releaseId, operator, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 回滚发布 (asynchronously)
     * 
     * @param env  (required)
     * @param releaseId  (required)
     * @param operator  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvReleasesReleaseIdRollbackPutAsync(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull Integer releaseId, @javax.annotation.Nonnull String operator, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1EnvsEnvReleasesReleaseIdRollbackPutValidateBeforeCall(env, releaseId, operator, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
