/* tslint:disable */
/* eslint-disable */
/**
 * Apollo OpenAPI
 * Apollo配置中心OpenAPI接口文档  ## 认证方式  所有API接口都需要通过Authorization header进行身份验证。  ### 获取Token的方式：  1. **Portal管理界面获取**：    - 登录Apollo Portal管理界面    - 进入\"管理员工具\" -> \"开放平台授权管理\"    - 创建第三方应用，获取Token  2. **Token格式**：    ```    Authorization: token_value    ```  3. **Token权限**：    - Token具有对应应用的读写权限    - 不同Token可能有不同的环境和命名空间权限    - 建议为不同用途创建不同的Token  ### 使用示例： ```bash curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\      -H \"Authorization: your_token_here\" ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ListItemDiffs,
  NamespaceSyncModel,
  NamespaceTextModel,
  OpenItemDTO,
  OpenPageDTOOpenItemDTO,
  OpenapiV1AppsGet401Response,
  OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost200Response,
  OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost400Response,
} from '../models/index';
import {
    ListItemDiffsFromJSON,
    ListItemDiffsToJSON,
    NamespaceSyncModelFromJSON,
    NamespaceSyncModelToJSON,
    NamespaceTextModelFromJSON,
    NamespaceTextModelToJSON,
    OpenItemDTOFromJSON,
    OpenItemDTOToJSON,
    OpenPageDTOOpenItemDTOFromJSON,
    OpenPageDTOOpenItemDTOToJSON,
    OpenapiV1AppsGet401ResponseFromJSON,
    OpenapiV1AppsGet401ResponseToJSON,
    OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost200ResponseFromJSON,
    OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost200ResponseToJSON,
    OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost400ResponseFromJSON,
    OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost400ResponseToJSON,
} from '../models/index';

export interface OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyDeleteRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    key: string;
    operator: string;
}

export interface OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyGetRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    key: string;
}

export interface OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyPutRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    key: string;
    createIfNotExists: boolean;
    openItemDTO: OpenItemDTO;
}

export interface OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsBatchUpdatePutRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    namespaceTextModel: NamespaceTextModel;
}

export interface OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsComparePostRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    namespaceSyncModel: NamespaceSyncModel;
}

export interface OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsGetRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    page: number;
    size: number;
}

export interface OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyDeleteRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    key: string;
    operator: string;
}

export interface OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyGetRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    key: string;
}

export interface OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyPutRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    key: string;
    createIfNotExists: boolean;
    openItemDTO: OpenItemDTO;
}

export interface OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsPostRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    openItemDTO: OpenItemDTO;
}

export interface OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsRevertPostRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
}

export interface OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsSyncPostRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    namespaceSyncModel: NamespaceSyncModel;
}

export interface OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePostRequest {
    appId: string;
    env: string;
    clusterName: string;
    namespaceName: string;
    namespaceTextModel: NamespaceTextModel;
}

/**
 * 
 */
export class ItemManagementApi extends runtime.BaseAPI {

    /**
     * DELETE /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}
     * 通过编码的key删除配置项
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyDeleteRaw(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyDelete().'
            );
        }

        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyDelete().'
            );
        }

        if (requestParameters['clusterName'] == null) {
            throw new runtime.RequiredError(
                'clusterName',
                'Required parameter "clusterName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyDelete().'
            );
        }

        if (requestParameters['namespaceName'] == null) {
            throw new runtime.RequiredError(
                'namespaceName',
                'Required parameter "namespaceName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyDelete().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyDelete().'
            );
        }

        if (requestParameters['operator'] == null) {
            throw new runtime.RequiredError(
                'operator',
                'Required parameter "operator" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['operator'] != null) {
            queryParameters['operator'] = requestParameters['operator'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters['clusterName'])));
        urlPath = urlPath.replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters['namespaceName'])));
        urlPath = urlPath.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * DELETE /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}
     * 通过编码的key删除配置项
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyDelete(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items?key={key}&encoded={true|false}
     * 通过查询参数获取配置项（支持编码的key）
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyGetRaw(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenItemDTO>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyGet().'
            );
        }

        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyGet().'
            );
        }

        if (requestParameters['clusterName'] == null) {
            throw new runtime.RequiredError(
                'clusterName',
                'Required parameter "clusterName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyGet().'
            );
        }

        if (requestParameters['namespaceName'] == null) {
            throw new runtime.RequiredError(
                'namespaceName',
                'Required parameter "namespaceName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyGet().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters['clusterName'])));
        urlPath = urlPath.replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters['namespaceName'])));
        urlPath = urlPath.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenItemDTOFromJSON(jsonValue));
    }

    /**
     * GET /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items?key={key}&encoded={true|false}
     * 通过查询参数获取配置项（支持编码的key）
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyGet(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenItemDTO> {
        const response = await this.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PUT /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}
     * 通过编码的key更新配置项
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyPutRaw(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenapiV1AppsGet401Response>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyPut().'
            );
        }

        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyPut().'
            );
        }

        if (requestParameters['clusterName'] == null) {
            throw new runtime.RequiredError(
                'clusterName',
                'Required parameter "clusterName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyPut().'
            );
        }

        if (requestParameters['namespaceName'] == null) {
            throw new runtime.RequiredError(
                'namespaceName',
                'Required parameter "namespaceName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyPut().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyPut().'
            );
        }

        if (requestParameters['createIfNotExists'] == null) {
            throw new runtime.RequiredError(
                'createIfNotExists',
                'Required parameter "createIfNotExists" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyPut().'
            );
        }

        if (requestParameters['openItemDTO'] == null) {
            throw new runtime.RequiredError(
                'openItemDTO',
                'Required parameter "openItemDTO" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyPut().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['createIfNotExists'] != null) {
            queryParameters['createIfNotExists'] = requestParameters['createIfNotExists'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters['clusterName'])));
        urlPath = urlPath.replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters['namespaceName'])));
        urlPath = urlPath.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OpenItemDTOToJSON(requestParameters['openItemDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenapiV1AppsGet401ResponseFromJSON(jsonValue));
    }

    /**
     * PUT /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}
     * 通过编码的key更新配置项
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyPut(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenapiV1AppsGet401Response> {
        const response = await this.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PUT /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:batchUpdate
     * 通过文本批量修改配置项
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsBatchUpdatePutRaw(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsBatchUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenapiV1AppsGet401Response>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsBatchUpdatePut().'
            );
        }

        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsBatchUpdatePut().'
            );
        }

        if (requestParameters['clusterName'] == null) {
            throw new runtime.RequiredError(
                'clusterName',
                'Required parameter "clusterName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsBatchUpdatePut().'
            );
        }

        if (requestParameters['namespaceName'] == null) {
            throw new runtime.RequiredError(
                'namespaceName',
                'Required parameter "namespaceName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsBatchUpdatePut().'
            );
        }

        if (requestParameters['namespaceTextModel'] == null) {
            throw new runtime.RequiredError(
                'namespaceTextModel',
                'Required parameter "namespaceTextModel" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsBatchUpdatePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:batchUpdate`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters['clusterName'])));
        urlPath = urlPath.replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters['namespaceName'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NamespaceTextModelToJSON(requestParameters['namespaceTextModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenapiV1AppsGet401ResponseFromJSON(jsonValue));
    }

    /**
     * PUT /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:batchUpdate
     * 通过文本批量修改配置项
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsBatchUpdatePut(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsBatchUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenapiV1AppsGet401Response> {
        const response = await this.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsBatchUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:compare
     * 对比命名空间配置差异
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsComparePostRaw(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsComparePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ListItemDiffs>>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsComparePost().'
            );
        }

        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsComparePost().'
            );
        }

        if (requestParameters['clusterName'] == null) {
            throw new runtime.RequiredError(
                'clusterName',
                'Required parameter "clusterName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsComparePost().'
            );
        }

        if (requestParameters['namespaceName'] == null) {
            throw new runtime.RequiredError(
                'namespaceName',
                'Required parameter "namespaceName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsComparePost().'
            );
        }

        if (requestParameters['namespaceSyncModel'] == null) {
            throw new runtime.RequiredError(
                'namespaceSyncModel',
                'Required parameter "namespaceSyncModel" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsComparePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:compare`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters['clusterName'])));
        urlPath = urlPath.replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters['namespaceName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NamespaceSyncModelToJSON(requestParameters['namespaceSyncModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ListItemDiffsFromJSON));
    }

    /**
     * POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:compare
     * 对比命名空间配置差异
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsComparePost(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsComparePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ListItemDiffs>> {
        const response = await this.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsComparePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 获取命名空间下的配置项列表
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsGetRaw(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenPageDTOOpenItemDTO>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsGet().'
            );
        }

        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsGet().'
            );
        }

        if (requestParameters['clusterName'] == null) {
            throw new runtime.RequiredError(
                'clusterName',
                'Required parameter "clusterName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsGet().'
            );
        }

        if (requestParameters['namespaceName'] == null) {
            throw new runtime.RequiredError(
                'namespaceName',
                'Required parameter "namespaceName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsGet().'
            );
        }

        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsGet().'
            );
        }

        if (requestParameters['size'] == null) {
            throw new runtime.RequiredError(
                'size',
                'Required parameter "size" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters['clusterName'])));
        urlPath = urlPath.replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters['namespaceName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenPageDTOOpenItemDTOFromJSON(jsonValue));
    }

    /**
     * 
     * 获取命名空间下的配置项列表
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsGet(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenPageDTOOpenItemDTO> {
        const response = await this.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DELETE /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}
     * 删除配置项
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyDeleteRaw(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyDelete().'
            );
        }

        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyDelete().'
            );
        }

        if (requestParameters['clusterName'] == null) {
            throw new runtime.RequiredError(
                'clusterName',
                'Required parameter "clusterName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyDelete().'
            );
        }

        if (requestParameters['namespaceName'] == null) {
            throw new runtime.RequiredError(
                'namespaceName',
                'Required parameter "namespaceName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyDelete().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyDelete().'
            );
        }

        if (requestParameters['operator'] == null) {
            throw new runtime.RequiredError(
                'operator',
                'Required parameter "operator" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['operator'] != null) {
            queryParameters['operator'] = requestParameters['operator'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters['clusterName'])));
        urlPath = urlPath.replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters['namespaceName'])));
        urlPath = urlPath.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * DELETE /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}
     * 删除配置项
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyDelete(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GET /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}
     * 获取单个配置项
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyGetRaw(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenItemDTO>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyGet().'
            );
        }

        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyGet().'
            );
        }

        if (requestParameters['clusterName'] == null) {
            throw new runtime.RequiredError(
                'clusterName',
                'Required parameter "clusterName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyGet().'
            );
        }

        if (requestParameters['namespaceName'] == null) {
            throw new runtime.RequiredError(
                'namespaceName',
                'Required parameter "namespaceName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyGet().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters['clusterName'])));
        urlPath = urlPath.replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters['namespaceName'])));
        urlPath = urlPath.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenItemDTOFromJSON(jsonValue));
    }

    /**
     * GET /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}
     * 获取单个配置项
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyGet(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenItemDTO> {
        const response = await this.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PUT /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}
     * 更新配置项
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyPutRaw(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenapiV1AppsGet401Response>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyPut().'
            );
        }

        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyPut().'
            );
        }

        if (requestParameters['clusterName'] == null) {
            throw new runtime.RequiredError(
                'clusterName',
                'Required parameter "clusterName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyPut().'
            );
        }

        if (requestParameters['namespaceName'] == null) {
            throw new runtime.RequiredError(
                'namespaceName',
                'Required parameter "namespaceName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyPut().'
            );
        }

        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyPut().'
            );
        }

        if (requestParameters['createIfNotExists'] == null) {
            throw new runtime.RequiredError(
                'createIfNotExists',
                'Required parameter "createIfNotExists" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyPut().'
            );
        }

        if (requestParameters['openItemDTO'] == null) {
            throw new runtime.RequiredError(
                'openItemDTO',
                'Required parameter "openItemDTO" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyPut().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['createIfNotExists'] != null) {
            queryParameters['createIfNotExists'] = requestParameters['createIfNotExists'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters['clusterName'])));
        urlPath = urlPath.replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters['namespaceName'])));
        urlPath = urlPath.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OpenItemDTOToJSON(requestParameters['openItemDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenapiV1AppsGet401ResponseFromJSON(jsonValue));
    }

    /**
     * PUT /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}
     * 更新配置项
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyPut(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenapiV1AppsGet401Response> {
        const response = await this.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items
     * 创建新的配置项
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsPostRaw(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenItemDTO>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsPost().'
            );
        }

        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsPost().'
            );
        }

        if (requestParameters['clusterName'] == null) {
            throw new runtime.RequiredError(
                'clusterName',
                'Required parameter "clusterName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsPost().'
            );
        }

        if (requestParameters['namespaceName'] == null) {
            throw new runtime.RequiredError(
                'namespaceName',
                'Required parameter "namespaceName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsPost().'
            );
        }

        if (requestParameters['openItemDTO'] == null) {
            throw new runtime.RequiredError(
                'openItemDTO',
                'Required parameter "openItemDTO" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters['clusterName'])));
        urlPath = urlPath.replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters['namespaceName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OpenItemDTOToJSON(requestParameters['openItemDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenItemDTOFromJSON(jsonValue));
    }

    /**
     * POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items
     * 创建新的配置项
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsPost(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenItemDTO> {
        const response = await this.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:revert
     * 撤销配置项更改
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsRevertPostRaw(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsRevertPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenapiV1AppsGet401Response>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsRevertPost().'
            );
        }

        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsRevertPost().'
            );
        }

        if (requestParameters['clusterName'] == null) {
            throw new runtime.RequiredError(
                'clusterName',
                'Required parameter "clusterName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsRevertPost().'
            );
        }

        if (requestParameters['namespaceName'] == null) {
            throw new runtime.RequiredError(
                'namespaceName',
                'Required parameter "namespaceName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsRevertPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:revert`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters['clusterName'])));
        urlPath = urlPath.replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters['namespaceName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenapiV1AppsGet401ResponseFromJSON(jsonValue));
    }

    /**
     * POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:revert
     * 撤销配置项更改
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsRevertPost(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsRevertPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenapiV1AppsGet401Response> {
        const response = await this.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsRevertPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:sync
     * 同步配置项到多个命名空间
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsSyncPostRaw(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsSyncPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenapiV1AppsGet401Response>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsSyncPost().'
            );
        }

        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsSyncPost().'
            );
        }

        if (requestParameters['clusterName'] == null) {
            throw new runtime.RequiredError(
                'clusterName',
                'Required parameter "clusterName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsSyncPost().'
            );
        }

        if (requestParameters['namespaceName'] == null) {
            throw new runtime.RequiredError(
                'namespaceName',
                'Required parameter "namespaceName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsSyncPost().'
            );
        }

        if (requestParameters['namespaceSyncModel'] == null) {
            throw new runtime.RequiredError(
                'namespaceSyncModel',
                'Required parameter "namespaceSyncModel" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsSyncPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:sync`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters['clusterName'])));
        urlPath = urlPath.replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters['namespaceName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NamespaceSyncModelToJSON(requestParameters['namespaceSyncModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenapiV1AppsGet401ResponseFromJSON(jsonValue));
    }

    /**
     * POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:sync
     * 同步配置项到多个命名空间
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsSyncPost(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsSyncPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenapiV1AppsGet401Response> {
        const response = await this.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsSyncPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:validate
     * 验证配置文本语法
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePostRaw(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost200Response>> {
        if (requestParameters['appId'] == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost().'
            );
        }

        if (requestParameters['env'] == null) {
            throw new runtime.RequiredError(
                'env',
                'Required parameter "env" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost().'
            );
        }

        if (requestParameters['clusterName'] == null) {
            throw new runtime.RequiredError(
                'clusterName',
                'Required parameter "clusterName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost().'
            );
        }

        if (requestParameters['namespaceName'] == null) {
            throw new runtime.RequiredError(
                'namespaceName',
                'Required parameter "namespaceName" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost().'
            );
        }

        if (requestParameters['namespaceTextModel'] == null) {
            throw new runtime.RequiredError(
                'namespaceTextModel',
                'Required parameter "namespaceTextModel" was null or undefined when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:validate`;
        urlPath = urlPath.replace(`{${"appId"}}`, encodeURIComponent(String(requestParameters['appId'])));
        urlPath = urlPath.replace(`{${"env"}}`, encodeURIComponent(String(requestParameters['env'])));
        urlPath = urlPath.replace(`{${"clusterName"}}`, encodeURIComponent(String(requestParameters['clusterName'])));
        urlPath = urlPath.replace(`{${"namespaceName"}}`, encodeURIComponent(String(requestParameters['namespaceName'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NamespaceTextModelToJSON(requestParameters['namespaceTextModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost200ResponseFromJSON(jsonValue));
    }

    /**
     * POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:validate
     * 验证配置文本语法
     */
    async openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost(requestParameters: OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost200Response> {
        const response = await this.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
