/*
 * Apollo OpenAPI
 * Apollo配置中心OpenAPI接口文档  ## 认证方式  所有API接口都需要通过Authorization header进行身份验证。  ### 获取Token的方式：  1. **Portal管理界面获取**：    - 登录Apollo Portal管理界面    - 进入\"管理员工具\" -> \"开放平台授权管理\"    - 创建第三方应用，获取Token  2. **Token格式**：    ```    Authorization: token_value    ```  3. **Token权限**：    - Token具有对应应用的读写权限    - 不同Token可能有不同的环境和命名空间权限    - 建议为不同用途创建不同的Token  ### 使用示例： ```bash curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\      -H \"Authorization: your_token_here\" ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ListItemDiffs;
import org.openapitools.client.model.NamespaceSyncModel;
import org.openapitools.client.model.NamespaceTextModel;
import org.openapitools.client.model.OpenItemDTO;
import org.openapitools.client.model.OpenPageDTOOpenItemDTO;
import org.openapitools.client.model.OpenapiV1AppsGet401Response;
import org.openapitools.client.model.OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost200Response;
import org.openapitools.client.model.OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost400Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ItemManagementApi
 */
@Disabled
public class ItemManagementApiTest {

    private final ItemManagementApi api = new ItemManagementApi();

    /**
     * 通过编码的key删除配置项
     *
     * DELETE /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyDeleteTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        String key = null;
        String operator = null;
        Object response = api.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyDelete(appId, env, clusterName, namespaceName, key, operator);
        // TODO: test validations
    }

    /**
     * 通过查询参数获取配置项（支持编码的key）
     *
     * GET /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items?key&#x3D;{key}&amp;encoded&#x3D;{true|false}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyGetTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        String key = null;
        OpenItemDTO response = api.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyGet(appId, env, clusterName, namespaceName, key);
        // TODO: test validations
    }

    /**
     * 通过编码的key更新配置项
     *
     * PUT /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyPutTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        String key = null;
        Boolean createIfNotExists = null;
        OpenItemDTO openItemDTO = null;
        OpenapiV1AppsGet401Response response = api.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyPut(appId, env, clusterName, namespaceName, key, createIfNotExists, openItemDTO);
        // TODO: test validations
    }

    /**
     * 通过文本批量修改配置项
     *
     * PUT /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:batchUpdate
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsBatchUpdatePutTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        NamespaceTextModel namespaceTextModel = null;
        OpenapiV1AppsGet401Response response = api.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsBatchUpdatePut(appId, env, clusterName, namespaceName, namespaceTextModel);
        // TODO: test validations
    }

    /**
     * 对比命名空间配置差异
     *
     * POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:compare
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsComparePostTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        NamespaceSyncModel namespaceSyncModel = null;
        List<ListItemDiffs> response = api.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsComparePost(appId, env, clusterName, namespaceName, namespaceSyncModel);
        // TODO: test validations
    }

    /**
     * 获取命名空间下的配置项列表
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsGetTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        Integer page = null;
        Integer size = null;
        OpenPageDTOOpenItemDTO response = api.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsGet(appId, env, clusterName, namespaceName, page, size);
        // TODO: test validations
    }

    /**
     * 删除配置项
     *
     * DELETE /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyDeleteTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        String key = null;
        String operator = null;
        Object response = api.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyDelete(appId, env, clusterName, namespaceName, key, operator);
        // TODO: test validations
    }

    /**
     * 获取单个配置项
     *
     * GET /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyGetTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        String key = null;
        OpenItemDTO response = api.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyGet(appId, env, clusterName, namespaceName, key);
        // TODO: test validations
    }

    /**
     * 更新配置项
     *
     * PUT /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyPutTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        String key = null;
        Boolean createIfNotExists = null;
        OpenItemDTO openItemDTO = null;
        OpenapiV1AppsGet401Response response = api.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyPut(appId, env, clusterName, namespaceName, key, createIfNotExists, openItemDTO);
        // TODO: test validations
    }

    /**
     * 创建新的配置项
     *
     * POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsPostTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        OpenItemDTO openItemDTO = null;
        OpenItemDTO response = api.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsPost(appId, env, clusterName, namespaceName, openItemDTO);
        // TODO: test validations
    }

    /**
     * 撤销配置项更改
     *
     * POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:revert
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsRevertPostTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        OpenapiV1AppsGet401Response response = api.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsRevertPost(appId, env, clusterName, namespaceName);
        // TODO: test validations
    }

    /**
     * 同步配置项到多个命名空间
     *
     * POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:sync
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsSyncPostTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        NamespaceSyncModel namespaceSyncModel = null;
        OpenapiV1AppsGet401Response response = api.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsSyncPost(appId, env, clusterName, namespaceName, namespaceSyncModel);
        // TODO: test validations
    }

    /**
     * 验证配置文本语法
     *
     * POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:validate
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePostTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        NamespaceTextModel namespaceTextModel = null;
        OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost200Response response = api.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost(appId, env, clusterName, namespaceName, namespaceTextModel);
        // TODO: test validations
    }

}
