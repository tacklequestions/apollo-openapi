/*
 * Apollo OpenAPI
 * Apollo配置中心OpenAPI接口文档  ## 认证方式  所有API接口都需要通过Authorization header进行身份验证。  ### 获取Token的方式：  1. **Portal管理界面获取**：    - 登录Apollo Portal管理界面    - 进入\"管理员工具\" -> \"开放平台授权管理\"    - 创建第三方应用，获取Token  2. **Token格式**：    ```    Authorization: token_value    ```  3. **Token权限**：    - Token具有对应应用的读写权限    - 不同Token可能有不同的环境和命名空间权限    - 建议为不同用途创建不同的Token  ### 使用示例： ```bash curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\      -H \"Authorization: your_token_here\" ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ListReleaseBO;
import org.openapitools.client.model.NamespaceReleaseDTO;
import org.openapitools.client.model.OpenReleaseDTO;
import org.openapitools.client.model.OpenapiV1AppsGet401Response;
import org.openapitools.client.model.OpenapiV1EnvsEnvReleasesCompareGet200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReleaseManagementApi
 */
@Disabled
public class ReleaseManagementApiTest {

    private final ReleaseManagementApi api = new ReleaseManagementApi();

    /**
     * 获取活跃发布（分页）
     *
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases/active
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesActiveGetTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        Integer page = null;
        Integer size = null;
        List<OpenReleaseDTO> response = api.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesActiveGet(appId, env, clusterName, namespaceName, page, size);
        // TODO: test validations
    }

    /**
     * 获取所有发布（分页）
     *
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/releases/all
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesAllGetTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        Integer page = null;
        Integer size = null;
        List<ListReleaseBO> response = api.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesAllGet(appId, env, clusterName, namespaceName, page, size);
        // TODO: test validations
    }

    /**
     * 获取最新活跃发布
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesLatestGetTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        OpenReleaseDTO response = api.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesLatestGet(appId, env, clusterName, namespaceName);
        // TODO: test validations
    }

    /**
     * 创建发布
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesPostTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        NamespaceReleaseDTO namespaceReleaseDTO = null;
        OpenReleaseDTO response = api.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameReleasesPost(appId, env, clusterName, namespaceName, namespaceReleaseDTO);
        // TODO: test validations
    }

    /**
     * 对比发布
     *
     * GET /openapi/v1/envs/{env}/releases/compare
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1EnvsEnvReleasesCompareGetTest() throws ApiException {
        String env = null;
        Integer baseReleaseId = null;
        Integer toCompareReleaseId = null;
        OpenapiV1EnvsEnvReleasesCompareGet200Response response = api.openapiV1EnvsEnvReleasesCompareGet(env, baseReleaseId, toCompareReleaseId);
        // TODO: test validations
    }

    /**
     * 获取发布详情
     *
     * GET /openapi/v1/envs/{env}/releases/{releaseId}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1EnvsEnvReleasesReleaseIdGetTest() throws ApiException {
        String env = null;
        Integer releaseId = null;
        OpenReleaseDTO response = api.openapiV1EnvsEnvReleasesReleaseIdGet(env, releaseId);
        // TODO: test validations
    }

    /**
     * 回滚发布
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1EnvsEnvReleasesReleaseIdRollbackPutTest() throws ApiException {
        String env = null;
        Integer releaseId = null;
        String operator = null;
        Object response = api.openapiV1EnvsEnvReleasesReleaseIdRollbackPut(env, releaseId, operator);
        // TODO: test validations
    }

}
