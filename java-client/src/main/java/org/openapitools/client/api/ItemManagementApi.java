/*
 * Apollo OpenAPI
 * Apollo配置中心OpenAPI接口文档  ## 认证方式  所有API接口都需要通过Authorization header进行身份验证。  ### 获取Token的方式：  1. **Portal管理界面获取**：    - 登录Apollo Portal管理界面    - 进入\"管理员工具\" -> \"开放平台授权管理\"    - 创建第三方应用，获取Token  2. **Token格式**：    ```    Authorization: token_value    ```  3. **Token权限**：    - Token具有对应应用的读写权限    - 不同Token可能有不同的环境和命名空间权限    - 建议为不同用途创建不同的Token  ### 使用示例： ```bash curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\      -H \"Authorization: your_token_here\" ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListItemDiffs;
import org.openapitools.client.model.NamespaceSyncModel;
import org.openapitools.client.model.NamespaceTextModel;
import org.openapitools.client.model.OpenItemDTO;
import org.openapitools.client.model.OpenPageDTOOpenItemDTO;
import org.openapitools.client.model.OpenapiV1AppsGet401Response;
import org.openapitools.client.model.OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost200Response;
import org.openapitools.client.model.OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost400Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ItemManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ItemManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ItemManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyDelete
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param key  (required)
     * @param operator  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyDeleteCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String key, @javax.annotation.Nonnull String operator, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operator", operator));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyDeleteValidateBeforeCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String key, @javax.annotation.Nonnull String operator, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyDelete(Async)");
        }

        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyDelete(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyDelete(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyDelete(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyDelete(Async)");
        }

        // verify the required parameter 'operator' is set
        if (operator == null) {
            throw new ApiException("Missing the required parameter 'operator' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyDelete(Async)");
        }

        return openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyDeleteCall(appId, env, clusterName, namespaceName, key, operator, _callback);

    }

    /**
     * 通过编码的key删除配置项
     * DELETE /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param key  (required)
     * @param operator  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyDelete(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String key, @javax.annotation.Nonnull String operator) throws ApiException {
        ApiResponse<Object> localVarResp = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyDeleteWithHttpInfo(appId, env, clusterName, namespaceName, key, operator);
        return localVarResp.getData();
    }

    /**
     * 通过编码的key删除配置项
     * DELETE /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param key  (required)
     * @param operator  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyDeleteWithHttpInfo(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String key, @javax.annotation.Nonnull String operator) throws ApiException {
        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyDeleteValidateBeforeCall(appId, env, clusterName, namespaceName, key, operator, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 通过编码的key删除配置项 (asynchronously)
     * DELETE /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param key  (required)
     * @param operator  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyDeleteAsync(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String key, @javax.annotation.Nonnull String operator, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyDeleteValidateBeforeCall(appId, env, clusterName, namespaceName, key, operator, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyGet
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param key  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取配置项（支持编码key） </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 配置项不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyGetCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyGetValidateBeforeCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyGet(Async)");
        }

        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyGet(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyGet(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyGet(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyGet(Async)");
        }

        return openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyGetCall(appId, env, clusterName, namespaceName, key, _callback);

    }

    /**
     * 通过查询参数获取配置项（支持编码的key）
     * GET /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items?key&#x3D;{key}&amp;encoded&#x3D;{true|false}
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param key  (required)
     * @return OpenItemDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取配置项（支持编码key） </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 配置项不存在 </td><td>  -  </td></tr>
     </table>
     */
    public OpenItemDTO openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyGet(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String key) throws ApiException {
        ApiResponse<OpenItemDTO> localVarResp = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyGetWithHttpInfo(appId, env, clusterName, namespaceName, key);
        return localVarResp.getData();
    }

    /**
     * 通过查询参数获取配置项（支持编码的key）
     * GET /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items?key&#x3D;{key}&amp;encoded&#x3D;{true|false}
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param key  (required)
     * @return ApiResponse&lt;OpenItemDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取配置项（支持编码key） </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 配置项不存在 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenItemDTO> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyGetWithHttpInfo(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String key) throws ApiException {
        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyGetValidateBeforeCall(appId, env, clusterName, namespaceName, key, null);
        Type localVarReturnType = new TypeToken<OpenItemDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 通过查询参数获取配置项（支持编码的key） (asynchronously)
     * GET /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items?key&#x3D;{key}&amp;encoded&#x3D;{true|false}
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param key  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取配置项（支持编码key） </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 配置项不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyGetAsync(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String key, final ApiCallback<OpenItemDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyGetValidateBeforeCall(appId, env, clusterName, namespaceName, key, _callback);
        Type localVarReturnType = new TypeToken<OpenItemDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyPut
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param key  (required)
     * @param createIfNotExists  (required)
     * @param openItemDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 配置项更新成功（编码key） </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 配置项不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyPutCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String key, @javax.annotation.Nonnull Boolean createIfNotExists, @javax.annotation.Nonnull OpenItemDTO openItemDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = openItemDTO;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (createIfNotExists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createIfNotExists", createIfNotExists));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyPutValidateBeforeCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String key, @javax.annotation.Nonnull Boolean createIfNotExists, @javax.annotation.Nonnull OpenItemDTO openItemDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyPut(Async)");
        }

        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyPut(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyPut(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyPut(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyPut(Async)");
        }

        // verify the required parameter 'createIfNotExists' is set
        if (createIfNotExists == null) {
            throw new ApiException("Missing the required parameter 'createIfNotExists' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyPut(Async)");
        }

        // verify the required parameter 'openItemDTO' is set
        if (openItemDTO == null) {
            throw new ApiException("Missing the required parameter 'openItemDTO' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyPut(Async)");
        }

        return openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyPutCall(appId, env, clusterName, namespaceName, key, createIfNotExists, openItemDTO, _callback);

    }

    /**
     * 通过编码的key更新配置项
     * PUT /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param key  (required)
     * @param createIfNotExists  (required)
     * @param openItemDTO  (required)
     * @return OpenapiV1AppsGet401Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 配置项更新成功（编码key） </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 配置项不存在 </td><td>  -  </td></tr>
     </table>
     */
    public OpenapiV1AppsGet401Response openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyPut(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String key, @javax.annotation.Nonnull Boolean createIfNotExists, @javax.annotation.Nonnull OpenItemDTO openItemDTO) throws ApiException {
        ApiResponse<OpenapiV1AppsGet401Response> localVarResp = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyPutWithHttpInfo(appId, env, clusterName, namespaceName, key, createIfNotExists, openItemDTO);
        return localVarResp.getData();
    }

    /**
     * 通过编码的key更新配置项
     * PUT /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param key  (required)
     * @param createIfNotExists  (required)
     * @param openItemDTO  (required)
     * @return ApiResponse&lt;OpenapiV1AppsGet401Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 配置项更新成功（编码key） </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 配置项不存在 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenapiV1AppsGet401Response> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyPutWithHttpInfo(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String key, @javax.annotation.Nonnull Boolean createIfNotExists, @javax.annotation.Nonnull OpenItemDTO openItemDTO) throws ApiException {
        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyPutValidateBeforeCall(appId, env, clusterName, namespaceName, key, createIfNotExists, openItemDTO, null);
        Type localVarReturnType = new TypeToken<OpenapiV1AppsGet401Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 通过编码的key更新配置项 (asynchronously)
     * PUT /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/encodedItems/{key}
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param key  (required)
     * @param createIfNotExists  (required)
     * @param openItemDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 配置项更新成功（编码key） </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 配置项不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyPutAsync(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String key, @javax.annotation.Nonnull Boolean createIfNotExists, @javax.annotation.Nonnull OpenItemDTO openItemDTO, final ApiCallback<OpenapiV1AppsGet401Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameEncodedItemsKeyPutValidateBeforeCall(appId, env, clusterName, namespaceName, key, createIfNotExists, openItemDTO, _callback);
        Type localVarReturnType = new TypeToken<OpenapiV1AppsGet401Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsBatchUpdatePut
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param namespaceTextModel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 批量更新配置项成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsBatchUpdatePutCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull NamespaceTextModel namespaceTextModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = namespaceTextModel;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:batchUpdate"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsBatchUpdatePutValidateBeforeCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull NamespaceTextModel namespaceTextModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsBatchUpdatePut(Async)");
        }

        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsBatchUpdatePut(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsBatchUpdatePut(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsBatchUpdatePut(Async)");
        }

        // verify the required parameter 'namespaceTextModel' is set
        if (namespaceTextModel == null) {
            throw new ApiException("Missing the required parameter 'namespaceTextModel' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsBatchUpdatePut(Async)");
        }

        return openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsBatchUpdatePutCall(appId, env, clusterName, namespaceName, namespaceTextModel, _callback);

    }

    /**
     * 通过文本批量修改配置项
     * PUT /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:batchUpdate
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param namespaceTextModel  (required)
     * @return OpenapiV1AppsGet401Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 批量更新配置项成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public OpenapiV1AppsGet401Response openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsBatchUpdatePut(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull NamespaceTextModel namespaceTextModel) throws ApiException {
        ApiResponse<OpenapiV1AppsGet401Response> localVarResp = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsBatchUpdatePutWithHttpInfo(appId, env, clusterName, namespaceName, namespaceTextModel);
        return localVarResp.getData();
    }

    /**
     * 通过文本批量修改配置项
     * PUT /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:batchUpdate
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param namespaceTextModel  (required)
     * @return ApiResponse&lt;OpenapiV1AppsGet401Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 批量更新配置项成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenapiV1AppsGet401Response> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsBatchUpdatePutWithHttpInfo(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull NamespaceTextModel namespaceTextModel) throws ApiException {
        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsBatchUpdatePutValidateBeforeCall(appId, env, clusterName, namespaceName, namespaceTextModel, null);
        Type localVarReturnType = new TypeToken<OpenapiV1AppsGet401Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 通过文本批量修改配置项 (asynchronously)
     * PUT /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:batchUpdate
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param namespaceTextModel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 批量更新配置项成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsBatchUpdatePutAsync(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull NamespaceTextModel namespaceTextModel, final ApiCallback<OpenapiV1AppsGet401Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsBatchUpdatePutValidateBeforeCall(appId, env, clusterName, namespaceName, namespaceTextModel, _callback);
        Type localVarReturnType = new TypeToken<OpenapiV1AppsGet401Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsComparePost
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param namespaceSyncModel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功对比命名空间配置差异 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsComparePostCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull NamespaceSyncModel namespaceSyncModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = namespaceSyncModel;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:compare"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsComparePostValidateBeforeCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull NamespaceSyncModel namespaceSyncModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsComparePost(Async)");
        }

        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsComparePost(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsComparePost(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsComparePost(Async)");
        }

        // verify the required parameter 'namespaceSyncModel' is set
        if (namespaceSyncModel == null) {
            throw new ApiException("Missing the required parameter 'namespaceSyncModel' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsComparePost(Async)");
        }

        return openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsComparePostCall(appId, env, clusterName, namespaceName, namespaceSyncModel, _callback);

    }

    /**
     * 对比命名空间配置差异
     * POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:compare
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param namespaceSyncModel  (required)
     * @return List&lt;ListItemDiffs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功对比命名空间配置差异 </td><td>  -  </td></tr>
     </table>
     */
    public List<ListItemDiffs> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsComparePost(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull NamespaceSyncModel namespaceSyncModel) throws ApiException {
        ApiResponse<List<ListItemDiffs>> localVarResp = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsComparePostWithHttpInfo(appId, env, clusterName, namespaceName, namespaceSyncModel);
        return localVarResp.getData();
    }

    /**
     * 对比命名空间配置差异
     * POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:compare
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param namespaceSyncModel  (required)
     * @return ApiResponse&lt;List&lt;ListItemDiffs&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功对比命名空间配置差异 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListItemDiffs>> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsComparePostWithHttpInfo(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull NamespaceSyncModel namespaceSyncModel) throws ApiException {
        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsComparePostValidateBeforeCall(appId, env, clusterName, namespaceName, namespaceSyncModel, null);
        Type localVarReturnType = new TypeToken<List<ListItemDiffs>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 对比命名空间配置差异 (asynchronously)
     * POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:compare
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param namespaceSyncModel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功对比命名空间配置差异 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsComparePostAsync(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull NamespaceSyncModel namespaceSyncModel, final ApiCallback<List<ListItemDiffs>> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsComparePostValidateBeforeCall(appId, env, clusterName, namespaceName, namespaceSyncModel, _callback);
        Type localVarReturnType = new TypeToken<List<ListItemDiffs>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsGet
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param page  (required)
     * @param size  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取配置项列表 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 命名空间不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsGetCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsGetValidateBeforeCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsGet(Async)");
        }

        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsGet(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsGet(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsGet(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsGet(Async)");
        }

        // verify the required parameter 'size' is set
        if (size == null) {
            throw new ApiException("Missing the required parameter 'size' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsGet(Async)");
        }

        return openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsGetCall(appId, env, clusterName, namespaceName, page, size, _callback);

    }

    /**
     * 获取命名空间下的配置项列表
     * 
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param page  (required)
     * @param size  (required)
     * @return OpenPageDTOOpenItemDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取配置项列表 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 命名空间不存在 </td><td>  -  </td></tr>
     </table>
     */
    public OpenPageDTOOpenItemDTO openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsGet(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size) throws ApiException {
        ApiResponse<OpenPageDTOOpenItemDTO> localVarResp = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsGetWithHttpInfo(appId, env, clusterName, namespaceName, page, size);
        return localVarResp.getData();
    }

    /**
     * 获取命名空间下的配置项列表
     * 
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param page  (required)
     * @param size  (required)
     * @return ApiResponse&lt;OpenPageDTOOpenItemDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取配置项列表 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 命名空间不存在 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenPageDTOOpenItemDTO> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsGetWithHttpInfo(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size) throws ApiException {
        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsGetValidateBeforeCall(appId, env, clusterName, namespaceName, page, size, null);
        Type localVarReturnType = new TypeToken<OpenPageDTOOpenItemDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取命名空间下的配置项列表 (asynchronously)
     * 
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param page  (required)
     * @param size  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取配置项列表 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 命名空间不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsGetAsync(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, final ApiCallback<OpenPageDTOOpenItemDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsGetValidateBeforeCall(appId, env, clusterName, namespaceName, page, size, _callback);
        Type localVarReturnType = new TypeToken<OpenPageDTOOpenItemDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyDelete
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param key  (required)
     * @param operator  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyDeleteCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String key, @javax.annotation.Nonnull String operator, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operator", operator));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyDeleteValidateBeforeCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String key, @javax.annotation.Nonnull String operator, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyDelete(Async)");
        }

        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyDelete(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyDelete(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyDelete(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyDelete(Async)");
        }

        // verify the required parameter 'operator' is set
        if (operator == null) {
            throw new ApiException("Missing the required parameter 'operator' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyDelete(Async)");
        }

        return openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyDeleteCall(appId, env, clusterName, namespaceName, key, operator, _callback);

    }

    /**
     * 删除配置项
     * DELETE /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param key  (required)
     * @param operator  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Object openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyDelete(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String key, @javax.annotation.Nonnull String operator) throws ApiException {
        ApiResponse<Object> localVarResp = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyDeleteWithHttpInfo(appId, env, clusterName, namespaceName, key, operator);
        return localVarResp.getData();
    }

    /**
     * 删除配置项
     * DELETE /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param key  (required)
     * @param operator  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyDeleteWithHttpInfo(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String key, @javax.annotation.Nonnull String operator) throws ApiException {
        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyDeleteValidateBeforeCall(appId, env, clusterName, namespaceName, key, operator, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 删除配置项 (asynchronously)
     * DELETE /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param key  (required)
     * @param operator  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyDeleteAsync(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String key, @javax.annotation.Nonnull String operator, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyDeleteValidateBeforeCall(appId, env, clusterName, namespaceName, key, operator, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyGet
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param key  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取配置项 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 配置项不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyGetCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyGetValidateBeforeCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyGet(Async)");
        }

        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyGet(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyGet(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyGet(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyGet(Async)");
        }

        return openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyGetCall(appId, env, clusterName, namespaceName, key, _callback);

    }

    /**
     * 获取单个配置项
     * GET /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param key  (required)
     * @return OpenItemDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取配置项 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 配置项不存在 </td><td>  -  </td></tr>
     </table>
     */
    public OpenItemDTO openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyGet(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String key) throws ApiException {
        ApiResponse<OpenItemDTO> localVarResp = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyGetWithHttpInfo(appId, env, clusterName, namespaceName, key);
        return localVarResp.getData();
    }

    /**
     * 获取单个配置项
     * GET /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param key  (required)
     * @return ApiResponse&lt;OpenItemDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取配置项 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 配置项不存在 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenItemDTO> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyGetWithHttpInfo(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String key) throws ApiException {
        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyGetValidateBeforeCall(appId, env, clusterName, namespaceName, key, null);
        Type localVarReturnType = new TypeToken<OpenItemDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取单个配置项 (asynchronously)
     * GET /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param key  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 成功获取配置项 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 配置项不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyGetAsync(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String key, final ApiCallback<OpenItemDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyGetValidateBeforeCall(appId, env, clusterName, namespaceName, key, _callback);
        Type localVarReturnType = new TypeToken<OpenItemDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyPut
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param key  (required)
     * @param createIfNotExists  (required)
     * @param openItemDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 配置项更新成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 配置项不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyPutCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String key, @javax.annotation.Nonnull Boolean createIfNotExists, @javax.annotation.Nonnull OpenItemDTO openItemDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = openItemDTO;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (createIfNotExists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createIfNotExists", createIfNotExists));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyPutValidateBeforeCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String key, @javax.annotation.Nonnull Boolean createIfNotExists, @javax.annotation.Nonnull OpenItemDTO openItemDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyPut(Async)");
        }

        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyPut(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyPut(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyPut(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyPut(Async)");
        }

        // verify the required parameter 'createIfNotExists' is set
        if (createIfNotExists == null) {
            throw new ApiException("Missing the required parameter 'createIfNotExists' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyPut(Async)");
        }

        // verify the required parameter 'openItemDTO' is set
        if (openItemDTO == null) {
            throw new ApiException("Missing the required parameter 'openItemDTO' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyPut(Async)");
        }

        return openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyPutCall(appId, env, clusterName, namespaceName, key, createIfNotExists, openItemDTO, _callback);

    }

    /**
     * 更新配置项
     * PUT /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param key  (required)
     * @param createIfNotExists  (required)
     * @param openItemDTO  (required)
     * @return OpenapiV1AppsGet401Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 配置项更新成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 配置项不存在 </td><td>  -  </td></tr>
     </table>
     */
    public OpenapiV1AppsGet401Response openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyPut(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String key, @javax.annotation.Nonnull Boolean createIfNotExists, @javax.annotation.Nonnull OpenItemDTO openItemDTO) throws ApiException {
        ApiResponse<OpenapiV1AppsGet401Response> localVarResp = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyPutWithHttpInfo(appId, env, clusterName, namespaceName, key, createIfNotExists, openItemDTO);
        return localVarResp.getData();
    }

    /**
     * 更新配置项
     * PUT /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param key  (required)
     * @param createIfNotExists  (required)
     * @param openItemDTO  (required)
     * @return ApiResponse&lt;OpenapiV1AppsGet401Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 配置项更新成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 配置项不存在 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenapiV1AppsGet401Response> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyPutWithHttpInfo(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String key, @javax.annotation.Nonnull Boolean createIfNotExists, @javax.annotation.Nonnull OpenItemDTO openItemDTO) throws ApiException {
        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyPutValidateBeforeCall(appId, env, clusterName, namespaceName, key, createIfNotExists, openItemDTO, null);
        Type localVarReturnType = new TypeToken<OpenapiV1AppsGet401Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 更新配置项 (asynchronously)
     * PUT /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items/{key}
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param key  (required)
     * @param createIfNotExists  (required)
     * @param openItemDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 配置项更新成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 配置项不存在 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyPutAsync(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull String key, @javax.annotation.Nonnull Boolean createIfNotExists, @javax.annotation.Nonnull OpenItemDTO openItemDTO, final ApiCallback<OpenapiV1AppsGet401Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsKeyPutValidateBeforeCall(appId, env, clusterName, namespaceName, key, createIfNotExists, openItemDTO, _callback);
        Type localVarReturnType = new TypeToken<OpenapiV1AppsGet401Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsPost
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param openItemDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 配置项创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsPostCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull OpenItemDTO openItemDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = openItemDTO;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsPostValidateBeforeCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull OpenItemDTO openItemDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsPost(Async)");
        }

        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsPost(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsPost(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsPost(Async)");
        }

        // verify the required parameter 'openItemDTO' is set
        if (openItemDTO == null) {
            throw new ApiException("Missing the required parameter 'openItemDTO' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsPost(Async)");
        }

        return openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsPostCall(appId, env, clusterName, namespaceName, openItemDTO, _callback);

    }

    /**
     * 创建新的配置项
     * POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param openItemDTO  (required)
     * @return OpenItemDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 配置项创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public OpenItemDTO openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsPost(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull OpenItemDTO openItemDTO) throws ApiException {
        ApiResponse<OpenItemDTO> localVarResp = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsPostWithHttpInfo(appId, env, clusterName, namespaceName, openItemDTO);
        return localVarResp.getData();
    }

    /**
     * 创建新的配置项
     * POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param openItemDTO  (required)
     * @return ApiResponse&lt;OpenItemDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 配置项创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenItemDTO> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsPostWithHttpInfo(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull OpenItemDTO openItemDTO) throws ApiException {
        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsPostValidateBeforeCall(appId, env, clusterName, namespaceName, openItemDTO, null);
        Type localVarReturnType = new TypeToken<OpenItemDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 创建新的配置项 (asynchronously)
     * POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param openItemDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 配置项创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsPostAsync(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull OpenItemDTO openItemDTO, final ApiCallback<OpenItemDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsPostValidateBeforeCall(appId, env, clusterName, namespaceName, openItemDTO, _callback);
        Type localVarReturnType = new TypeToken<OpenItemDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsRevertPost
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 配置项更改撤销成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsRevertPostCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:revert"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsRevertPostValidateBeforeCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsRevertPost(Async)");
        }

        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsRevertPost(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsRevertPost(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsRevertPost(Async)");
        }

        return openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsRevertPostCall(appId, env, clusterName, namespaceName, _callback);

    }

    /**
     * 撤销配置项更改
     * POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:revert
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @return OpenapiV1AppsGet401Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 配置项更改撤销成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public OpenapiV1AppsGet401Response openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsRevertPost(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName) throws ApiException {
        ApiResponse<OpenapiV1AppsGet401Response> localVarResp = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsRevertPostWithHttpInfo(appId, env, clusterName, namespaceName);
        return localVarResp.getData();
    }

    /**
     * 撤销配置项更改
     * POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:revert
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @return ApiResponse&lt;OpenapiV1AppsGet401Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 配置项更改撤销成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenapiV1AppsGet401Response> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsRevertPostWithHttpInfo(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName) throws ApiException {
        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsRevertPostValidateBeforeCall(appId, env, clusterName, namespaceName, null);
        Type localVarReturnType = new TypeToken<OpenapiV1AppsGet401Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 撤销配置项更改 (asynchronously)
     * POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:revert
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 配置项更改撤销成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsRevertPostAsync(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, final ApiCallback<OpenapiV1AppsGet401Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsRevertPostValidateBeforeCall(appId, env, clusterName, namespaceName, _callback);
        Type localVarReturnType = new TypeToken<OpenapiV1AppsGet401Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsSyncPost
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param namespaceSyncModel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 配置项同步成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsSyncPostCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull NamespaceSyncModel namespaceSyncModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = namespaceSyncModel;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:sync"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsSyncPostValidateBeforeCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull NamespaceSyncModel namespaceSyncModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsSyncPost(Async)");
        }

        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsSyncPost(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsSyncPost(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsSyncPost(Async)");
        }

        // verify the required parameter 'namespaceSyncModel' is set
        if (namespaceSyncModel == null) {
            throw new ApiException("Missing the required parameter 'namespaceSyncModel' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsSyncPost(Async)");
        }

        return openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsSyncPostCall(appId, env, clusterName, namespaceName, namespaceSyncModel, _callback);

    }

    /**
     * 同步配置项到多个命名空间
     * POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:sync
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param namespaceSyncModel  (required)
     * @return OpenapiV1AppsGet401Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 配置项同步成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public OpenapiV1AppsGet401Response openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsSyncPost(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull NamespaceSyncModel namespaceSyncModel) throws ApiException {
        ApiResponse<OpenapiV1AppsGet401Response> localVarResp = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsSyncPostWithHttpInfo(appId, env, clusterName, namespaceName, namespaceSyncModel);
        return localVarResp.getData();
    }

    /**
     * 同步配置项到多个命名空间
     * POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:sync
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param namespaceSyncModel  (required)
     * @return ApiResponse&lt;OpenapiV1AppsGet401Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 配置项同步成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenapiV1AppsGet401Response> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsSyncPostWithHttpInfo(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull NamespaceSyncModel namespaceSyncModel) throws ApiException {
        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsSyncPostValidateBeforeCall(appId, env, clusterName, namespaceName, namespaceSyncModel, null);
        Type localVarReturnType = new TypeToken<OpenapiV1AppsGet401Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 同步配置项到多个命名空间 (asynchronously)
     * POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:sync
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param namespaceSyncModel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 配置项同步成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsSyncPostAsync(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull NamespaceSyncModel namespaceSyncModel, final ApiCallback<OpenapiV1AppsGet401Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsSyncPostValidateBeforeCall(appId, env, clusterName, namespaceName, namespaceSyncModel, _callback);
        Type localVarReturnType = new TypeToken<OpenapiV1AppsGet401Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param namespaceTextModel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 配置文本语法验证通过 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 配置文本语法错误 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePostCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull NamespaceTextModel namespaceTextModel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = namespaceTextModel;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:validate"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePostValidateBeforeCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull NamespaceTextModel namespaceTextModel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost(Async)");
        }

        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost(Async)");
        }

        // verify the required parameter 'namespaceTextModel' is set
        if (namespaceTextModel == null) {
            throw new ApiException("Missing the required parameter 'namespaceTextModel' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost(Async)");
        }

        return openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePostCall(appId, env, clusterName, namespaceName, namespaceTextModel, _callback);

    }

    /**
     * 验证配置文本语法
     * POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:validate
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param namespaceTextModel  (required)
     * @return OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 配置文本语法验证通过 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 配置文本语法错误 </td><td>  -  </td></tr>
     </table>
     */
    public OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost200Response openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull NamespaceTextModel namespaceTextModel) throws ApiException {
        ApiResponse<OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost200Response> localVarResp = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePostWithHttpInfo(appId, env, clusterName, namespaceName, namespaceTextModel);
        return localVarResp.getData();
    }

    /**
     * 验证配置文本语法
     * POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:validate
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param namespaceTextModel  (required)
     * @return ApiResponse&lt;OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 配置文本语法验证通过 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 配置文本语法错误 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost200Response> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePostWithHttpInfo(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull NamespaceTextModel namespaceTextModel) throws ApiException {
        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePostValidateBeforeCall(appId, env, clusterName, namespaceName, namespaceTextModel, null);
        Type localVarReturnType = new TypeToken<OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 验证配置文本语法 (asynchronously)
     * POST /apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/items:validate
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param namespaceTextModel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 配置文本语法验证通过 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 配置文本语法错误 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePostAsync(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, @javax.annotation.Nonnull NamespaceTextModel namespaceTextModel, final ApiCallback<OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePostValidateBeforeCall(appId, env, clusterName, namespaceName, namespaceTextModel, _callback);
        Type localVarReturnType = new TypeToken<OpenapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameItemsValidatePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
