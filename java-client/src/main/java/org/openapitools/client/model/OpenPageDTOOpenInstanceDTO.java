/*
 * Apollo OpenAPI
 * Apollo配置中心OpenAPI接口文档  ## 认证方式  所有API接口都需要通过Authorization header进行身份验证。  ### 获取Token的方式：  1. **Portal管理界面获取**：    - 登录Apollo Portal管理界面    - 进入\"管理员工具\" -> \"开放平台授权管理\"    - 创建第三方应用，获取Token  2. **Token格式**：    ```    Authorization: token_value    ```  3. **Token权限**：    - Token具有对应应用的读写权限    - 不同Token可能有不同的环境和命名空间权限    - 建议为不同用途创建不同的Token  ### 使用示例： ```bash curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\      -H \"Authorization: your_token_here\" ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OpenInstanceDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 分页实例数据传输对象，用于返回分页查询的实例列表结果
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-14T15:38:42.175795+08:00[Asia/Shanghai]", comments = "Generator version: 7.15.0")
public class OpenPageDTOOpenInstanceDTO {
  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  @javax.annotation.Nullable
  private Integer page;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  @javax.annotation.Nullable
  private Integer size;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  @javax.annotation.Nullable
  private Long total;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  @javax.annotation.Nullable
  private List<OpenInstanceDTO> content = new ArrayList<>();

  public OpenPageDTOOpenInstanceDTO() {
  }

  public OpenPageDTOOpenInstanceDTO page(@javax.annotation.Nullable Integer page) {
    this.page = page;
    return this;
  }

  /**
   * 当前页码，从0开始计数
   * @return page
   */
  @javax.annotation.Nullable
  public Integer getPage() {
    return page;
  }

  public void setPage(@javax.annotation.Nullable Integer page) {
    this.page = page;
  }


  public OpenPageDTOOpenInstanceDTO size(@javax.annotation.Nullable Integer size) {
    this.size = size;
    return this;
  }

  /**
   * 每页显示的记录数量
   * @return size
   */
  @javax.annotation.Nullable
  public Integer getSize() {
    return size;
  }

  public void setSize(@javax.annotation.Nullable Integer size) {
    this.size = size;
  }


  public OpenPageDTOOpenInstanceDTO total(@javax.annotation.Nullable Long total) {
    this.total = total;
    return this;
  }

  /**
   * 总记录数，符合查询条件的实例总数量
   * @return total
   */
  @javax.annotation.Nullable
  public Long getTotal() {
    return total;
  }

  public void setTotal(@javax.annotation.Nullable Long total) {
    this.total = total;
  }


  public OpenPageDTOOpenInstanceDTO content(@javax.annotation.Nullable List<OpenInstanceDTO> content) {
    this.content = content;
    return this;
  }

  public OpenPageDTOOpenInstanceDTO addContentItem(OpenInstanceDTO contentItem) {
    if (this.content == null) {
      this.content = new ArrayList<>();
    }
    this.content.add(contentItem);
    return this;
  }

  /**
   * 当前页的实例列表，包含具体的实例数据
   * @return content
   */
  @javax.annotation.Nullable
  public List<OpenInstanceDTO> getContent() {
    return content;
  }

  public void setContent(@javax.annotation.Nullable List<OpenInstanceDTO> content) {
    this.content = content;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OpenPageDTOOpenInstanceDTO openPageDTOOpenInstanceDTO = (OpenPageDTOOpenInstanceDTO) o;
    return Objects.equals(this.page, openPageDTOOpenInstanceDTO.page) &&
        Objects.equals(this.size, openPageDTOOpenInstanceDTO.size) &&
        Objects.equals(this.total, openPageDTOOpenInstanceDTO.total) &&
        Objects.equals(this.content, openPageDTOOpenInstanceDTO.content);
  }

  @Override
  public int hashCode() {
    return Objects.hash(page, size, total, content);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OpenPageDTOOpenInstanceDTO {\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("page", "size", "total", "content"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OpenPageDTOOpenInstanceDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OpenPageDTOOpenInstanceDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OpenPageDTOOpenInstanceDTO is not found in the empty JSON string", OpenPageDTOOpenInstanceDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OpenPageDTOOpenInstanceDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OpenPageDTOOpenInstanceDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) {
        JsonArray jsonArraycontent = jsonObj.getAsJsonArray("content");
        if (jsonArraycontent != null) {
          // ensure the json data is an array
          if (!jsonObj.get("content").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `content` to be an array in the JSON string but got `%s`", jsonObj.get("content").toString()));
          }

          // validate the optional field `content` (array)
          for (int i = 0; i < jsonArraycontent.size(); i++) {
            OpenInstanceDTO.validateJsonElement(jsonArraycontent.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OpenPageDTOOpenInstanceDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OpenPageDTOOpenInstanceDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OpenPageDTOOpenInstanceDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OpenPageDTOOpenInstanceDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<OpenPageDTOOpenInstanceDTO>() {
           @Override
           public void write(JsonWriter out, OpenPageDTOOpenInstanceDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OpenPageDTOOpenInstanceDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OpenPageDTOOpenInstanceDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OpenPageDTOOpenInstanceDTO
   * @throws IOException if the JSON string is invalid with respect to OpenPageDTOOpenInstanceDTO
   */
  public static OpenPageDTOOpenInstanceDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OpenPageDTOOpenInstanceDTO.class);
  }

  /**
   * Convert an instance of OpenPageDTOOpenInstanceDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

