/*
 * Apollo OpenAPI
 * Apollo配置中心OpenAPI接口文档  ## 认证方式  所有API接口都需要通过Authorization header进行身份验证。  ### 获取Token的方式：  1. **Portal管理界面获取**：    - 登录Apollo Portal管理界面    - 进入\"管理员工具\" -> \"开放平台授权管理\"    - 创建第三方应用，获取Token  2. **Token格式**：    ```    Authorization: token_value    ```  3. **Token权限**：    - Token具有对应应用的读写权限    - 不同Token可能有不同的环境和命名空间权限    - 建议为不同用途创建不同的Token  ### 使用示例： ```bash curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\      -H \"Authorization: your_token_here\" ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.OpenAppNamespaceDTO;
import org.openapitools.client.model.OpenNamespaceDTO;
import org.openapitools.client.model.OpenNamespaceLockDTO;
import org.openapitools.client.model.OpenapiV1AppsGet401Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NamespaceManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NamespaceManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NamespaceManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for openapiV1AppnamespacesGet
     * @param publicOnly  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppnamespacesGetCall(@javax.annotation.Nonnull Boolean publicOnly, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/appnamespaces";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (publicOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publicOnly", publicOnly));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1AppnamespacesGetValidateBeforeCall(@javax.annotation.Nonnull Boolean publicOnly, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'publicOnly' is set
        if (publicOnly == null) {
            throw new ApiException("Missing the required parameter 'publicOnly' when calling openapiV1AppnamespacesGet(Async)");
        }

        return openapiV1AppnamespacesGetCall(publicOnly, _callback);

    }

    /**
     * 获取所有公共AppNamespace
     * GET /openapi/v1/appnamespaces?public&#x3D;true
     * @param publicOnly  (required)
     * @return List&lt;OpenAppNamespaceDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<OpenAppNamespaceDTO> openapiV1AppnamespacesGet(@javax.annotation.Nonnull Boolean publicOnly) throws ApiException {
        ApiResponse<List<OpenAppNamespaceDTO>> localVarResp = openapiV1AppnamespacesGetWithHttpInfo(publicOnly);
        return localVarResp.getData();
    }

    /**
     * 获取所有公共AppNamespace
     * GET /openapi/v1/appnamespaces?public&#x3D;true
     * @param publicOnly  (required)
     * @return ApiResponse&lt;List&lt;OpenAppNamespaceDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OpenAppNamespaceDTO>> openapiV1AppnamespacesGetWithHttpInfo(@javax.annotation.Nonnull Boolean publicOnly) throws ApiException {
        okhttp3.Call localVarCall = openapiV1AppnamespacesGetValidateBeforeCall(publicOnly, null);
        Type localVarReturnType = new TypeToken<List<OpenAppNamespaceDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取所有公共AppNamespace (asynchronously)
     * GET /openapi/v1/appnamespaces?public&#x3D;true
     * @param publicOnly  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppnamespacesGetAsync(@javax.annotation.Nonnull Boolean publicOnly, final ApiCallback<List<OpenAppNamespaceDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1AppnamespacesGetValidateBeforeCall(publicOnly, _callback);
        Type localVarReturnType = new TypeToken<List<OpenAppNamespaceDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1AppsAppIdAppnamespacesGet
     * @param appId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsAppIdAppnamespacesGetCall(@javax.annotation.Nonnull String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/apps/{appId}/appnamespaces"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1AppsAppIdAppnamespacesGetValidateBeforeCall(@javax.annotation.Nonnull String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1AppsAppIdAppnamespacesGet(Async)");
        }

        return openapiV1AppsAppIdAppnamespacesGetCall(appId, _callback);

    }

    /**
     * 获取指定应用的AppNamespace
     * GET /openapi/v1/apps/{appId}/appnamespaces
     * @param appId  (required)
     * @return List&lt;OpenAppNamespaceDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<OpenAppNamespaceDTO> openapiV1AppsAppIdAppnamespacesGet(@javax.annotation.Nonnull String appId) throws ApiException {
        ApiResponse<List<OpenAppNamespaceDTO>> localVarResp = openapiV1AppsAppIdAppnamespacesGetWithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 获取指定应用的AppNamespace
     * GET /openapi/v1/apps/{appId}/appnamespaces
     * @param appId  (required)
     * @return ApiResponse&lt;List&lt;OpenAppNamespaceDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OpenAppNamespaceDTO>> openapiV1AppsAppIdAppnamespacesGetWithHttpInfo(@javax.annotation.Nonnull String appId) throws ApiException {
        okhttp3.Call localVarCall = openapiV1AppsAppIdAppnamespacesGetValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<List<OpenAppNamespaceDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定应用的AppNamespace (asynchronously)
     * GET /openapi/v1/apps/{appId}/appnamespaces
     * @param appId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsAppIdAppnamespacesGetAsync(@javax.annotation.Nonnull String appId, final ApiCallback<List<OpenAppNamespaceDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1AppsAppIdAppnamespacesGetValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<List<OpenAppNamespaceDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1AppsAppIdAppnamespacesNamespaceNameGet
     * @param appId  (required)
     * @param namespaceName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsAppIdAppnamespacesNamespaceNameGetCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String namespaceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/apps/{appId}/appnamespaces/{namespaceName}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1AppsAppIdAppnamespacesNamespaceNameGetValidateBeforeCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String namespaceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1AppsAppIdAppnamespacesNamespaceNameGet(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling openapiV1AppsAppIdAppnamespacesNamespaceNameGet(Async)");
        }

        return openapiV1AppsAppIdAppnamespacesNamespaceNameGetCall(appId, namespaceName, _callback);

    }

    /**
     * 获取指定的AppNamespace
     * GET /openapi/v1/apps/{appId}/appnamespaces/{namespaceName}
     * @param appId  (required)
     * @param namespaceName  (required)
     * @return OpenAppNamespaceDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public OpenAppNamespaceDTO openapiV1AppsAppIdAppnamespacesNamespaceNameGet(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String namespaceName) throws ApiException {
        ApiResponse<OpenAppNamespaceDTO> localVarResp = openapiV1AppsAppIdAppnamespacesNamespaceNameGetWithHttpInfo(appId, namespaceName);
        return localVarResp.getData();
    }

    /**
     * 获取指定的AppNamespace
     * GET /openapi/v1/apps/{appId}/appnamespaces/{namespaceName}
     * @param appId  (required)
     * @param namespaceName  (required)
     * @return ApiResponse&lt;OpenAppNamespaceDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenAppNamespaceDTO> openapiV1AppsAppIdAppnamespacesNamespaceNameGetWithHttpInfo(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String namespaceName) throws ApiException {
        okhttp3.Call localVarCall = openapiV1AppsAppIdAppnamespacesNamespaceNameGetValidateBeforeCall(appId, namespaceName, null);
        Type localVarReturnType = new TypeToken<OpenAppNamespaceDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定的AppNamespace (asynchronously)
     * GET /openapi/v1/apps/{appId}/appnamespaces/{namespaceName}
     * @param appId  (required)
     * @param namespaceName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsAppIdAppnamespacesNamespaceNameGetAsync(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String namespaceName, final ApiCallback<OpenAppNamespaceDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1AppsAppIdAppnamespacesNamespaceNameGetValidateBeforeCall(appId, namespaceName, _callback);
        Type localVarReturnType = new TypeToken<OpenAppNamespaceDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1AppsAppIdAppnamespacesPost
     * @param appId  (required)
     * @param openAppNamespaceDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AppNamespace创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsAppIdAppnamespacesPostCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull OpenAppNamespaceDTO openAppNamespaceDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = openAppNamespaceDTO;

        // create path and map variables
        String localVarPath = "/openapi/v1/apps/{appId}/appnamespaces"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1AppsAppIdAppnamespacesPostValidateBeforeCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull OpenAppNamespaceDTO openAppNamespaceDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1AppsAppIdAppnamespacesPost(Async)");
        }

        // verify the required parameter 'openAppNamespaceDTO' is set
        if (openAppNamespaceDTO == null) {
            throw new ApiException("Missing the required parameter 'openAppNamespaceDTO' when calling openapiV1AppsAppIdAppnamespacesPost(Async)");
        }

        return openapiV1AppsAppIdAppnamespacesPostCall(appId, openAppNamespaceDTO, _callback);

    }

    /**
     * 创建AppNamespace
     * POST /openapi/v1/apps/{appId}/appnamespaces
     * @param appId  (required)
     * @param openAppNamespaceDTO  (required)
     * @return OpenAppNamespaceDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AppNamespace创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public OpenAppNamespaceDTO openapiV1AppsAppIdAppnamespacesPost(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull OpenAppNamespaceDTO openAppNamespaceDTO) throws ApiException {
        ApiResponse<OpenAppNamespaceDTO> localVarResp = openapiV1AppsAppIdAppnamespacesPostWithHttpInfo(appId, openAppNamespaceDTO);
        return localVarResp.getData();
    }

    /**
     * 创建AppNamespace
     * POST /openapi/v1/apps/{appId}/appnamespaces
     * @param appId  (required)
     * @param openAppNamespaceDTO  (required)
     * @return ApiResponse&lt;OpenAppNamespaceDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AppNamespace创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenAppNamespaceDTO> openapiV1AppsAppIdAppnamespacesPostWithHttpInfo(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull OpenAppNamespaceDTO openAppNamespaceDTO) throws ApiException {
        okhttp3.Call localVarCall = openapiV1AppsAppIdAppnamespacesPostValidateBeforeCall(appId, openAppNamespaceDTO, null);
        Type localVarReturnType = new TypeToken<OpenAppNamespaceDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 创建AppNamespace (asynchronously)
     * POST /openapi/v1/apps/{appId}/appnamespaces
     * @param appId  (required)
     * @param openAppNamespaceDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> AppNamespace创建成功 </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 请求参数错误 </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 权限不足 </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsAppIdAppnamespacesPostAsync(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull OpenAppNamespaceDTO openAppNamespaceDTO, final ApiCallback<OpenAppNamespaceDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1AppsAppIdAppnamespacesPostValidateBeforeCall(appId, openAppNamespaceDTO, _callback);
        Type localVarReturnType = new TypeToken<OpenAppNamespaceDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesIntegrityCheckGet
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesIntegrityCheckGetCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/integrity-check"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesIntegrityCheckGetValidateBeforeCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesIntegrityCheckGet(Async)");
        }

        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesIntegrityCheckGet(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesIntegrityCheckGet(Async)");
        }

        return openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesIntegrityCheckGetCall(appId, env, clusterName, _callback);

    }

    /**
     * 检查缺失的Namespace
     * GET /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/integrity-check
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<String> openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesIntegrityCheckGet(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName) throws ApiException {
        ApiResponse<List<String>> localVarResp = openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesIntegrityCheckGetWithHttpInfo(appId, env, clusterName);
        return localVarResp.getData();
    }

    /**
     * 检查缺失的Namespace
     * GET /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/integrity-check
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesIntegrityCheckGetWithHttpInfo(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName) throws ApiException {
        okhttp3.Call localVarCall = openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesIntegrityCheckGetValidateBeforeCall(appId, env, clusterName, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 检查缺失的Namespace (asynchronously)
     * GET /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/integrity-check
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesIntegrityCheckGetAsync(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesIntegrityCheckGetValidateBeforeCall(appId, env, clusterName, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNamePublicAssociationGet
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNamePublicAssociationGetCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/public-association"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNamePublicAssociationGetValidateBeforeCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNamePublicAssociationGet(Async)");
        }

        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNamePublicAssociationGet(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNamePublicAssociationGet(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNamePublicAssociationGet(Async)");
        }

        return openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNamePublicAssociationGetCall(appId, env, clusterName, namespaceName, _callback);

    }

    /**
     * 获取关联的公共Namespace
     * GET /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/public-association
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @return OpenNamespaceDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public OpenNamespaceDTO openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNamePublicAssociationGet(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName) throws ApiException {
        ApiResponse<OpenNamespaceDTO> localVarResp = openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNamePublicAssociationGetWithHttpInfo(appId, env, clusterName, namespaceName);
        return localVarResp.getData();
    }

    /**
     * 获取关联的公共Namespace
     * GET /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/public-association
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @return ApiResponse&lt;OpenNamespaceDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenNamespaceDTO> openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNamePublicAssociationGetWithHttpInfo(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName) throws ApiException {
        okhttp3.Call localVarCall = openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNamePublicAssociationGetValidateBeforeCall(appId, env, clusterName, namespaceName, null);
        Type localVarReturnType = new TypeToken<OpenNamespaceDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取关联的公共Namespace (asynchronously)
     * GET /openapi/v1/apps/{appId}/envs/{env}/clusters/{clusterName}/namespaces/{namespaceName}/public-association
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNamePublicAssociationGetAsync(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, final ApiCallback<OpenNamespaceDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1AppsAppIdEnvsEnvClustersClusterNameNamespacesNamespaceNamePublicAssociationGetValidateBeforeCall(appId, env, clusterName, namespaceName, _callback);
        Type localVarReturnType = new TypeToken<OpenNamespaceDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1EnvsEnvAppnamespacesPublicNamespaceNameInstancesGet
     * @param env  (required)
     * @param publicNamespaceName  (required)
     * @param page  (required)
     * @param size  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppnamespacesPublicNamespaceNameInstancesGetCall(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull String publicNamespaceName, @javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/appnamespaces/{publicNamespaceName}/instances"
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "publicNamespaceName" + "}", localVarApiClient.escapeString(publicNamespaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1EnvsEnvAppnamespacesPublicNamespaceNameInstancesGetValidateBeforeCall(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull String publicNamespaceName, @javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1EnvsEnvAppnamespacesPublicNamespaceNameInstancesGet(Async)");
        }

        // verify the required parameter 'publicNamespaceName' is set
        if (publicNamespaceName == null) {
            throw new ApiException("Missing the required parameter 'publicNamespaceName' when calling openapiV1EnvsEnvAppnamespacesPublicNamespaceNameInstancesGet(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling openapiV1EnvsEnvAppnamespacesPublicNamespaceNameInstancesGet(Async)");
        }

        // verify the required parameter 'size' is set
        if (size == null) {
            throw new ApiException("Missing the required parameter 'size' when calling openapiV1EnvsEnvAppnamespacesPublicNamespaceNameInstancesGet(Async)");
        }

        return openapiV1EnvsEnvAppnamespacesPublicNamespaceNameInstancesGetCall(env, publicNamespaceName, page, size, _callback);

    }

    /**
     * 获取公共AppNamespace的所有实例
     * GET /openapi/v1/envs/{env}/appnamespaces/{publicNamespaceName}/instances
     * @param env  (required)
     * @param publicNamespaceName  (required)
     * @param page  (required)
     * @param size  (required)
     * @return List&lt;OpenNamespaceDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<OpenNamespaceDTO> openapiV1EnvsEnvAppnamespacesPublicNamespaceNameInstancesGet(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull String publicNamespaceName, @javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size) throws ApiException {
        ApiResponse<List<OpenNamespaceDTO>> localVarResp = openapiV1EnvsEnvAppnamespacesPublicNamespaceNameInstancesGetWithHttpInfo(env, publicNamespaceName, page, size);
        return localVarResp.getData();
    }

    /**
     * 获取公共AppNamespace的所有实例
     * GET /openapi/v1/envs/{env}/appnamespaces/{publicNamespaceName}/instances
     * @param env  (required)
     * @param publicNamespaceName  (required)
     * @param page  (required)
     * @param size  (required)
     * @return ApiResponse&lt;List&lt;OpenNamespaceDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OpenNamespaceDTO>> openapiV1EnvsEnvAppnamespacesPublicNamespaceNameInstancesGetWithHttpInfo(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull String publicNamespaceName, @javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size) throws ApiException {
        okhttp3.Call localVarCall = openapiV1EnvsEnvAppnamespacesPublicNamespaceNameInstancesGetValidateBeforeCall(env, publicNamespaceName, page, size, null);
        Type localVarReturnType = new TypeToken<List<OpenNamespaceDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取公共AppNamespace的所有实例 (asynchronously)
     * GET /openapi/v1/envs/{env}/appnamespaces/{publicNamespaceName}/instances
     * @param env  (required)
     * @param publicNamespaceName  (required)
     * @param page  (required)
     * @param size  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppnamespacesPublicNamespaceNameInstancesGetAsync(@javax.annotation.Nonnull String env, @javax.annotation.Nonnull String publicNamespaceName, @javax.annotation.Nonnull Integer page, @javax.annotation.Nonnull Integer size, final ApiCallback<List<OpenNamespaceDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1EnvsEnvAppnamespacesPublicNamespaceNameInstancesGetValidateBeforeCall(env, publicNamespaceName, page, size, _callback);
        Type localVarReturnType = new TypeToken<List<OpenNamespaceDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesGet
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param fillItemDetail  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesGetCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull Boolean fillItemDetail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fillItemDetail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillItemDetail", fillItemDetail));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesGetValidateBeforeCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull Boolean fillItemDetail, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesGet(Async)");
        }

        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesGet(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesGet(Async)");
        }

        // verify the required parameter 'fillItemDetail' is set
        if (fillItemDetail == null) {
            throw new ApiException("Missing the required parameter 'fillItemDetail' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesGet(Async)");
        }

        return openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesGetCall(appId, env, clusterName, fillItemDetail, _callback);

    }

    /**
     * 获取指定集群下的所有Namespace
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param fillItemDetail  (required)
     * @return List&lt;OpenNamespaceDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public List<OpenNamespaceDTO> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesGet(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull Boolean fillItemDetail) throws ApiException {
        ApiResponse<List<OpenNamespaceDTO>> localVarResp = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesGetWithHttpInfo(appId, env, clusterName, fillItemDetail);
        return localVarResp.getData();
    }

    /**
     * 获取指定集群下的所有Namespace
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param fillItemDetail  (required)
     * @return ApiResponse&lt;List&lt;OpenNamespaceDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OpenNamespaceDTO>> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesGetWithHttpInfo(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull Boolean fillItemDetail) throws ApiException {
        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesGetValidateBeforeCall(appId, env, clusterName, fillItemDetail, null);
        Type localVarReturnType = new TypeToken<List<OpenNamespaceDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定集群下的所有Namespace (asynchronously)
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param fillItemDetail  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesGetAsync(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull Boolean fillItemDetail, final ApiCallback<List<OpenNamespaceDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesGetValidateBeforeCall(appId, env, clusterName, fillItemDetail, _callback);
        Type localVarReturnType = new TypeToken<List<OpenNamespaceDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameLockGet
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameLockGetCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/lock"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "env" + "}", localVarApiClient.escapeString(env.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "namespaceName" + "}", localVarApiClient.escapeString(namespaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameLockGetValidateBeforeCall(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameLockGet(Async)");
        }

        // verify the required parameter 'env' is set
        if (env == null) {
            throw new ApiException("Missing the required parameter 'env' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameLockGet(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameLockGet(Async)");
        }

        // verify the required parameter 'namespaceName' is set
        if (namespaceName == null) {
            throw new ApiException("Missing the required parameter 'namespaceName' when calling openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameLockGet(Async)");
        }

        return openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameLockGetCall(appId, env, clusterName, namespaceName, _callback);

    }

    /**
     * 获取Namespace的锁状态
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/lock
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @return OpenNamespaceLockDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public OpenNamespaceLockDTO openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameLockGet(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName) throws ApiException {
        ApiResponse<OpenNamespaceLockDTO> localVarResp = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameLockGetWithHttpInfo(appId, env, clusterName, namespaceName);
        return localVarResp.getData();
    }

    /**
     * 获取Namespace的锁状态
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/lock
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @return ApiResponse&lt;OpenNamespaceLockDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenNamespaceLockDTO> openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameLockGetWithHttpInfo(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName) throws ApiException {
        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameLockGetValidateBeforeCall(appId, env, clusterName, namespaceName, null);
        Type localVarReturnType = new TypeToken<OpenNamespaceLockDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取Namespace的锁状态 (asynchronously)
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/lock
     * @param appId  (required)
     * @param env  (required)
     * @param clusterName  (required)
     * @param namespaceName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameLockGetAsync(@javax.annotation.Nonnull String appId, @javax.annotation.Nonnull String env, @javax.annotation.Nonnull String clusterName, @javax.annotation.Nonnull String namespaceName, final ApiCallback<OpenNamespaceLockDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameLockGetValidateBeforeCall(appId, env, clusterName, namespaceName, _callback);
        Type localVarReturnType = new TypeToken<OpenNamespaceLockDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
