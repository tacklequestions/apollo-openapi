/*
 * Apollo OpenAPI
 * Apollo配置中心OpenAPI接口文档  ## 认证方式  所有API接口都需要通过Authorization header进行身份验证。  ### 获取Token的方式：  1. **Portal管理界面获取**：    - 登录Apollo Portal管理界面    - 进入\"管理员工具\" -> \"开放平台授权管理\"    - 创建第三方应用，获取Token  2. **Token格式**：    ```    Authorization: token_value    ```  3. **Token权限**：    - Token具有对应应用的读写权限    - 不同Token可能有不同的环境和命名空间权限    - 建议为不同用途创建不同的Token  ### 使用示例： ```bash curl -X GET \"http://localhost:8070/openapi/v1/apps\" \\      -H \"Authorization: your_token_here\" ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.OpenClusterDTO;
import org.openapitools.client.model.OpenNamespaceDTO;
import org.openapitools.client.model.OpenapiV1AppsGet401Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ClusterManagementApi
 */
@Disabled
public class ClusterManagementApiTest {

    private final ClusterManagementApi api = new ClusterManagementApi();

    /**
     * 获取指定集群信息
     *
     * GET /openapi/v1/apps/{appId}/clusters/{clusterName}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1AppsAppIdClustersClusterNameGetTest() throws ApiException {
        String appId = null;
        String clusterName = null;
        OpenClusterDTO response = api.openapiV1AppsAppIdClustersClusterNameGet(appId, clusterName);
        // TODO: test validations
    }

    /**
     * 创建集群
     *
     * POST /openapi/v1/apps/{appId}/clusters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1AppsAppIdClustersPostTest() throws ApiException {
        String appId = null;
        OpenClusterDTO openClusterDTO = null;
        OpenClusterDTO response = api.openapiV1AppsAppIdClustersPost(appId, openClusterDTO);
        // TODO: test validations
    }

    /**
     * 删除集群
     *
     * DELETE /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1EnvsEnvAppsAppIdClustersClusterNameDeleteTest() throws ApiException {
        String env = null;
        String appId = null;
        String clusterName = null;
        OpenapiV1AppsGet401Response response = api.openapiV1EnvsEnvAppsAppIdClustersClusterNameDelete(env, appId, clusterName);
        // TODO: test validations
    }

    /**
     * 获取命名空间分支信息
     *
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}/branches
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesGetTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        OpenNamespaceDTO response = api.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameBranchesGet(appId, env, clusterName, namespaceName);
        // TODO: test validations
    }

    /**
     * 获取指定的Namespace
     *
     * GET /openapi/v1/envs/{env}/apps/{appId}/clusters/{clusterName}/namespaces/{namespaceName}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameGetTest() throws ApiException {
        String appId = null;
        String env = null;
        String clusterName = null;
        String namespaceName = null;
        Boolean fillItemDetail = null;
        OpenNamespaceDTO response = api.openapiV1EnvsEnvAppsAppIdClustersClusterNameNamespacesNamespaceNameGet(appId, env, clusterName, namespaceName, fillItemDetail);
        // TODO: test validations
    }

}
